2025-02-25 08:01:59.286 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 08:01:59.287 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 08:02:02.626 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 08:02:26.697 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 08:04:11.524 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 08:04:11.524 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 08:04:14.497 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 08:04:30.247 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (1819), thread 'MainThread' (140349308539328):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fa59dddae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fa59e8aaf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fa59dddae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fa59d4a6440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fa59de15d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fa59de15e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fa59de15cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fa59d32a9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fa59dd632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fa59d531960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fa59de14ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fa59d4a63b0>
    │   └ <property object at 0x7fa59de42de0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fa59d4a5750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fa59d4a56c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fa59e711bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fa59e8d6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fa59c19dc30>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fa344631210>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fa3635679a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fa363567880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fa36357c3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fa36357c5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>
    │    └ <property object at 0x7fa36356b830>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fa36357c670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fa344352830>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fa36357c790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fa36356bd80>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>
    │    └ <function Trainer._run_sanity_check at 0x7fa36357c940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fa363589260>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa344352380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fa363518d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fa363581cf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fa3634e7830>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fa363581cf0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fa3633a8fd0>
                 │    │          └ <function Loop.run at 0x7fa3634aab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fa363582b60>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fa363581cf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fa3633a8fd0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fa363505e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fa363582b60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fa363506290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fa363582b60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fa363663600>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fa363582b60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fa3a6705b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fa344352830>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fa344353ca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fa3a66f9530>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fa344352830>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fa44c7d85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fa44c418280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fa44c7d85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 498, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fa34dff31c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 467, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fa34c9bee00>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 34
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fa34c9bee00>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fa34c9bee00>
           │    │     └ <function Flow.flow_from_tape at 0x7fa358690310>
           │    └ <silk.flow.Flow object at 0x7fa34c9bee90>
           └ <silk.flow.FixedOutputFlow object at 0x7fa34c9bee00>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fa34c9bf9d0>, <silk.flow._InputExtraction object at 0x7fa34c9bed70>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fa34c9bee90>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fa59e5a44f0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 0.1273,  0.0965, -0.2113,  ..., -0.0974,  0.2421,  0.1675],
           │    │          │         │                  [ 0.0719,  0.0268, -0...
           │    │          │         └ <property object at 0x7fa59e5a44a0>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 0.1273,  0.0965, -0.2113,  ..., -0.0974,  0.2421,  0.1675],
           │    │                     [ 0.0719,  0.0268, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fa344630430>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fa34dff1510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0 = jax_loss.total_loss(
             │        └ <function total_loss at 0x7fa34dff1990>
             └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 486, in total_loss
    print(lse_0.shape, lse_1.shape)
          │     └ <attribute 'shape' of 'torch._C.TensorBase' objects>
          └ tensor([12.9604, 12.9604, 12.9604,  ..., 29.0539, 28.9865, 28.9255],
                   device='cuda:0')

UnboundLocalError: local variable 'lse_1' referenced before assignment
2025-02-25 08:04:30.349 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 08:04:57.101 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 08:04:57.102 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 08:05:00.099 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 08:05:15.817 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 08:07:15.371 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 08:07:15.372 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 08:07:18.369 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 08:07:33.993 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 08:09:13.495 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 08:09:13.495 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 08:09:16.449 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 08:09:32.137 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 09:17:09.923 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 09:17:09.924 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 09:17:12.973 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 09:17:17.935 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 09:22:21.498 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 09:22:21.498 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 09:22:24.476 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 09:22:29.428 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (10757), thread 'MainThread' (140586985198016):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fdcf47dae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fdcf52caf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fdcf47dae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fdcf3ede440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fdcf4815d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fdcf4815e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fdcf4815cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fdcf3d4e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fdcf47632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fdcf3f6d8a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fdcf4814ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fdcf3ede3b0>
    │   └ <property object at 0x7fdcf47ffc40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fdcf3edd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fdcf3edd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fdcf5131bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fdcf52f6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fdab9de0220>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fda9c060430>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fdab9f7f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fdab9f7f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fdab9f983a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fdab9f985e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>
    │    └ <property object at 0x7fdab9f876f0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fdab9f98670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fda96e02650>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fdab9f98790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fdab9f87c40>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>
    │    └ <function Trainer._run_sanity_check at 0x7fdab9f98940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fdab9f9d120>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda96e021d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fdab9f30d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fdab9fa23e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fdab9efb790>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fdab9fa23e0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fdab9dc5ba0>
                 │    │          └ <function Loop.run at 0x7fdaba0beb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdab9fa2050>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fdab9fa23e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fdab9dc5ba0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fdab9f1de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdab9fa2050>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fdab9f1e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdab9fa2050>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fdaba0776a0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdab9fa2050>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fdafd1bdb40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fda96e02650>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fda96e00f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fdafd1b0ef0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fda96e02650>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fdba31d85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fdba2e18280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fdba31d85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 500, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fdaa4a0f0a0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 469, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fdaa33e39d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 35
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fdaa33e39d0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fdaa33e39d0>
           │    │     └ <function Flow.flow_from_tape at 0x7fdaaf0801f0>
           │    └ <silk.flow.Flow object at 0x7fdaa33e3460>
           └ <silk.flow.FixedOutputFlow object at 0x7fdaa33e39d0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, (tensor([[5.0000...
    │       │        │    │            └ 35
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fdaa33e3580>, <silk.flow._InputExtraction object at 0x7fdaa33e2a40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fdaa33e3460>
    │       └ 35
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, (tensor([[5.0000...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fdcf4fc44f0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 3.6750e+02, 6.2235e-01],
           │    │          │         │                 [5.0000e-01, 7.4250e+02, 6.2243e-01]...
           │    │          │         └ <property object at 0x7fdcf4fc44a0>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 3.6750e+02, 6.2235e-01],
           │    │                    [5.0000e-01, 7.4250e+02, 6.2243e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fda9c061030>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 76, in __call__
    print(sparse_descriptors.shape, sparse_descriptors.dtype)
          │                         └ (tensor([[-0.1830, -0.1778, -0.1419,  ..., -0.0142, -0.1712, -0.1307],
          │                                   [-0.2034, -0.1645, -0.1112,  ..., -0.0324, -0....
          └ (tensor([[-0.1830, -0.1778, -0.1419,  ..., -0.0142, -0.1712, -0.1307],
                    [-0.2034, -0.1645, -0.1112,  ..., -0.0324, -0....

AttributeError: 'tuple' object has no attribute 'shape'
2025-02-25 09:22:29.551 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 09:22:54.600 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 09:22:54.600 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 09:22:57.594 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 09:23:02.585 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:30:10.243 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:30:10.244 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:30:13.260 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:30:18.207 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (14329), thread 'MainThread' (140257020854720):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f9021172e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f9021c46f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f9021172e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f9020832440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f90211b1d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f90211b1e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f90211b1cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f90206c29e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f90210f72e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f90208c1900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f90211b0ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f90208323b0>
    │   └ <property object at 0x7f90211db0b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f9020831750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f90208316c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f9021ab1bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f9021c72830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f902051dc90>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f8dc81e5360>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f8de68ff9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f8de68ff880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f8de69183a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f8de69185e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>
    │    └ <property object at 0x7f8de6907650>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f8de6918670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8dc17643a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f8de6918790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f8de6907ba0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>
    │    └ <function Trainer._run_sanity_check at 0x7f8de6918940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f8de6921080>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8dc17666e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f8de68b0d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f8de691d960>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f8de68935b0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f8de691d960>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f8de6747250>
                 │    │          └ <function Loop.run at 0x7f8de6842b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f8de691ed40>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f8de691d960>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f8de6747250>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f8de689de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f8de691ed40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f8de689e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f8de691ed40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f8de69fb510>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f8de691ed40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f8e29ac1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8dc17643a0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f8dc1765450>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f8e29ab1440>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8dc17643a0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f8ecf9d05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f8ecf610280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f8ecf9d05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 501, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f8dd11430a0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 470, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f8dc81e42b0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 37
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f8dc81e42b0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f8dc81e42b0>
           │    │     └ <function Flow.flow_from_tape at 0x7f8ddba8c1f0>
           │    └ <silk.flow.Flow object at 0x7f8dcfd76e60>
           └ <silk.flow.FixedOutputFlow object at 0x7f8dc81e42b0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f8dcfd779a0>, <silk.flow._InputExtraction object at 0x7f8dcfd76d40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f8dcfd76e60>
    │       └ 31
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f90219443b0>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0., ...
           │    │          │         └ <property object at 0x7f9021944360>
           │    │          └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0., ...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f8dc81e4130>

  File "/root/silk/silk/models/silk.py", line 634, in _get_corr
    print(sparse_positions.shape, sparse_positions.dtype)
          │                       └ (tensor([[5.0000e-01, 2.6650e+02, 8.7649e-01],
          │                                 [5.0000e-01, 2.6750e+02, 8.7720e-01],
          │                                 [5.0000e-01, 2.8650e+02,...
          └ (tensor([[5.0000e-01, 2.6650e+02, 8.7649e-01],
                    [5.0000e-01, 2.6750e+02, 8.7720e-01],
                    [5.0000e-01, 2.8650e+02,...

AttributeError: 'tuple' object has no attribute 'shape'
2025-02-25 10:30:18.440 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:30:31.890 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:30:31.891 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:30:34.871 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:30:39.860 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:33:10.712 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:33:10.713 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:33:13.703 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:33:18.661 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (17838), thread 'MainThread' (140588335251904):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fdd44f72e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fdd45a4ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fdd44f72e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fdd4466a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fdd44fb1d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fdd44fb1e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fdd44fb1cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fdd444c69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fdd44ef72e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fdd446f1930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fdd44fb0ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fdd4466a3b0>
    │   └ <property object at 0x7fdd44fdb0b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fdd44669750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fdd446696c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fdd458b9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fdd45a7a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fdd44325b10>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fdae577d1e0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fdb0a70b9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fdb0a70b880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fdb0a7203a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fdb0a7205e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>
    │    └ <property object at 0x7fdb0a70fa60>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fdb0a720670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fdae556dbd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fdb0a720790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fdb0a70ffb0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>
    │    └ <function Trainer._run_sanity_check at 0x7fdb0a720940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fdb0a725490>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdae556c370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fdb0a6bcd30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fdb0a72dc90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fdb0a687970>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fdb0a72dc90>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fdb0a553520>
                 │    │          └ <function Loop.run at 0x7fdb0a64eb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdb0a72ff10>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fdb0a72dc90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fdb0a553520>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fdb0a6a9e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdb0a72ff10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fdb0a6aa290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdb0a72ff10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fdb0a7ff830>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdb0a72ff10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fdb4d8c1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fdae556dbd0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fdae556df00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fdb4d8b5260>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fdae556dbd0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fdbf37d45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fdbf3410280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fdbf37d45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 501, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fdaf4f430a0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 470, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fdae577c130>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 37
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fdae577c130>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fdae577c130>
           │    │     └ <function Flow.flow_from_tape at 0x7fdaff88c1f0>
           │    └ <silk.flow.Flow object at 0x7fdaf3b8b5e0>
           └ <silk.flow.FixedOutputFlow object at 0x7fdae577c130>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fdaf3b8ab60>, <silk.flow._InputExtraction object at 0x7fdaf3b8aa70>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fdaf3b8b5e0>
    │       └ 31
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fdd4574c3b0>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0., ...
           │    │          │         └ <property object at 0x7fdd4574c360>
           │    │          └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0., ...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7fdae577d3c0>

  File "/root/silk/silk/models/silk.py", line 643, in _get_corr
    sparse_positions_0 = coord_mapping.reverse(sparse_positions[0, :, :2]).unsqueeze(0)
                         │             │       └ (tensor([[5.0000e-01, 4.5500e+01, 8.9230e-01],
                         │             │                 [5.0000e-01, 4.6500e+01, 8.5308e-01],
                         │             │                 [5.0000e-01, 5.9500e+01,...
                         │             └ <function LinearCoordinateMapping.reverse at 0x7fdaff86c8b0>
                         └ <silk.backbones.silk.coords.LinearCoordinateMapping object at 0x7fdaf3bcce50>

TypeError: tuple indices must be integers or slices, not tuple
2025-02-25 10:33:18.890 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:33:58.937 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:33:58.938 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:34:01.881 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:34:06.705 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:37:10.317 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:37:10.317 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:37:13.292 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:37:18.150 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (21347), thread 'MainThread' (140318751642048):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f9e808dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f9e81356f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f9e808dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f9e7ff76440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f9e8091dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f9e8091de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f9e8091dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f9e7fdd29e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f9e808672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f9e7fffd960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f9e8091cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f9e7ff763b0>
    │   └ <property object at 0x7f9e80946e80>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f9e7ff75750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f9e7ff756c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f9e811bdbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f9e81382830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f9e7eb9db40>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f9c28105480>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f9c45ffb9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f9c45ffb880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f9c460143a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f9c460145e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>
    │    └ <property object at 0x7f9c46003740>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f9c46014670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f9c20e129b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f9c46014790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f9c46003c90>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>
    │    └ <function Trainer._run_sanity_check at 0x7f9c46014940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f9c4601d170>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9c20e13490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f9c45facd30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f9c46011ea0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f9c45f8f6a0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f9c46011ea0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f9c45e4ad40>
                 │    │          └ <function Loop.run at 0x7f9c45f3eb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f9c46013130>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f9c46011ea0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f9c45e4ad40>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f9c45f99e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f9c46013130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f9c45f9a290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f9c46013130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f9c460f35b0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f9c46013130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f9c891b9b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f9c20e129b0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f9c20e12200>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f9c891a9440>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f9c20e129b0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f9d2f1d85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f9d2ee14280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f9d2f1d85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 501, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f9c3089b0a0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 470, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f9c281043d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 37
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f9c281043d0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f9c281043d0>
           │    │     └ <function Flow.flow_from_tape at 0x7f9c3b0881f0>
           │    └ <silk.flow.Flow object at 0x7f9c2f486f20>
           └ <silk.flow.FixedOutputFlow object at 0x7f9c281043d0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f9c2f487a60>, <silk.flow._InputExtraction object at 0x7f9c2f486e00>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f9c2f486f20>
    │       └ 31
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f9e810504f0>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0., ...
           │    │          │         └ <property object at 0x7f9e810504a0>
           │    │          └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0., ...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f9c28104250>

  File "/root/silk/silk/models/silk.py", line 655, in _get_corr
    warped_positions_backward = sampler.transform_points(
                                │       └ <function HomographicSampler.transform_points at 0x7f9c30a72830>
                                └ <silk.cv.homography.HomographicSampler object at 0x7f9c20e080d0>

  File "/root/silk/silk/cv/homography.py", line 804, in transform_points
    transformed_points = self.sj_transform_points(intrinsics, pose_gt, depth_map, points, normalize=False, imshape=imshape)
                         │    │                   │           │        │          │                                └ torch.Size([1, 3, 370, 1226])
                         │    │                   │           │        │          └ tensor([[[  9.5000,   9.5000,   9.5000,  ..., 340.5000, 340.5000, 341.5000],
                         │    │                   │           │        │                     [149.5000, 173.5000, 185.5000,  ...,  9...
                         │    │                   │           │        └ tensor([[41.8423, 22.3567, 19.4181,  ..., 40.2007, 51.0629, 43.8065],
                         │    │                   │           │                  [22.7001, 20.7654, 20.2411,  ..., 36.4069, 37.6...
                         │    │                   │           └ tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
                         │    │                   │                     [-7.3231e-04,  1.0000e+00, -7.5595e-04, -7.4541e-03],
                         │    │                   │              ...
                         │    │                   └ tensor([[707.0912,   0.0000, 601.8873],
                         │    │                             [  0.0000, 707.0912, 183.1104],
                         │    │                             [  0.0000,   0.0000,   1.0000]], devi...
                         │    └ <function HomographicSampler.sj_transform_points at 0x7f9c30a727a0>
                         └ <silk.cv.homography.HomographicSampler object at 0x7f9c20e080d0>

  File "/root/silk/silk/cv/homography.py", line 645, in sj_transform_points
    cam_coords = HomographicSampler.pixel2cam(depth_map.unsqueeze(0), intrinsics.inverse(), points, imshape)  # [B,3,H,W] or [B,3n,H,W]
                 │                  │         │         │             │          │          │       └ torch.Size([1, 3, 370, 1226])
                 │                  │         │         │             │          │          └ tensor([[[  9.5000,   9.5000,   9.5000,  ..., 340.5000, 340.5000, 341.5000],
                 │                  │         │         │             │          │                     [149.5000, 173.5000, 185.5000,  ...,  9...
                 │                  │         │         │             │          └ <method 'inverse' of 'torch._C.TensorBase' objects>
                 │                  │         │         │             └ tensor([[707.0912,   0.0000, 601.8873],
                 │                  │         │         │                       [  0.0000, 707.0912, 183.1104],
                 │                  │         │         │                       [  0.0000,   0.0000,   1.0000]], devi...
                 │                  │         │         └ <method 'unsqueeze' of 'torch._C.TensorBase' objects>
                 │                  │         └ tensor([[41.8423, 22.3567, 19.4181,  ..., 40.2007, 51.0629, 43.8065],
                 │                  │                   [22.7001, 20.7654, 20.2411,  ..., 36.4069, 37.6...
                 │                  └ <staticmethod(<function HomographicSampler.pixel2cam at 0x7f9c30a72680>)>
                 └ <class 'silk.cv.homography.HomographicSampler'>

  File "/root/silk/silk/cv/homography.py", line 574, in pixel2cam
    cam_coords = mask * cam_coords # elementwise mult
                 │      └ tensor([[[-0.8378, -0.8378, -0.8378,  ..., -0.3697, -0.3697, -0.3683],
                 │                 [-0.0475, -0.0136,  0.0034,  ..., -0.1267, -0...
                 └ tensor([], device='cuda:1', size=(1, 3, 0), dtype=torch.float64)

RuntimeError: The size of tensor a (0) must match the size of tensor b (7001) at non-singleton dimension 2
2025-02-25 10:37:18.405 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:41:09.442 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:41:09.442 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:41:12.427 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:41:17.783 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:44:36.156 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:44:36.157 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:44:39.150 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:44:44.523 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:46:51.175 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:46:51.176 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:46:54.126 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:46:59.017 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:47:26.737 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:47:26.738 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:47:29.775 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:47:35.321 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:49:12.974 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:49:12.975 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:49:15.930 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:49:20.847 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (30214), thread 'MainThread' (139695591842240):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f0d694dae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f0d69fdef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f0d694dae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f0d68bde440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f0d69519d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f0d69519e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f0d69519cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f0d68a569e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f0d694632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f0d68c65960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f0d69518ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f0d68bde3b0>
    │   └ <property object at 0x7f0d69c121b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f0d68bdd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f0d68bdd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f0d69e45bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f0d6a006830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f0d688b5d80>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f0b105513c0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f0b2ec8f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f0b2ec8f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f0b2ecac3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f0b2ecac5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>
    │    └ <property object at 0x7f0b2ec974c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f0b2ecac670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f0b1024e2c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f0b2ecac790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f0b2ec97a10>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>
    │    └ <function Trainer._run_sanity_check at 0x7f0b2ecac940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f0b2ecb0ef0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f0b1024c580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f0b2ec40d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f0b2eca9c90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f0b2ec23420>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f0b2eca9c90>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f0b2ead72b0>
                 │    │          └ <function Loop.run at 0x7f0b2ebd2b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f0b2ecaada0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f0b2eca9c90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f0b2ead72b0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f0b2ec2de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f0b2ecaada0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f0b2ec2e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f0b2ecaada0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f0b2ed8b2e0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f0b2ecaada0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f0b71ecdb40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f0b1024e2c0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f0b1024dde0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f0b71ec0e50>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f0b1024e2c0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f0c17dd85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f0c17a18280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f0c17dd85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 501, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f0b1970f0a0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 470, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f0b10550310>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 37
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f0b10550310>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f0b10550310>
           │    │     └ <function Flow.flow_from_tape at 0x7f0b23e9c0d0>
           │    └ <silk.flow.Flow object at 0x7f0b180e2e90>
           └ <silk.flow.FixedOutputFlow object at 0x7f0b10550310>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ <unprintable list object>
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f0b180e39d0>, <silk.flow._InputExtraction object at 0x7f0b180e2d70>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f0b180e2e90>
    │       └ 31
    └ <unprintable list object>

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f0d69ccc5e0>
           │    │          │         │       └ <unprintable BoundArguments object>
           │    │          │         └ <property object at 0x7f0d69ccc590>
           │    │          └ <unprintable BoundArguments object>
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f0b10550190>

  File "/root/silk/silk/models/silk.py", line 736, in _get_corr
    print(torch.count_nonzero(corr_forward>0), torch.count_nonzero(corr_backward>0))
          │     │             │                │     │             └ <unprintable Tensor object>
          │     │             │                │     └ <built-in method count_nonzero of type object at 0x7f0d66859840>
          │     │             │                └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
          │     │             └ <unprintable Tensor object>
          │     └ <built-in method count_nonzero of type object at 0x7f0d66859840>
          └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

RuntimeError: CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-02-25 10:49:20.967 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:49:58.380 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:49:58.380 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:50:01.336 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:50:06.341 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (31937), thread 'MainThread' (139963077743040):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f4bb0b6ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f4bb1646f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f4bb0b6ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f4bb0266440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f4bb0ba9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f4bb0ba9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f4bb0ba9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f4bb00c29e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f4bb0af32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f4bb02ed960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f4bb0ba8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f4bb02663b0>
    │   └ <property object at 0x7f4bb0bd6e30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f4bb0265750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f4bb02656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f4bb14adbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f4bb1672830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f4baff1db70>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f49580891e0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f49762ff9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f49762ff880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f49763183a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f49763185e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>
    │    └ <property object at 0x7f49763076f0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f4976318670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f4951091bd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f4976318790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f4976307c40>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>
    │    └ <function Trainer._run_sanity_check at 0x7f4976318940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f4976321120>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4951090370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f49762b0d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f497631dc90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f4976293650>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f497631dc90>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f4976147520>
                 │    │          └ <function Loop.run at 0x7f4976242b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f497631ff10>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f497631dc90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f4976147520>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f497629de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f497631ff10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f497629e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f497631ff10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f49763fb3d0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f497631ff10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f49b94c1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f4951091bd0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f4951091f00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f49b94ad7b0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f4951091bd0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f4a5f3d45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f4a5f010280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f4a5f3d45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 501, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f4960b432e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 470, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f4958088130>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 37
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f4958088130>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f4958088130>
           │    │     └ <function Flow.flow_from_tape at 0x7f496b488310>
           │    └ <silk.flow.Flow object at 0x7f495f7775b0>
           └ <silk.flow.FixedOutputFlow object at 0x7f4958088130>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ <unprintable list object>
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f495f776b30>, <silk.flow._InputExtraction object at 0x7f495f776a40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f495f7775b0>
    │       └ 31
    └ <unprintable list object>

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f4bb13404f0>
           │    │          │         │       └ <unprintable BoundArguments object>
           │    │          │         └ <property object at 0x7f4bb13404a0>
           │    │          └ <unprintable BoundArguments object>
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f49580893c0>

  File "/root/silk/silk/models/silk.py", line 736, in _get_corr
    print(torch.count_nonzero(corr_forward>0), torch.count_nonzero(corr_backward>0))
          │     │             │                │     │             └ <unprintable Tensor object>
          │     │             │                │     └ <built-in method count_nonzero of type object at 0x7f4bade59840>
          │     │             │                └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
          │     │             └ <unprintable Tensor object>
          │     └ <built-in method count_nonzero of type object at 0x7f4bade59840>
          └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

RuntimeError: CUDA error: device-side assert triggered
CUDA kernel errors might be asynchronously reported at some other API call, so the stacktrace below might be incorrect.
For debugging consider passing CUDA_LAUNCH_BLOCKING=1.
Compile with `TORCH_USE_CUDA_DSA` to enable device-side assertions.

2025-02-25 10:50:06.456 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-25 10:55:20.691 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-25 10:55:20.692 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-25 10:55:23.650 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-25 10:55:28.738 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 05:20:00.221 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 05:20:00.222 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 05:20:03.384 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 05:20:08.303 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 05:39:17.115 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 05:39:17.116 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 05:39:20.060 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 05:39:25.079 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 05:40:57.606 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 05:40:57.606 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 05:41:00.565 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 05:41:05.573 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 05:43:52.674 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 05:43:52.674 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 05:43:55.625 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 05:44:00.760 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (40805), thread 'MainThread' (140294986822080):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f98f80cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f98f8b6ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f98f80cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f98f7766440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f98f810dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f98f810de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f98f810dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f98f781e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f98f80572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f98f77ed990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f98f810cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f98f77663b0>
    │   └ <property object at 0x7f98f80f3b50>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f98f7765750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f98f77656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f98f89d9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f98f8b9a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f98f638dbd0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f96a01211e0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f96bd81f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f96bd81f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f96bd8343a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f96bd8345e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>
    │    └ <property object at 0x7f96bd8275b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f96bd834670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f968c679ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f96bd834790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f96bd827b00>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>
    │    └ <function Trainer._run_sanity_check at 0x7f96bd834940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f96bd840fe0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f968c6789d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f96bd7d0d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f96bd83dcc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f96bd7b3560>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f96bd83dcc0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f96bd66b550>
                 │    │          └ <function Loop.run at 0x7f96bd762b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f96bd83fe80>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f96bd83dcc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f96bd66b550>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f96bd7bde10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f96bd83fe80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f96bd7be290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f96bd83fe80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f96bd91f330>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f96bd83fe80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f97009b5b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f968c679ab0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f968c6792a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f97009a5490>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f968c679ab0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f97a69c45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f97a6604280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f97a69c45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 501, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f96a82e31c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 470, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f96a0120130>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 37
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f96a0120130>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f96a0120130>
           │    │     └ <function Flow.flow_from_tape at 0x7f96b29901f0>
           │    └ <silk.flow.Flow object at 0x7f96a6cb37f0>
           └ <silk.flow.FixedOutputFlow object at 0x7f96a0120130>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, (tensor([[5.0000...
    │       │        │    │            └ 37
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f96a6cb3610>, <silk.flow._InputExtraction object at 0x7f96a6cb2b60>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f96a6cb37f0>
    │       └ 37
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, (tensor([[5.0000...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f98f8868450>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 2.3550e+02, 8.1860e-01],
           │    │          │         │                 [5.0000e-01, 2.3750e+02, 8.2996e-01]...
           │    │          │         └ <property object at 0x7f98f8868400>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 2.3550e+02, 8.1860e-01],
           │    │                    [5.0000e-01, 2.3750e+02, 8.2996e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f96a01203d0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 81, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f96a82e1510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0 = jax_loss.total_loss(
             │        └ <function total_loss at 0x7f96a82e1990>
             └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 317, in total_loss
    x0x1 = desc_0 @ desc_1.T
           │        │      └ <attribute 'T' of 'torch._C.TensorBase' objects>
           │        └ tensor([[[ 0.3972,  0.3266, -0.0147,  ...,  0.3642,  0.0320, -0.3367],
           │                   [ 0.0526,  0.0995, -0.0589,  ...,  0.0615, -0...
           └ tensor([[[ 0.2567, -0.2154,  0.0310,  ...,  0.2755, -0.8969, -0.1568],
                      [ 0.1419,  0.4211, -0.3689,  ...,  0.2807,  0...

RuntimeError: Expected size for first two dimensions of batch2 tensor to be: [128, 128] but got: [128, 7001].
2025-02-26 05:44:00.903 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 06:00:07.205 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 06:00:07.206 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 06:00:10.213 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 06:00:15.171 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 06:00:54.014 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 06:00:54.015 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 06:00:56.908 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 06:01:01.871 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 06:01:10.401 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 06:01:10.402 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 06:01:13.382 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 06:01:18.490 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 06:16:03.036 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 06:16:03.036 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 06:16:05.913 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 06:16:11.043 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:02:19.625 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:02:19.625 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:02:22.565 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:02:27.430 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:09:56.657 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:09:56.658 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:09:59.604 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:10:04.423 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (51405), thread 'MainThread' (140030477058496):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f5b6206ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f5b62b46f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f5b6206ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f5b6172e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f5b620add80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f5b620ade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f5b620adcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f5b615be9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f5b61ff32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f5b617b5960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f5b620acee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f5b6172e3b0>
    │   └ <property object at 0x7f5b620d7100>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f5b6172d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f5b6172d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f5b629b1bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f5b62b72830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f5b60395d80>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f59088f5420>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f59277f79a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f59277f7880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f59278103a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f59278105e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>
    │    └ <property object at 0x7f59277fb830>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f5927810670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f59086fe0e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f5927810790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f59277fbd80>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>
    │    └ <function Trainer._run_sanity_check at 0x7f5927810940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f5927815260>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f59086fc5e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f59277a8d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f592780d990>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f5927777790>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f592780d990>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f5927643280>
                 │    │          └ <function Loop.run at 0x7f592773ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f592780ed70>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f592780d990>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f5927643280>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f5927791e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f592780ed70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f5927792290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f592780ed70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f59278f3560>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f592780ed70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f596a9b5b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f59086fe0e0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f59086fe680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f596a9a9710>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f59086fe0e0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f5a109cc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f5a1060c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f5a109cc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 502, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f591228b2e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f59088f4370>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 37
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f59088f4370>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f59088f4370>
           │    │     └ <function Flow.flow_from_tape at 0x7f591c888280>
           │    └ <silk.flow.Flow object at 0x7f5910c86ec0>
           └ <silk.flow.FixedOutputFlow object at 0x7f59088f4370>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f5910c87a00>, <silk.flow._InputExtraction object at 0x7f5910c86da0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f5910c86ec0>
    │       └ 31
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f5b628443b0>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0., ...
           │    │          │         └ <property object at 0x7f5b62844360>
           │    │          └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0., ...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f59088f41f0>

  File "/root/silk/silk/models/silk.py", line 650, in _get_corr
    sparse_corr_0 = positions_to_unidirectional_correspondence(
                    └ <function positions_to_unidirectional_correspondence at 0x7f59122895a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 48, in positions_to_unidirectional_correspondence
    mask = mask.all(axis=2)
           │    └ <method 'all' of 'torch._C.TensorBase' objects>
           └ tensor([[True, True],
                     [True, True],
                     [True, True],
                     ...,
                     [True, True],
                     [True, True],
               ...

IndexError: Dimension out of range (expected to be in range of [-2, 1], but got 2)
2025-02-26 08:10:04.663 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:10:54.911 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:10:54.911 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:10:57.853 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:11:02.896 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:11:54.778 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:11:54.779 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:11:57.652 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:12:02.627 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:12:51.994 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:12:51.995 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:12:54.969 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:12:59.902 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:14:09.514 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:14:09.515 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:14:12.524 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:14:17.509 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:31:36.025 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:31:36.026 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:31:39.012 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:31:43.982 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:33:49.675 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:33:49.676 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:33:52.691 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:33:57.468 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:34:07.523 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:34:07.524 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:34:10.441 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:34:15.411 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:34:24.486 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:34:24.486 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:34:27.455 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:34:32.400 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:35:14.204 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:35:14.204 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:35:17.104 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:35:22.014 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:36:24.587 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:36:24.588 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:36:27.531 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:36:32.574 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:36:49.939 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:36:49.939 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:36:52.890 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:36:57.555 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:37:10.627 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:37:10.627 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:37:13.571 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:37:18.624 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:37:43.270 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:37:43.271 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:37:46.253 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:37:51.282 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:38:26.019 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:38:26.020 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:38:28.941 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:38:33.874 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:38:55.336 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:38:55.337 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:38:58.291 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:39:03.297 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:39:07.460 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:39:07.461 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:39:10.438 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:39:15.403 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:41:58.128 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:41:58.129 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:42:01.042 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:42:08.566 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:43:17.394 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:43:17.394 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:43:20.406 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:44:17.618 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (84824), thread 'MainThread' (139685782036928):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f0b209d6e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f0b21482f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f0b209d6e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f0b2006e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f0b20a15d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f0b20a15e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f0b20a15cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f0b1fef29e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f0b2095f2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f0b200f9930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f0b20a14ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f0b2006e3b0>
    │   └ <property object at 0x7f0b209fbb50>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f0b2006d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f0b2006d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f0b212e9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f0b214aa830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f0b1fd51c60>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f08c822d0c0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f08e612f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f08c0f737c0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f08e612f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f08c0f737c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f08c0f737c0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f08e61483a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f08c0f737c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f08e61485e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f08c0f737c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f08c0f737c0>
    │    └ <property object at 0x7f08e61339c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f08c0f737c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f08e6148670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f08c0f737c0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f08c0f71c90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f08e6148790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f08c0f737c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f08e614d490>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f08c0f737c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f08e60e2cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f08c0f71d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f08c0f211e0>
    │    │          └ <function Loop.run at 0x7f08e6072b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f08c0f72ec0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f08c0f71d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f08c0f211e0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f08e60cfac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f08c0f72ec0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 151
                   │    │          │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
                   │    │          │               [255, 255, 255,  ...,   9,   9,   9],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f08e6072b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f08c0f73dc0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f08c0f72ec0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
    │    │                    [255, 255, 255,  ...,   9,   9,   9],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f08e60cc820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f08c0f73dc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 151
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
              │    │              │               [255, 255, 255,  ...,   9,   9,   9],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f08e6072b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f08c0f70910>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f08c0f73dc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
    │    │                    [255, 255, 255,  ...,   9,   9,   9],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f08e60cc0d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f08c0f70910>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f08e60cc1f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f08c0f70910>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f08c0bba1a0>
    │    │               │          │        └ 151
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f08e60cc5e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f08c0f70910>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f08e6156290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f08c0bba1a0>
    │         └ <function LightningOptimizer.step at 0x7f092920e710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f08c0bba1a0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f08d0124ae0 to Trainer at 0x7f08c0f737c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f08c0bba1a0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f09292f8700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f08c0f72920>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f08c0f70eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f08c8254e50>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f09cef47d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f09cef47d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f08c0bba1a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f08e60bbb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f08c0bba1a0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f08c0bba1a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f08c0bba1a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
                           │    │                                             [255, 255, 255,  .....
                           │    └ <property object at 0x7f08e62237e0>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f08c0f70910>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
           │    │                    │                          [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f09292adab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f08c0f71c90>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f08c0f70eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
           │    │                  [255, 255, 255,  ...,   9,   9,   9],
           │    │           ...
           │    └ <property object at 0x7f09292a12b0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f08c0f71c90>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
           │    │                       [255, 255, 255,  ...,   9,   9,   9],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f09cf2cc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
           │                         [255, 255, 255,  ...,   9,   9,   9],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
         │    │                             [255, 255, 255,  ...,   9,   9,   9],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f09cef0c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
           │                        [255, 255, 255,  ...,   9,   9,   9],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
           │    │                       [255, 255, 255,  ...,   9,   9,   9],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f09cf2cc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
           │                         [255, 255, 255,  ...,   9,   9,   9],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
             │                                      [255, 255, 255,  ...,   9,   9,   9],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 495, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f08d0b3b370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f08cf5aed70>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,   9,   9, ...
           │    │     │              │    │      │    └ 35
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f08cf5aed70>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f08cf5aed70>
           │    │     └ <function Flow.flow_from_tape at 0x7f08db288280>
           │    └ <silk.flow.Flow object at 0x7f08cf5af820>
           └ <silk.flow.FixedOutputFlow object at 0x7f08cf5aed70>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,   9],
    │       │        │    │            │      │                    [255, 255, 255,  ...,   9,   9, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 376, 1241]), tensor([[ 1.0000e+00, -7.3635e-04,  3.8032e-04, -6.7688e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f08cf5af640>, <silk.flow._InputExtraction object at 0x7f08cf5adc90>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f08cf5af820>
    │       └ 31
    └ [None, None, None, None, None, torch.Size([1, 3, 376, 1241]), tensor([[ 1.0000e+00, -7.3635e-04,  3.8032e-04, -6.7688e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f0b211705e0>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0., ...
           │    │          │         └ <property object at 0x7f0b21170590>
           │    │          └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0., ...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f08c822d420>

  File "/root/silk/silk/models/silk.py", line 766, in _get_corr
    corr_backward = sparse_positions_to_corr(
                    └ <function sparse_positions_to_corr at 0x7f08d0b395a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 76, in sparse_positions_to_corr
    is_bidir = sparse_positions_0[0] == wapred_positions_1[0]
               │                        └ tensor([[  5725,   6950,   5724,  ..., 355111, 356338, 374405]],
               │                                 device='cuda:1', dtype=torch.int32)
               └ tensor([[   378,    844,    866,  ..., 437715, 437762, 437777]],
                        device='cuda:1', dtype=torch.int32)

RuntimeError: The size of tensor a (7001) must match the size of tensor b (7000) at non-singleton dimension 0
2025-02-26 08:44:17.878 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:44:41.782 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:44:41.782 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:44:44.775 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:45:07.268 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (88198), thread 'MainThread' (140255452295616):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f8fc39cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f8fc445ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f8fc39cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f8fc3066440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f8fc3a0dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f8fc3a0de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f8fc3a0dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f8fc311e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f8fc39572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f8fc30ed900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f8fc3a0cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f8fc30663b0>
    │   └ <property object at 0x7f8fc39f3c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f8fc3065750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f8fc30656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f8fc42c9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f8fc448a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f8d88f80190>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f8d6a204430>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f8d8911b9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8d88f679d0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f8d8911b880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8d88f679d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8d88f679d0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f8d891303a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8d88f679d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f8d891305e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8d88f679d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8d88f679d0>
    │    └ <property object at 0x7f8d89123560>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8d88f679d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f8d89130670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8d88f679d0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8d88f67ca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f8d89130790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8d88f679d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f8d89139030>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8d88f679d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f8d890cecb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f8d88f66530>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f8d61edd570>
    │    │          └ <function Loop.run at 0x7f8d8905eb00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f8d88f665f0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f8d88f66530>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f8d61edd570>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f8d890bbac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f8d88f665f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 39
                   │    │          │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
                   │    │          │               [255, 255, 255,  ...,   8,   8,   9],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f8d8905eb00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f8d88f65930>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f8d88f665f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
    │    │                    [255, 255, 255,  ...,   8,   8,   9],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f8d890b8820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f8d88f65930>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 39
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
              │    │              │               [255, 255, 255,  ...,   8,   8,   9],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f8d8905eb00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f8d88f659f0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f8d88f65930>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
    │    │                    [255, 255, 255,  ...,   8,   8,   9],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f8d890b80d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f8d88f659f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f8d890b81f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f8d88f659f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8d61b73a60>
    │    │               │          │        └ 39
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f8d890b85e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f8d88f659f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f8d89142290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8d61b73a60>
    │         └ <function LightningOptimizer.step at 0x7f8dcc21e710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8d61b73a60>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f8dcc15d120 to Trainer at 0x7f8d88f679d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8d61b73a60>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f8e714cc700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f8d88f658d0>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f8d88f66ec0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f8d6a22ce50>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f8e71e43d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f8e71e43d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8d61b73a60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f8d890a7b50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8d61b73a60>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8d61b73a60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8d61b73a60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
                           │    │                                             [255, 255, 255,  .....
                           │    └ <property object at 0x7f8d8921b3d0>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f8d88f659f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
           │    │                    │                          [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f8dcc2bdab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8d88f67ca0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f8d88f66ec0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
           │    │                  [255, 255, 255,  ...,   8,   8,   9],
           │    │           ...
           │    └ <property object at 0x7f8dcc2ad4e0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8d88f67ca0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
           │    │                       [255, 255, 255,  ...,   8,   8,   9],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f8e721c85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
           │                         [255, 255, 255,  ...,   8,   8,   9],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
         │    │                             [255, 255, 255,  ...,   8,   8,   9],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f8e71e08280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
           │                        [255, 255, 255,  ...,   8,   8,   9],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
           │    │                       [255, 255, 255,  ...,   8,   8,   9],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f8e721c85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
           │                         [255, 255, 255,  ...,   8,   8,   9],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
             │                                      [255, 255, 255,  ...,   8,   8,   9],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 495, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f8d7394b400>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f8d72593910>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,   8,   8, ...
           │    │     │              │    │      │    └ 35
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f8d72593910>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f8d72593910>
           │    │     └ <function Flow.flow_from_tape at 0x7f8d7e290310>
           │    └ <silk.flow.Flow object at 0x7f8d725933a0>
           └ <silk.flow.FixedOutputFlow object at 0x7f8d72593910>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   8,   8,   8],
    │       │        │    │            │      │                    [255, 255, 255,  ...,   8,   8, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 376, 1241]), tensor([[ 1.0000e+00,  1.4062e-04,  2.6818e-04,  1.9812e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f8d725934c0>, <silk.flow._InputExtraction object at 0x7f8d72592980>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f8d725933a0>
    │       └ 31
    └ [None, None, None, None, None, torch.Size([1, 3, 376, 1241]), tensor([[ 1.0000e+00,  1.4062e-04,  2.6818e-04,  1.9812e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f8fc4158450>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
           │    │          │         │                  [0.0000, 0.0000, 0.0000,  ...,...
           │    │          │         └ <property object at 0x7f8fc4158400>
           │    │          └ <BoundArguments (nms=tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
           │    │                     [0.0000, 0.0000, 0.0000,  ...,...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f8d6a2046d0>

  File "/root/silk/silk/models/silk.py", line 766, in _get_corr
    corr_backward = sparse_positions_to_corr(
                    └ <function sparse_positions_to_corr at 0x7f8d73949630>

  File "/root/silk/silk/losses/info_nce/loss.py", line 76, in sparse_positions_to_corr
    is_bidir = sparse_positions_0[0] == wapred_positions_1[0]
               │                        └ tensor([[   803,    809,    810,  ..., 397914, 400358, 401580]],
               │                                 device='cuda:1', dtype=torch.int32)
               └ tensor([[   832,    846,    847,  ..., 437654, 437700, 437782]],
                        device='cuda:1', dtype=torch.int32)

RuntimeError: The size of tensor a (10001) must match the size of tensor b (5176) at non-singleton dimension 0
2025-02-26 08:45:07.533 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:48:05.015 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:48:05.016 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:48:08.493 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:48:13.509 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:49:17.279 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:49:17.279 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:49:20.316 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:49:27.418 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:49:55.532 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:49:55.533 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:49:58.501 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:50:22.733 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:52:18.456 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:52:18.456 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:52:21.436 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:53:39.796 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:57:28.787 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:57:28.787 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:57:31.803 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:57:32.851 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (103415), thread 'MainThread' (139906450571712):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'in_channels': 1, 'detection_threshold': 1.0, 'detection_top_k': 10000, 'nms_dist': 0, 'padding': 0, 'border_dist': 0, 'desc...
           │         └ ()
           └ <class 'silk.backbones.silk.silk.SiLKVGG'>

  File "/root/silk/silk/backbones/silk/silk.py", line 248, in __init__
    MagicPoint.add_detector_head_post_processing(
    │          └ <staticmethod(<function MagicPoint.add_detector_head_post_processing at 0x7f3c3c0ad2d0>)>
    └ <class 'silk.backbones.superpoint.magicpoint.MagicPoint'>

  File "/root/silk/silk/backbones/superpoint/magicpoint.py", line 222, in add_detector_head_post_processing
    flow.define_transition(
    │    └ <function Flow.define_transition at 0x7f3c3c0ac0d0>
    └ <silk.flow.Flow object at 0x7f3c303b35e0>

  File "/root/silk/silk/flow.py", line 161, in define_transition
    kwargs = {param: self.index_of(name) for param, name in kwargs.items()}
                     │    │                                 │      └ <method 'items' of 'dict' objects>
                     │    │                                 └ {'prob_map': 'nms', 'top_k': 10000}
                     │    └ <function Flow.index_of at 0x7f3c3c07bf40>
                     └ <silk.flow.Flow object at 0x7f3c303b35e0>

  File "/root/silk/silk/flow.py", line 161, in <dictcomp>
    kwargs = {param: self.index_of(name) for param, name in kwargs.items()}
              │      │    │        │         │      └ 10000
              │      │    │        │         └ 'top_k'
              │      │    │        └ 10000
              │      │    └ <function Flow.index_of at 0x7f3c3c07bf40>
              │      └ <silk.flow.Flow object at 0x7f3c303b35e0>
              └ 'top_k'

  File "/root/silk/silk/flow.py", line 141, in index_of
    raise RuntimeError(f"cannot handle name of type {type(name)}")

RuntimeError: cannot handle name of type <class 'int'>


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f3e817dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f3e82266f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f3e817dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f3e80e76440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f3e81819d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f3e81819e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f3e81819cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f3e80ce69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f3e817672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f3e80efd960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f3e81818ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f3e80e763b0>
    │   └ <property object at 0x7f3e81807ce0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f3e80e75750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f3e80e756c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f3e820d1bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f3e82292830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f3e80e75d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f3e80e75e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f3e8181a560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f3e8181a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 342, in instantiate_node
    value = instantiate_node(
            └ <function instantiate_node at 0x7f3e8181a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model.model'
           │            │         │        │     └ {'in_channels': 1, 'detection_threshold': 1.0, 'detection_top_k': 10000, 'nms_dist': 0, 'padding': 0, 'border_dist': 0, 'desc...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.backbones.silk.silk.SiLKVGG'>
           └ <function _call_target at 0x7f3e8181a320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ 'Error in call to target \'silk.backbones.silk.silk.SiLKVGG\':\nRuntimeError("cannot handle name of type <class \'int\'>")\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.backbones.silk.silk.SiLKVGG':
RuntimeError("cannot handle name of type <class 'int'>")
full_key: mode.model.model
2025-02-26 08:57:32.860 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:58:38.542 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:58:38.543 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:58:41.510 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:58:42.535 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (103546), thread 'MainThread' (139649630253504):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'in_channels': 1, 'detection_threshold': 1.0, 'detection_top_k': 10000, 'nms_dist': 0, 'padding': 0, 'border_dist': 0, 'desc...
           │         └ ()
           └ <class 'silk.backbones.silk.silk.SiLKVGG'>

  File "/root/silk/silk/backbones/silk/silk.py", line 248, in __init__
    MagicPoint.add_detector_head_post_processing(
    │          └ <staticmethod(<function MagicPoint.add_detector_head_post_processing at 0x7f00705992d0>)>
    └ <class 'silk.backbones.superpoint.magicpoint.MagicPoint'>

  File "/root/silk/silk/backbones/superpoint/magicpoint.py", line 222, in add_detector_head_post_processing
    flow.define_transition(
    │    └ <function Flow.define_transition at 0x7f00705980d0>
    └ <silk.flow.Flow object at 0x7f00648b3700>

  File "/root/silk/silk/flow.py", line 161, in define_transition
    kwargs = {param: self.index_of(name) for param, name in kwargs.items()}
                     │    │                                 │      └ <method 'items' of 'dict' objects>
                     │    │                                 └ {'prob_map': 'nms', 'top_k': 10000}
                     │    └ <function Flow.index_of at 0x7f007056bf40>
                     └ <silk.flow.Flow object at 0x7f00648b3700>

  File "/root/silk/silk/flow.py", line 161, in <dictcomp>
    kwargs = {param: self.index_of(name) for param, name in kwargs.items()}
              │      │    │        │         │      └ 10000
              │      │    │        │         └ 'top_k'
              │      │    │        └ 10000
              │      │    └ <function Flow.index_of at 0x7f007056bf40>
              │      └ <silk.flow.Flow object at 0x7f00648b3700>
              └ 'top_k'

  File "/root/silk/silk/flow.py", line 141, in index_of
    raise RuntimeError(f"cannot handle name of type {type(name)}")

RuntimeError: cannot handle name of type <class 'int'>


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f02b5ccee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f02b6772f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f02b5ccee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f02b5366440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f02b5d0dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f02b5d0de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f02b5d0dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f02b541e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f02b5c572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f02b53f1900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f02b5d0cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f02b53663b0>
    │   └ <property object at 0x7f02b5cf3dd0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f02b5365750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f02b53656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f02b65ddbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f02b679e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f02b5365d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f02b5365e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f02b5d0e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f02b5d0e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 342, in instantiate_node
    value = instantiate_node(
            └ <function instantiate_node at 0x7f02b5d0e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model.model'
           │            │         │        │     └ {'in_channels': 1, 'detection_threshold': 1.0, 'detection_top_k': 10000, 'nms_dist': 0, 'padding': 0, 'border_dist': 0, 'desc...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.backbones.silk.silk.SiLKVGG'>
           └ <function _call_target at 0x7f02b5d0e320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ 'Error in call to target \'silk.backbones.silk.silk.SiLKVGG\':\nRuntimeError("cannot handle name of type <class \'int\'>")\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.backbones.silk.silk.SiLKVGG':
RuntimeError("cannot handle name of type <class 'int'>")
full_key: mode.model.model
2025-02-26 08:58:42.544 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 08:59:50.837 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 08:59:50.838 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 08:59:53.790 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 08:59:54.857 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (103677), thread 'MainThread' (139814388511168):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'in_channels': 1, 'detection_threshold': 1.0, 'detection_top_k': 10000, 'nms_dist': 0, 'padding': 0, 'border_dist': 0, 'desc...
           │         └ ()
           └ <class 'silk.backbones.silk.silk.SiLKVGG'>

  File "/root/silk/silk/backbones/silk/silk.py", line 248, in __init__
    MagicPoint.add_detector_head_post_processing(
    │          └ <staticmethod(<function MagicPoint.add_detector_head_post_processing at 0x7f26cca893f0>)>
    └ <class 'silk.backbones.superpoint.magicpoint.MagicPoint'>

  File "/root/silk/silk/backbones/superpoint/magicpoint.py", line 222, in add_detector_head_post_processing
    flow.define_transition(
    │    └ <function Flow.define_transition at 0x7f26cca881f0>
    └ <silk.flow.Flow object at 0x7f26c0e73610>

  File "/root/silk/silk/flow.py", line 161, in define_transition
    kwargs = {param: self.index_of(name) for param, name in kwargs.items()}
                     │    │                                 │      └ <method 'items' of 'dict' objects>
                     │    │                                 └ {'prob_map': 'nms', 'top_k': 10000}
                     │    └ <function Flow.index_of at 0x7f26cca880d0>
                     └ <silk.flow.Flow object at 0x7f26c0e73610>

  File "/root/silk/silk/flow.py", line 161, in <dictcomp>
    kwargs = {param: self.index_of(name) for param, name in kwargs.items()}
              │      │    │        │         │      └ 10000
              │      │    │        │         └ 'top_k'
              │      │    │        └ 10000
              │      │    └ <function Flow.index_of at 0x7f26cca880d0>
              │      └ <silk.flow.Flow object at 0x7f26c0e73610>
              └ 'top_k'

  File "/root/silk/silk/flow.py", line 141, in index_of
    raise RuntimeError(f"cannot handle name of type {type(name)}")

RuntimeError: cannot handle name of type <class 'int'>


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f291225ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f2912d2af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f291225ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f291191e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f291229dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f291229de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f291229dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f29119d69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f29121e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f29119a5960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f291229cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f291191e3b0>
    │   └ <property object at 0x7f2912283c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f291191d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f291191d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f2912b95bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f2912d56830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f291191dd80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f291191de10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f291229e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f291229e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 342, in instantiate_node
    value = instantiate_node(
            └ <function instantiate_node at 0x7f291229e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model.model'
           │            │         │        │     └ {'in_channels': 1, 'detection_threshold': 1.0, 'detection_top_k': 10000, 'nms_dist': 0, 'padding': 0, 'border_dist': 0, 'desc...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.backbones.silk.silk.SiLKVGG'>
           └ <function _call_target at 0x7f291229e320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ 'Error in call to target \'silk.backbones.silk.silk.SiLKVGG\':\nRuntimeError("cannot handle name of type <class \'int\'>")\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.backbones.silk.silk.SiLKVGG':
RuntimeError("cannot handle name of type <class 'int'>")
full_key: mode.model.model
2025-02-26 08:59:54.866 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:00:30.939 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:00:30.940 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:00:33.905 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:00:34.956 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (103808), thread 'MainThread' (139715709145536):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'in_channels': 1, 'detection_threshold': 1.0, 'detection_top_k': 10000, 'nms_dist': 0, 'padding': 0, 'border_dist': 0, 'desc...
           │         └ ()
           └ <class 'silk.backbones.silk.silk.SiLKVGG'>

  File "/root/silk/silk/backbones/silk/silk.py", line 248, in __init__
    MagicPoint.add_detector_head_post_processing(
    │          └ <staticmethod(<function MagicPoint.add_detector_head_post_processing at 0x7f0fd2e9d2d0>)>
    └ <class 'silk.backbones.superpoint.magicpoint.MagicPoint'>

  File "/root/silk/silk/backbones/superpoint/magicpoint.py", line 222, in add_detector_head_post_processing
    flow.define_transition(
    │    └ <function Flow.define_transition at 0x7f0fd2e9c0d0>
    └ <silk.flow.Flow object at 0x7f0fc727f610>

  File "/root/silk/silk/flow.py", line 161, in define_transition
    kwargs = {param: self.index_of(name) for param, name in kwargs.items()}
                     │    │                                 │      └ <method 'items' of 'dict' objects>
                     │    │                                 └ {'prob_map': 'nms', 'top_k': 10000}
                     │    └ <function Flow.index_of at 0x7f0fd2e6ff40>
                     └ <silk.flow.Flow object at 0x7f0fc727f610>

  File "/root/silk/silk/flow.py", line 161, in <dictcomp>
    kwargs = {param: self.index_of(name) for param, name in kwargs.items()}
              │      │    │        │         │      └ 10000
              │      │    │        │         └ 'top_k'
              │      │    │        └ 10000
              │      │    └ <function Flow.index_of at 0x7f0fd2e6ff40>
              │      └ <silk.flow.Flow object at 0x7f0fc727f610>
              └ 'top_k'

  File "/root/silk/silk/flow.py", line 141, in index_of
    raise RuntimeError(f"cannot handle name of type {type(name)}")

RuntimeError: cannot handle name of type <class 'int'>


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f121866ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f1219132f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f121866ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f1217d2a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f12186a5d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f12186a5e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f12186a5cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f1217ba29e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f12185ef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f1217db1930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f12186a4ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f1217d2a3b0>
    │   └ <property object at 0x7f12186d2ed0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f1217d29750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f1217d296c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f1218f99bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f121915e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f1217d29d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f1217d29e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f12186a6560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f12186a6680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 342, in instantiate_node
    value = instantiate_node(
            └ <function instantiate_node at 0x7f12186a6680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model.model'
           │            │         │        │     └ {'in_channels': 1, 'detection_threshold': 1.0, 'detection_top_k': 10000, 'nms_dist': 0, 'padding': 0, 'border_dist': 0, 'desc...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.backbones.silk.silk.SiLKVGG'>
           └ <function _call_target at 0x7f12186a6320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ 'Error in call to target \'silk.backbones.silk.silk.SiLKVGG\':\nRuntimeError("cannot handle name of type <class \'int\'>")\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.backbones.silk.silk.SiLKVGG':
RuntimeError("cannot handle name of type <class 'int'>")
full_key: mode.model.model
2025-02-26 09:00:34.965 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:00:54.061 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:00:54.061 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:00:57.042 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:01:01.985 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (103939), thread 'MainThread' (140121764905408):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f70a3372e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f70a3e26f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f70a3372e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f70a2a32440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f70a33b1d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f70a33b1e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f70a33b1cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f70a28a29e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f70a32f72e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f70a2abd930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f70a33b0ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f70a2a323b0>
    │   └ <property object at 0x7f70a33db0b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f70a2a31750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f70a2a316c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f70a3c91bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f70a3e52830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f6e6895c2b0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f6e49bd10c0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f6e68aff9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f6e68aff880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f6e68b143a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f6e68b145e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>
    │    └ <property object at 0x7f6e68b03790>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f6e68b14670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f6e4994d660>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f6e68b14790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f6e68b03ce0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>
    │    └ <function Trainer._run_sanity_check at 0x7f6e68b14940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f6e68b1d1c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6e4994e590>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f6e68ab0d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f6e68b21b40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f6e6b06c130>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f6e68b21b40>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f6e689432e0>
                 │    │          └ <function Loop.run at 0x7f6e68a42b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f6e68b21960>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f6e68b21b40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f6e689432e0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f6e68a9de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f6e68b21960>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f6e68a9e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f6e68b21960>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f6e68bfb600>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f6e68b21960>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f6eabcc1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f6e4994d660>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f6e4994c2b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f6eabcb5260>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f6e4994d660>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f6f51bd05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f6f51810280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f6f51bd05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 502, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f6e53347400>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f6e51f63820>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 35
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f6e51f63820>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f6e51f63820>
           │    │     └ <function Flow.flow_from_tape at 0x7f6e5dc90310>
           │    └ <silk.flow.Flow object at 0x7f6e51f635b0>
           └ <silk.flow.FixedOutputFlow object at 0x7f6e51f63820>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 15
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f6e51f62b30>, <silk.flow._InputExtraction object at 0x7f6e51f62a40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f6e51f635b0>
    │       └ 15
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f70a3b243b0>
           │    │          │         │       └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    │          │         └ <property object at 0x7f70a3b24360>
           │    │          └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    └ <bound method AutoForward.forward_flow of SiLKVGG(
           │        (backbone): ParametricVGG(
           │          (mp): Identity()
           │          (layers): ModuleList...
           └ <silk.flow._FunctionCall object at 0x7f6e49b6e9b0>

  File "/root/silk/silk/flow.py", line 332, in forward_flow
    return self._flow(outputs, *args, **kwargs)
           │    │     │         │       └ {'images': tensor([[[[0.6941, 0.7098, 0.6980,  ..., 0.0863, 0.1098, 0.1137],
           │    │     │         │                   [0.7176, 0.7216, 0.6980,  ..., 0.0980,...
           │    │     │         └ ()
           │    │     └ ('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms')
           │    └ <silk.flow.Flow object at 0x7f6e51f62c50>
           └ SiLKVGG(
               (backbone): ParametricVGG(
                 (mp): Identity()
                 (layers): ModuleList(
                   (0): Sequential(
                     (0): Sequ...

  File "/root/silk/silk/flow.py", line 244, in flow
    return self.flow_from_tape(tape, output_indexes, inputs)
           │    │              │     │               └ {'images': tensor([[[[0.6941, 0.7098, 0.6980,  ..., 0.0863, 0.1098, 0.1137],
           │    │              │     │                           [0.7176, 0.7216, 0.6980,  ..., 0.0980,...
           │    │              │     └ (10, 2, 14, 13, 6)
           │    │              └ ((0, ()), (1, [0]), (2, ()), (3, [1]), (4, ()), (5, [4]), (6, [5]), (7, ()), (8, [7]), (10, ()), (13, [3]), (14, [8]))
           │    └ <function Flow.flow_from_tape at 0x7f6e5dc90310>
           └ <silk.flow.Flow object at 0x7f6e51f62c50>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'images': tensor([[[[0.6941, 0.7098, 0.6980,  ..., 0.0863, 0.1098, 0.1137],
    │       │        │    │            │      │                    [0.7176, 0.7216, 0.6980,  ..., 0.0980,...
    │       │        │    │            │      └ [None, None, tensor([[[[-0.2435, -0.0159, -0.1400,  ...,  0.0112,  0.1538,  0.2865],
    │       │        │    │            │                  [-0.2263, -0.1068,  0.0551,  ....
    │       │        │    │            └ 7
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f6e51f63520>, <silk.flow._FunctionCall object at 0x7f6e53523e80>, <silk.flow._Funct...
    │       │        └ <silk.flow.Flow object at 0x7f6e51f62c50>
    │       └ 7
    └ [None, None, tensor([[[[-0.2435, -0.0159, -0.1400,  ...,  0.0112,  0.1538,  0.2865],
                [-0.2263, -0.1068,  0.0551,  ....

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f70a3b243b0>
           │    │          │         │       └ <BoundArguments (prob_map=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0.,...
           │    │          │         └ <property object at 0x7f70a3b24360>
           │    │          └ <BoundArguments (prob_map=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0.,...
           │    └ <function prob_map_to_positions_with_prob at 0x7f6e5dc6e950>
           └ <silk.flow._FunctionCall object at 0x7f6e6895c190>

  File "/root/silk/silk/backbones/superpoint/utils.py", line 516, in prob_map_to_positions_with_prob
    print(positions.shape)
          └ (tensor([[5.0000e-01, 7.1050e+02],
                    [5.0000e-01, 7.1150e+02],
                    [5.0000e-01, 7.1250e+02],
                    ...,
                    [...

AttributeError: 'tuple' object has no attribute 'shape'
2025-02-26 09:01:02.154 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:03:35.739 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:03:35.740 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:03:38.754 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:03:38.795 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (105725), thread 'MainThread' (140109614158272):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 644, in _locate
    obj = getattr(obj, part)
                  │    └ 'silk'
                  └ <module 'silk.models' from '/root/silk/silk/models/__init__.py'>

AttributeError: module 'silk.models' has no attribute 'silk'


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 650, in _locate
    obj = import_module(mod)
          │             └ 'silk.models.silk'
          └ <function import_module at 0x7f6dcfa4be20>
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           │          │           │    │        │        └ 0
           │          │           │    │        └ None
           │          │           │    └ 0
           │          │           └ 'silk.models.silk'
           │          └ <function _gcd_import at 0x7f6dcfb87400>
           └ <module '_frozen_importlib' (frozen)>
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed

  File "/root/silk/silk/models/silk.py", line 19, in <module>
    from silk.backbones.silk.silk import SiLKBase as BackboneBase

  File "/root/silk/silk/backbones/silk/silk.py", line 21, in <module>
    from silk.backbones.superpoint.magicpoint import (

  File "/root/silk/silk/backbones/superpoint/magicpoint.py", line 224
    partial(
    ^^^^^^^^

SyntaxError: invalid syntax. Perhaps you forgot a comma?


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 134, in _resolve_target
    target = _locate(target)
             │       └ 'silk.models.silk.SiLKRandomHomographies'
             └ <function _locate at 0x7f6dcefaa170>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 658, in _locate
    raise ImportError(

ImportError: Error loading 'silk.models.silk.SiLKRandomHomographies':
SyntaxError('invalid syntax. Perhaps you forgot a comma?', ('/root/silk/silk/backbones/superpoint/magicpoint.py', 224, 13, '            partial(\n', 228, 21))


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f6dcef6ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f6dcfa4af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f6dcef6ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f6dce666440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f6dcefa9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f6dcefa9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f6dcefa9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f6dce4c29e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f6dceef32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f6dce6f1990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f6dcefa8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f6dce6663b0>
    │   └ <property object at 0x7f6dcefd6e80>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f6dce665750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f6dce6656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f6dcf8b1bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f6dcfa76830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f6dce665d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f6dce665e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f6dcefaa560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f6dcefaa680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 333, in instantiate_node
    _target_ = _resolve_target(node.get(_Keys.TARGET), full_key)
               │               │    │   │     │        └ 'mode.model'
               │               │    │   │     └ <_Keys.TARGET: '_target_'>
               │               │    │   └ <enum '_Keys'>
               │               │    └ <function DictConfig.get at 0x7f6dcf434f70>
               │               └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function _resolve_target at 0x7f6dcefaa4d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 139, in _resolve_target
    raise InstantiationException(msg) from e
          │                      └ "Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.
full_key: mode.model
2025-02-26 09:03:38.804 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:04:06.909 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:04:06.910 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:04:09.881 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:04:14.831 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (105853), thread 'MainThread' (140338801983936):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fa32b9dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fa32c4d6f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fa32b9dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fa32b0e2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fa32ba1dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fa32ba1de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fa32ba1dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fa32af5a9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fa32b9672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fa32b169930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fa32ba1cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fa32b0e23b0>
    │   └ <property object at 0x7fa32ba470b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fa32b0e1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fa32b0e16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fa32c341bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fa32c502830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fa329da1b70>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fa0da4b50c0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fa0f0fd39a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fa0f0fd3880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fa0f0fe83a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fa0f0fe85e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>
    │    └ <property object at 0x7fa0f0fdb560>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fa0f0fe8670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fa0d00b24a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fa0f0fe8790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fa0f0fdbab0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>
    │    └ <function Trainer._run_sanity_check at 0x7fa0f0fe8940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fa0f0ff0f90>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fa0d00b20b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fa0f1184d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fa0f0fedcf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fa0f18797b0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fa0f0fedcf0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fa0f101f580>
                 │    │          └ <function Loop.run at 0x7fa0f111ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fa0f0feff70>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fa0f0fedcf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fa0f101f580>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fa0f1171e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fa0f0feff70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fa0f1172290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fa0f0feff70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fa0f10d72e0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fa0f0feff70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fa1343c9b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fa0d00b24a0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fa0d00b2d70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fa1343c0a40>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fa0d00b24a0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fa1da3dc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fa1da01c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fa1da3dc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 502, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fa0dba6b2e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fa0da63add0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 35
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fa0da63add0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fa0da63add0>
           │    │     └ <function Flow.flow_from_tape at 0x7fa0e62d81f0>
           │    └ <silk.flow.Flow object at 0x7fa0da63b880>
           └ <silk.flow.FixedOutputFlow object at 0x7fa0da63add0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 15
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fa0da63b6a0>, <silk.flow._InputExtraction object at 0x7fa0da63abf0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fa0da63b880>
    │       └ 15
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fa32c1d43b0>
           │    │          │         │       └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    │          │         └ <property object at 0x7fa32c1d4360>
           │    │          └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    └ <bound method AutoForward.forward_flow of SiLKVGG(
           │        (backbone): ParametricVGG(
           │          (mp): Identity()
           │          (layers): ModuleList...
           └ <silk.flow._FunctionCall object at 0x7fa0da456cb0>

  File "/root/silk/silk/flow.py", line 332, in forward_flow
    return self._flow(outputs, *args, **kwargs)
           │    │     │         │       └ {'images': tensor([[[[0.6314, 0.6824, 0.7176,  ..., 0.0196, 0.0078, 0.0118],
           │    │     │         │                   [0.6157, 0.6902, 0.8000,  ..., 0.0039,...
           │    │     │         └ ()
           │    │     └ ('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms')
           │    └ <silk.flow.Flow object at 0x7fa0da63b610>
           └ SiLKVGG(
               (backbone): ParametricVGG(
                 (mp): Identity()
                 (layers): ModuleList(
                   (0): Sequential(
                     (0): Sequ...

  File "/root/silk/silk/flow.py", line 244, in flow
    return self.flow_from_tape(tape, output_indexes, inputs)
           │    │              │     │               └ {'images': tensor([[[[0.6314, 0.6824, 0.7176,  ..., 0.0196, 0.0078, 0.0118],
           │    │              │     │                           [0.6157, 0.6902, 0.8000,  ..., 0.0039,...
           │    │              │     └ (10, 2, 14, 13, 6)
           │    │              └ ((0, ()), (1, [0]), (2, ()), (3, [1]), (4, ()), (5, [4]), (6, [5]), (7, ()), (8, [7]), (10, ()), (13, [3]), (14, [8]))
           │    └ <function Flow.flow_from_tape at 0x7fa0e62d81f0>
           └ <silk.flow.Flow object at 0x7fa0da63b610>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'images': tensor([[[[0.6314, 0.6824, 0.7176,  ..., 0.0196, 0.0078, 0.0118],
    │       │        │    │            │      │                    [0.6157, 0.6902, 0.8000,  ..., 0.0039,...
    │       │        │    │            │      └ [None, None, tensor([[[[-1.1460, -0.1652,  0.5630,  ...,  0.6228,  0.6190,  0.7085],
    │       │        │    │            │                  [-1.0691, -0.2888,  0.4055,  ....
    │       │        │    │            └ 7
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fa0dba4bfa0>, <silk.flow._FunctionCall object at 0x7fa0da678070>, <silk.flow._Funct...
    │       │        └ <silk.flow.Flow object at 0x7fa0da63b610>
    │       └ 7
    └ [None, None, tensor([[[[-1.1460, -0.1652,  0.5630,  ...,  0.6228,  0.6190,  0.7085],
                [-1.0691, -0.2888,  0.4055,  ....

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fa32c1d43b0>
           │    │          │         │       └ <BoundArguments (prob_map=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0.,...
           │    │          │         └ <property object at 0x7fa32c1d4360>
           │    │          └ <BoundArguments (prob_map=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0.,...
           │    └ functools.partial(<function prob_map_to_positions_with_prob at 0x7fa0e62a69e0>, top_k=10000)
           └ <silk.flow._FunctionCall object at 0x7fa0f1038280>

  File "/root/silk/silk/backbones/superpoint/utils.py", line 516, in prob_map_to_positions_with_prob
    print(positions.shape)
          └ (tensor([[5.0000e-01, 4.2500e+01],
                    [5.0000e-01, 1.8350e+02],
                    [5.0000e-01, 1.8450e+02],
                    ...,
                    [...

AttributeError: 'tuple' object has no attribute 'shape'
2025-02-26 09:04:15.004 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:04:50.805 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:04:50.806 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:04:53.782 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:04:58.683 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:06:12.250 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:06:12.251 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:06:15.304 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:06:44.280 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:07:44.683 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:07:44.683 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:07:47.725 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:07:52.467 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:09:10.435 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:09:10.435 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:09:13.445 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:09:18.368 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (114459), thread 'MainThread' (139998644666816):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f53f8ae2e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f53f958af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f53f8ae2e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f53f81ae440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f53f8b21d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f53f8b21e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f53f8b21cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f53f80129e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f53f8a6b2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f53f823d900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f53f8b20ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f53f81ae3b0>
    │   └ <property object at 0x7f53f8b4b010>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f53f81ad750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f53f81ad6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f53f93f5bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f53f95b6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f53f6da5a20>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f51a755d0c0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f51be25f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f51be25f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f51be2743a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f51be2745e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>
    │    └ <property object at 0x7f51be267600>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f51be274670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f51a00ddcc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f51be274790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f51be267b50>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>
    │    └ <function Trainer._run_sanity_check at 0x7f51be274940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f51be079030>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f51a00de140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f51be210d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f51be27be50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f51be358810>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f51be27be50>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f51be0a70a0>
                 │    │          └ <function Loop.run at 0x7f51be1a2b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f51be27b370>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f51be27be50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f51be0a70a0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f51be1f9e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f51be27b370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f51be1fa290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f51be27b370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f51be35b470>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f51be27b370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f520142db40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f51a00ddcc0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f51a00de8c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f5201421030>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f51a00ddcc0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f52a73dc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f52a701c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f52a73dc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 502, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f51a8b0b2e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f51a76eada0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 35
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f51a76eada0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f51a76eada0>
           │    │     └ <function Flow.flow_from_tape at 0x7f51b34b01f0>
           │    └ <silk.flow.Flow object at 0x7f51a76eb850>
           └ <silk.flow.FixedOutputFlow object at 0x7f51a76eada0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 15
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f51a76eb670>, <silk.flow._InputExtraction object at 0x7f51a76eabc0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f51a76eb850>
    │       └ 15
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f53f92883b0>
           │    │          │         │       └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    │          │         └ <property object at 0x7f53f9288360>
           │    │          └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    └ <bound method AutoForward.forward_flow of SiLKVGG(
           │        (backbone): ParametricVGG(
           │          (mp): Identity()
           │          (layers): ModuleList...
           └ <silk.flow._FunctionCall object at 0x7f51a74fec80>

  File "/root/silk/silk/flow.py", line 332, in forward_flow
    return self._flow(outputs, *args, **kwargs)
           │    │     │         │       └ {'images': tensor([[[[0.6196, 0.6824, 0.6980,  ..., 0.1098, 0.1098, 0.1216],
           │    │     │         │                   [0.6314, 0.6784, 0.7490,  ..., 0.0980,...
           │    │     │         └ ()
           │    │     └ ('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms')
           │    └ <silk.flow.Flow object at 0x7f51a76eb5e0>
           └ SiLKVGG(
               (backbone): ParametricVGG(
                 (mp): Identity()
                 (layers): ModuleList(
                   (0): Sequential(
                     (0): Sequ...

  File "/root/silk/silk/flow.py", line 244, in flow
    return self.flow_from_tape(tape, output_indexes, inputs)
           │    │              │     │               └ {'images': tensor([[[[0.6196, 0.6824, 0.6980,  ..., 0.1098, 0.1098, 0.1216],
           │    │              │     │                           [0.6314, 0.6784, 0.7490,  ..., 0.0980,...
           │    │              │     └ (10, 2, 14, 13, 6)
           │    │              └ ((0, ()), (1, [0]), (2, ()), (3, [1]), (4, ()), (5, [4]), (6, [5]), (7, ()), (8, [7]), (10, ()), (13, [3]), (14, [8]))
           │    └ <function Flow.flow_from_tape at 0x7f51b34b01f0>
           └ <silk.flow.Flow object at 0x7f51a76eb5e0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'images': tensor([[[[0.6196, 0.6824, 0.6980,  ..., 0.1098, 0.1098, 0.1216],
    │       │        │    │            │      │                    [0.6314, 0.6784, 0.7490,  ..., 0.0980,...
    │       │        │    │            │      └ [None, None, tensor([[[[ 1.7739e+00,  1.2051e+00,  8.3206e-02,  ..., -4.5086e-01,
    │       │        │    │            │                   -4.9014e-01, -5.0338e-01],
    │       │        │    │            │             ...
    │       │        │    │            └ 7
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f51a8cebf70>, <silk.flow._FunctionCall object at 0x7f51a7728040>, <silk.flow._Funct...
    │       │        └ <silk.flow.Flow object at 0x7f51a76eb5e0>
    │       └ 7
    └ [None, None, tensor([[[[ 1.7739e+00,  1.2051e+00,  8.3206e-02,  ..., -4.5086e-01,
                 -4.9014e-01, -5.0338e-01],
           ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f53f92883b0>
           │    │          │         │       └ <BoundArguments (prob_map=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0.,...
           │    │          │         └ <property object at 0x7f53f9288360>
           │    │          └ <BoundArguments (prob_map=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0.,...
           │    └ functools.partial(<function prob_map_to_positions_with_prob at 0x7f51b34829e0>, top_k=10000)
           └ <silk.flow._FunctionCall object at 0x7f51be0c0280>

  File "/root/silk/silk/backbones/superpoint/utils.py", line 529, in prob_map_to_positions_with_prob
    print(positions_with_prob.shape)
          └ (tensor([[5.0000e-01, 6.4500e+01, 8.9441e-01],
                    [5.0000e-01, 6.5500e+01, 8.9184e-01],
                    [5.0000e-01, 1.8050e+02,...

AttributeError: 'tuple' object has no attribute 'shape'
2025-02-26 09:09:18.536 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:09:31.421 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:09:31.422 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:09:34.378 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:09:50.906 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:10:58.143 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:10:58.144 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:11:01.148 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:11:05.983 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:12:28.733 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:12:28.734 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:12:31.667 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:12:36.579 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (121405), thread 'MainThread' (140290078974400):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f97d3866e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f97d42faf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f97d3866e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f97d2efa440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f97d38a1d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f97d38a1e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f97d38a1cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f97d2d5e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f97d37eb2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f97d2f81930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f97d38a0ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f97d2efa3b0>
    │   └ <property object at 0x7f97d381fce0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f97d2ef9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f97d2ef96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f97d4161bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f97d4322830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f97d1b89b40>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f957a071120>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f9598f8f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f9598f8f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f9598fa43a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f9598fa45e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>
    │    └ <property object at 0x7f9598f97650>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f9598fa4670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f9571de0d60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f9598fa4790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f9598f97ba0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>
    │    └ <function Trainer._run_sanity_check at 0x7f9598fa4940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f9598fb1080>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f9571de1ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f9598f40d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f9598fadd50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f9599d01260>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f9598fadd50>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f9598fdab90>
                 │    │          └ <function Loop.run at 0x7f95990ceb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f9598faffd0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f9598fadd50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f9598fdab90>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f9598f2de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f9598faffd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f9598f2e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f9598faffd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f9599087560>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f9598faffd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f95dc1b1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f9571de0d60>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f9571de0ee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f95dc19d8a0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f9571de0d60>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f96823bc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f9681e00280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f96823bc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 502, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f9583a2b2e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f958238ad40>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 35
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f958238ad40>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f958238ad40>
           │    │     └ <function Flow.flow_from_tape at 0x7f958e0781f0>
           │    └ <silk.flow.Flow object at 0x7f958238add0>
           └ <silk.flow.FixedOutputFlow object at 0x7f958238ad40>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 15
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f958238b910>, <silk.flow._InputExtraction object at 0x7f958238acb0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f958238add0>
    │       └ 15
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f97d3fe85e0>
           │    │          │         │       └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    │          │         └ <property object at 0x7f97d3fe8590>
           │    │          └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    └ <bound method AutoForward.forward_flow of SiLKVGG(
           │        (backbone): ParametricVGG(
           │          (mp): Identity()
           │          (layers): ModuleList...
           └ <silk.flow._FunctionCall object at 0x7f9582416dd0>

  File "/root/silk/silk/flow.py", line 332, in forward_flow
    return self._flow(outputs, *args, **kwargs)
           │    │     │         │       └ {'images': tensor([[[[0.6118, 0.6588, 0.6902,  ..., 0.1098, 0.0863, 0.1020],
           │    │     │         │                   [0.6039, 0.6824, 0.7608,  ..., 0.1176,...
           │    │     │         └ ()
           │    │     └ ('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms')
           │    └ <silk.flow.Flow object at 0x7f958238b670>
           └ SiLKVGG(
               (backbone): ParametricVGG(
                 (mp): Identity()
                 (layers): ModuleList(
                   (0): Sequential(
                     (0): Sequ...

  File "/root/silk/silk/flow.py", line 244, in flow
    return self.flow_from_tape(tape, output_indexes, inputs)
           │    │              │     │               └ {'images': tensor([[[[0.6118, 0.6588, 0.6902,  ..., 0.1098, 0.0863, 0.1020],
           │    │              │     │                           [0.6039, 0.6824, 0.7608,  ..., 0.1176,...
           │    │              │     └ (10, 2, 14, 13, 6)
           │    │              └ ((0, ()), (1, [0]), (2, ()), (3, [1]), (4, ()), (5, [4]), (6, [5]), (7, ()), (8, [7]), (10, ()), (13, [3]), (14, [8]))
           │    └ <function Flow.flow_from_tape at 0x7f958e0781f0>
           └ <silk.flow.Flow object at 0x7f958238b670>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'images': tensor([[[[0.6118, 0.6588, 0.6902,  ..., 0.1098, 0.0863, 0.1020],
    │       │        │    │            │      │                    [0.6039, 0.6824, 0.7608,  ..., 0.1176,...
    │       │        │    │            │      └ [None, None, tensor([[[[-0.6239, -0.1753,  0.3456,  ...,  0.8456,  0.9552,  0.8108],
    │       │        │    │            │                  [-0.7521, -0.1795,  0.3708,  ....
    │       │        │    │            └ 7
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f9583a44040>, <silk.flow._FunctionCall object at 0x7f95823c40d0>, <silk.flow._Funct...
    │       │        └ <silk.flow.Flow object at 0x7f958238b670>
    │       └ 7
    └ [None, None, tensor([[[[-0.6239, -0.1753,  0.3456,  ...,  0.8456,  0.9552,  0.8108],
                [-0.7521, -0.1795,  0.3708,  ....

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f97d3fe85e0>
           │    │          │         │       └ <BoundArguments (prob_map=tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
           │    │          │         │                  [0.0000, 0.0000, 0.0000, ...
           │    │          │         └ <property object at 0x7f97d3fe8590>
           │    │          └ <BoundArguments (prob_map=tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
           │    │                     [0.0000, 0.0000, 0.0000, ...
           │    └ functools.partial(<function prob_map_to_positions_with_prob at 0x7f958e0469e0>, top_k=10000)
           └ <silk.flow._FunctionCall object at 0x7f9598df82e0>

  File "/root/silk/silk/backbones/superpoint/utils.py", line 531, in prob_map_to_positions_with_prob
    positions_with_prob[0] = positions_with_prob[0][:top_k]
    │                        │                       └ 10000
    │                        └ (tensor([[5.0000e-01, 3.9500e+01, 7.9133e-01],
    │                                  [5.0000e-01, 2.4550e+02, 7.8944e-01],
    │                                  [5.0000e-01, 4.3250e+02,...
    └ (tensor([[5.0000e-01, 3.9500e+01, 7.9133e-01],
              [5.0000e-01, 2.4550e+02, 7.8944e-01],
              [5.0000e-01, 4.3250e+02,...

TypeError: 'tuple' object does not support item assignment
2025-02-26 09:12:36.751 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:15:33.948 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:15:33.948 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:15:36.965 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:17:53.312 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:20:35.657 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:20:35.657 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:20:38.676 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:23:01.929 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-26 09:23:01.930 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-26 09:23:01.930 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-26 09:23:04.060 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:23:04.060 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:23:07.000 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:24:12.887 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:27:20.244 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:27:20.245 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:27:23.252 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:27:28.152 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:29:13.985 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:29:13.985 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:29:16.976 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:29:21.798 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (135099), thread 'MainThread' (139952990683584):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f49577dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f4958282f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f49577dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f4956eaa440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f4957819d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f4957819e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f4957819cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f4956d069e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f49577672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f4956f31960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f4957818ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f4956eaa3b0>
    │   └ <property object at 0x7f4957807a10>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f4956ea9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f4956ea96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f49580edbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f49582ae830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f4956b61d20>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f4706239420>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f471cf479a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f471cf47880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f471cf603a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f471cf605e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>
    │    └ <property object at 0x7f471cf4f600>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f471cf60670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f46edd524a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f471cf60790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f471cf4fb50>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>
    │    └ <function Trainer._run_sanity_check at 0x7f471cf60940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f471cd6d030>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46edd50e80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f471cef8d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f471cf5e0e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f471cedb600>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f471cf5e0e0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f471cd95000>
                 │    │          └ <function Loop.run at 0x7f471ce8ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f471cf5ef80>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f471cf5e0e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f471cd95000>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f471cee5e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f471cf5ef80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f471cee6290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f471cf5ef80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f471d043470>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f471cf5ef80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f47600bdb40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f46edd524a0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f46edd53ca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f47600b5350>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f46edd524a0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f48060dc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f4805d1c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f48060dc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 502, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f4707757250>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f47063c6f50>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 35
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f47063c6f50>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f47063c6f50>
           │    │     └ <function Flow.flow_from_tape at 0x7f47120a81f0>
           │    └ <silk.flow.Flow object at 0x7f47063c6fe0>
           └ <silk.flow.FixedOutputFlow object at 0x7f47063c6f50>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 15
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f47063c7b20>, <silk.flow._InputExtraction object at 0x7f47063c6ec0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f47063c6fe0>
    │       └ 15
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f4957f80220>
           │    │          │         │       └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    │          │         └ <property object at 0x7f4957f801d0>
           │    │          └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    └ <bound method AutoForward.forward_flow of SiLKVGG(
           │        (backbone): ParametricVGG(
           │          (mp): Identity()
           │          (layers): ModuleList...
           └ <silk.flow._FunctionCall object at 0x7f47061daf20>

  File "/root/silk/silk/flow.py", line 332, in forward_flow
    return self._flow(outputs, *args, **kwargs)
           │    │     │         │       └ {'images': tensor([[[[0.6118, 0.6549, 0.6902,  ..., 0.0471, 0.0471, 0.0471],
           │    │     │         │                   [0.5961, 0.6667, 0.7490,  ..., 0.0353,...
           │    │     │         └ ()
           │    │     └ ('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms')
           │    └ <silk.flow.Flow object at 0x7f47063c7880>
           └ SiLKVGG(
               (backbone): ParametricVGG(
                 (mp): Identity()
                 (layers): ModuleList(
                   (0): Sequential(
                     (0): Sequ...

  File "/root/silk/silk/flow.py", line 244, in flow
    return self.flow_from_tape(tape, output_indexes, inputs)
           │    │              │     │               └ {'images': tensor([[[[0.6118, 0.6549, 0.6902,  ..., 0.0471, 0.0471, 0.0471],
           │    │              │     │                           [0.5961, 0.6667, 0.7490,  ..., 0.0353,...
           │    │              │     └ (10, 2, 14, 13, 6)
           │    │              └ ((0, ()), (1, [0]), (2, ()), (3, [1]), (4, ()), (5, [4]), (6, [5]), (7, ()), (8, [7]), (10, ()), (13, [3]), (14, [8]))
           │    └ <function Flow.flow_from_tape at 0x7f47120a81f0>
           └ <silk.flow.Flow object at 0x7f47063c7880>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'images': tensor([[[[0.6118, 0.6549, 0.6902,  ..., 0.0471, 0.0471, 0.0471],
    │       │        │    │            │      │                    [0.5961, 0.6667, 0.7490,  ..., 0.0353,...
    │       │        │    │            │      └ [None, None, tensor([[[[ 1.1176,  1.0929,  0.8135,  ..., -0.7062, -0.7303, -0.7214],
    │       │        │    │            │                  [ 1.2740,  1.2555,  0.7769,  ....
    │       │        │    │            └ 7
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f4707764250>, <silk.flow._FunctionCall object at 0x7f47064042e0>, <silk.flow._Funct...
    │       │        └ <silk.flow.Flow object at 0x7f47063c7880>
    │       └ 7
    └ [None, None, tensor([[[[ 1.1176,  1.0929,  0.8135,  ..., -0.7062, -0.7303, -0.7214],
                [ 1.2740,  1.2555,  0.7769,  ....

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f4957f80220>
           │    │          │         │       └ <BoundArguments (prob_map=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0.,...
           │    │          │         └ <property object at 0x7f4957f801d0>
           │    │          └ <BoundArguments (prob_map=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0.,...
           │    └ functools.partial(<function prob_map_to_positions_with_prob at 0x7f471207a9e0>, top_k=10000)
           └ <silk.flow._FunctionCall object at 0x7f471cdb04c0>

  File "/root/silk/silk/backbones/superpoint/utils.py", line 532, in prob_map_to_positions_with_prob
    positions_with_prob = tuple(

  File "/root/silk/silk/backbones/superpoint/utils.py", line 533, in <genexpr>
    torch.cat((pos, prob), dim=1)[:idx] for pos, prob in zip(positions, prob)
    │     │    │    │                       │    │                      └ tensor([[0.9222],
    │     │    │    │                       │    │                                [0.9219],
    │     │    │    │                       │    │                                [0.9150],
    │     │    │    │                       │    │                                ...,
    │     │    │    │                       │    │                                [0.9361],
    │     │    │    │                       │    │                                [0.9094],
    │     │    │    │                       │    │                                [0.9075]], dev...
    │     │    │    │                       │    └ tensor([[0.9222],
    │     │    │    │                       │              [0.9219],
    │     │    │    │                       │              [0.9150],
    │     │    │    │                       │              ...,
    │     │    │    │                       │              [0.9361],
    │     │    │    │                       │              [0.9094],
    │     │    │    │                       │              [0.9075]], dev...
    │     │    │    │                       └ tensor([[5.0000e-01, 2.3950e+02],
    │     │    │    │                                 [5.0000e-01, 3.3650e+02],
    │     │    │    │                                 [5.0000e-01, 3.3750e+02],
    │     │    │    │                                 ...,
    │     │    │    │                                 [3...
    │     │    │    └ tensor([[0.9222],
    │     │    │              [0.9219],
    │     │    │              [0.9150],
    │     │    │              ...,
    │     │    │              [0.9361],
    │     │    │              [0.9094],
    │     │    │              [0.9075]], dev...
    │     │    └ tensor([[5.0000e-01, 2.3950e+02],
    │     │              [5.0000e-01, 3.3650e+02],
    │     │              [5.0000e-01, 3.3750e+02],
    │     │              ...,
    │     │              [3...
    │     └ <built-in method cat of type object at 0x7f4954a59840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

NameError: free variable 'idx' referenced before assignment in enclosing scope
2025-02-26 09:29:21.968 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:29:44.854 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:29:44.855 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:29:47.825 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:29:52.703 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (136885), thread 'MainThread' (139640263377344):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f00877dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f0088282f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f00877dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f0086eaa440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f008781dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f008781de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f008781dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f0086d069e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f00877672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f0086f31930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f008781cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f0086eaa3b0>
    │   └ <property object at 0x7f0087846de0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f0086ea9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f0086ea96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f00880edbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f00882ae830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7efe4cdb0100>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7efe36238430>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7efe4cf479a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7efe4cf47880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7efe4cf5c3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7efe4cf5c5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>
    │    └ <property object at 0x7efe4cf4f600>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7efe4cf5c670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7efe4cd97c10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7efe4cf5c790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7efe4cf4fb50>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>
    │    └ <function Trainer._run_sanity_check at 0x7efe4cf5c940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7efe4cf65030>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7efe4cd97670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7efe4cef8d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7efe4cd6f610>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7efe4cedb5b0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7efe4cd6f610>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7efe1ddf6e00>
                 │    │          └ <function Loop.run at 0x7efe4ce8ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7efe4cd6f670>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7efe4cd6f610>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7efe1ddf6e00>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7efe4cee5e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7efe4cd6f670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7efe4cee6290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7efe4cd6f670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7efe4d043330>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7efe4cd6f670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7efe900c1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7efe4cd97c10>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7efe4cd974f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7efe900b14e0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7efe4cd97c10>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7eff360dc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7eff35d1c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7eff360dc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 502, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7efe37757250>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7efe363c7940>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 35
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7efe363c7940>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7efe363c7940>
           │    │     └ <function Flow.flow_from_tape at 0x7efe420a81f0>
           │    └ <silk.flow.Flow object at 0x7efe363c73d0>
           └ <silk.flow.FixedOutputFlow object at 0x7efe363c7940>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 15
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7efe363c74f0>, <silk.flow._InputExtraction object at 0x7efe363c69b0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7efe363c73d0>
    │       └ 15
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f0087f803b0>
           │    │          │         │       └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    │          │         └ <property object at 0x7f0087f80360>
           │    │          └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    └ <bound method AutoForward.forward_flow of SiLKVGG(
           │        (backbone): ParametricVGG(
           │          (mp): Identity()
           │          (layers): ModuleList...
           └ <silk.flow._FunctionCall object at 0x7efe361da980>

  File "/root/silk/silk/flow.py", line 332, in forward_flow
    return self._flow(outputs, *args, **kwargs)
           │    │     │         │       └ {'images': tensor([[[[0.6627, 0.6863, 0.7294,  ..., 0.1059, 0.1098, 0.1098],
           │    │     │         │                   [0.6784, 0.6902, 0.7255,  ..., 0.1059,...
           │    │     │         └ ()
           │    │     └ ('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms')
           │    └ <silk.flow.Flow object at 0x7efe363c69e0>
           └ SiLKVGG(
               (backbone): ParametricVGG(
                 (mp): Identity()
                 (layers): ModuleList(
                   (0): Sequential(
                     (0): Sequ...

  File "/root/silk/silk/flow.py", line 244, in flow
    return self.flow_from_tape(tape, output_indexes, inputs)
           │    │              │     │               └ {'images': tensor([[[[0.6627, 0.6863, 0.7294,  ..., 0.1059, 0.1098, 0.1098],
           │    │              │     │                           [0.6784, 0.6902, 0.7255,  ..., 0.1059,...
           │    │              │     └ (10, 2, 14, 13, 6)
           │    │              └ ((0, ()), (1, [0]), (2, ()), (3, [1]), (4, ()), (5, [4]), (6, [5]), (7, ()), (8, [7]), (10, ()), (13, [3]), (14, [8]))
           │    └ <function Flow.flow_from_tape at 0x7efe420a81f0>
           └ <silk.flow.Flow object at 0x7efe363c69e0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'images': tensor([[[[0.6627, 0.6863, 0.7294,  ..., 0.1059, 0.1098, 0.1098],
    │       │        │    │            │      │                    [0.6784, 0.6902, 0.7255,  ..., 0.1059,...
    │       │        │    │            │      └ [None, None, tensor([[[[ 1.5929,  1.3832,  1.0219,  ...,  0.7384,  0.7297,  0.7139],
    │       │        │    │            │                  [ 1.7421,  1.3732,  0.9383,  ....
    │       │        │    │            └ 7
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7efe363c7340>, <silk.flow._FunctionCall object at 0x7efe37937cd0>, <silk.flow._Funct...
    │       │        └ <silk.flow.Flow object at 0x7efe363c69e0>
    │       └ 7
    └ [None, None, tensor([[[[ 1.5929,  1.3832,  1.0219,  ...,  0.7384,  0.7297,  0.7139],
                [ 1.7421,  1.3732,  0.9383,  ....

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f0087f803b0>
           │    │          │         │       └ <BoundArguments (prob_map=tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
           │    │          │         │                  [0.8510, 0.0000, 0.0000, ...
           │    │          │         └ <property object at 0x7f0087f80360>
           │    │          └ <BoundArguments (prob_map=tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
           │    │                     [0.8510, 0.0000, 0.0000, ...
           │    └ functools.partial(<function prob_map_to_positions_with_prob at 0x7efe4207a9e0>, top_k=10000)
           └ <silk.flow._FunctionCall object at 0x7efe4cdb00a0>

  File "/root/silk/silk/backbones/superpoint/utils.py", line 530, in prob_map_to_positions_with_prob
    idx = torch.minimum(positions[0].shape[0], positions[1].shape[0])
          │     │       │                      └ (tensor([[5.0000e-01, 4.0500e+01],
          │     │       │                                [5.0000e-01, 6.7500e+01],
          │     │       │                                [5.0000e-01, 1.8350e+02],
          │     │       │                                ...,
          │     │       │                                [...
          │     │       └ (tensor([[5.0000e-01, 4.0500e+01],
          │     │                 [5.0000e-01, 6.7500e+01],
          │     │                 [5.0000e-01, 1.8350e+02],
          │     │                 ...,
          │     │                 [...
          │     └ <built-in method minimum of type object at 0x7f0084a59840>
          └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

TypeError: minimum(): argument 'input' (position 1) must be Tensor, not int
2025-02-26 09:29:52.870 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:30:19.619 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:30:19.620 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:30:22.592 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:34:02.153 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-26 09:34:02.154 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-26 09:34:02.154 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-26 09:34:09.247 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:34:09.247 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:34:12.283 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:54:04.883 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:54:04.884 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:54:08.003 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:54:13.267 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (151755), thread 'MainThread' (139812889637312):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f28b8ccee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f28b97baf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f28b8ccee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f28b83d2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f28b8d0dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f28b8d0de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f28b8d0dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f28b822e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f28b8c572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f28b8459990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f28b8d0cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f28b83d23b0>
    │   └ <property object at 0x7f28b8cf3c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f28b83d1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f28b83d16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f28b9625bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f28b97e6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f28b808db70>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f26474ad480>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f267e4579a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f267e457880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f267e4743a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f267e4745e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>
    │    └ <property object at 0x7f267e45b920>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f267e474670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f2647275ed0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f267e474790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f267e45be70>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>
    │    └ <function Trainer._run_sanity_check at 0x7f267e474940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f267e479350>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2647275030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f267e408d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f267e471e10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f267e3d79c0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f267e471e10>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f267e4a34c0>
                 │    │          └ <function Loop.run at 0x7f267e596b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f267e4730a0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f267e471e10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f267e4a34c0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f267e3f5e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f267e4730a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f267e3f6290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f267e4730a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f267e54f790>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f267e4730a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f26c15f1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f2647275ed0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f2647277ca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f26c15e1c10>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f2647275ed0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f27675cc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f276720c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f27675cc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 502, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f2668ebf010>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f266787efb0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ 35
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f266787efb0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f266787efb0>
           │    │     └ <function Flow.flow_from_tape at 0x7f267366c160>
           │    └ <silk.flow.Flow object at 0x7f266787f040>
           └ <silk.flow.FixedOutputFlow object at 0x7f266787efb0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, (tensor([[5.0000...
    │       │        │    │            └ 35
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f266787fb80>, <silk.flow._InputExtraction object at 0x7f266787ef20>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f266787f040>
    │       └ 35
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, (tensor([[5.0000...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f28b94b4450>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 2.5950e+02, 7.6446e-01],
           │    │          │         │                 [5.0000e-01, 2.6050e+02, 7.7384e-01]...
           │    │          │         └ <property object at 0x7f28b94b4400>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 2.5950e+02, 7.6446e-01],
           │    │                    [5.0000e-01, 2.6050e+02, 7.7384e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f26474ac6a0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 81, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f2668ebd7e0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0 = jax_loss.total_loss(
             │        └ <function total_loss at 0x7f2668ebd750>
             └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 420, in total_loss
    loss_1, precision, recall = corr_matching_binary_cross_entropy(
                                └ <function corr_matching_binary_cross_entropy at 0x7f2668ebd6c0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 277, in corr_matching_binary_cross_entropy
    loss_0 = correct_mask_0 * torch.nn.functional.softplus(-logits_0) + (
             │                │     │  │          │         └ tensor([[0.8400, 0.7798, 0.7059,  ..., 0.7729, 0.7721, 0.7685]],
             │                │     │  │          │                  device='cuda:0')
             │                │     │  │          └ <built-in function softplus>
             │                │     │  └ <module 'torch.nn.functional' from '/usr/local/lib/python3.10/dist-packages/torch/nn/functional.py'>
             │                │     └ <module 'torch.nn' from '/usr/local/lib/python3.10/dist-packages/torch/nn/__init__.py'>
             │                └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
             └ tensor([[True, True, True,  ..., True, True, True]], device='cuda:0')

RuntimeError: The size of tensor a (10001) must match the size of tensor b (425216) at non-singleton dimension 1
2025-02-26 09:54:13.388 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:55:28.324 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:55:28.325 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:55:31.298 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:55:36.368 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:58:18.752 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:58:18.753 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:58:21.751 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 09:58:27.187 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 09:59:28.776 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 09:59:28.776 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 09:59:31.749 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 10:00:56.155 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-26 10:00:56.156 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-26 10:00:56.156 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-26 10:00:58.079 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 10:00:58.080 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 10:01:01.076 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 10:01:06.263 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (160489), thread 'MainThread' (140719271080384):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7ffbc15cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7ffbc206ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7ffbc15cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7ffbc0c66440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7ffbc160dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7ffbc160de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7ffbc160dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7ffbc0d1e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7ffbc15572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7ffbc0ced990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7ffbc160cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7ffbc0c663b0>
    │   └ <property object at 0x7ffbc1637010>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7ffbc0c65750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7ffbc0c656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7ffbc1ed9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7ffbc209a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7ff986b640a0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7ff961d74430>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7ff986d079a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7ff986d07880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7ff986d1c3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7ff986d1c5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>
    │    └ <property object at 0x7ff986d0f5b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7ff986d1c670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7ff986d51ba0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7ff986d1c790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7ff986d0fb00>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>
    │    └ <function Trainer._run_sanity_check at 0x7ff986d1c940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7ff986d24fe0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff986d51180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7ff986cb8d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7ff986d2a830>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7ff989274130>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7ff986d2a830>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7ff961b972e0>
                 │    │          └ <function Loop.run at 0x7ff986e46b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7ff986d2bd00>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7ff986d2a830>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7ff961b972e0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7ff986ca5e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7ff986d2bd00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7ff986ca6290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7ff986d2bd00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7ff986e033d0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7ff986d2bd00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7ff9c9f05b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7ff986d51ba0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7ff986d51750>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7ff9c9ef91c0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7ff986d51ba0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7ffa6fdc45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7ffa6fa04280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7ffa6fdc45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 502, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7ff971733250>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 483, in _total_loss
    self.log(f"{mode}.total.loss", loss)
    │    │                         └ (tensor(nan, device='cuda:1'), tensor(nan, device='cuda:1'))
    │    └ <function LightningModule.log at 0x7ff986d2d2d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 409, in log
    apply_to_collection(
    └ <function apply_to_collection at 0x7ffa6e72c700>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/utilities/apply_func.py", line 92, in apply_to_collection
    return function(data, *args, **kwargs)
           │        │      │       └ {}
           │        │      └ ('val.total.loss', (tensor(nan, device='cuda:1'), tensor(nan, device='cuda:1')))
           │        └ (tensor(nan, device='cuda:1'), tensor(nan, device='cuda:1'))
           └ <function LightningModule.__check_allowed at 0x7ff986d2d480>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 575, in __check_allowed
    raise ValueError(f"`self.log({name}, {value})` was called, but `{type(v).__name__}` values cannot be logged")

ValueError: `self.log(val.total.loss, (tensor(nan, device='cuda:1'), tensor(nan, device='cuda:1')))` was called, but `tuple` values cannot be logged
2025-02-26 10:01:06.329 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 10:02:41.204 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 10:02:41.205 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 10:02:44.339 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 10:02:45.403 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (162277), thread 'MainThread' (140627171000768):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 546, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7fe3ffe2eb90>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 345, in _init_loss_flow
    self._loss_fn = self.flow.with_outputs(
    │               │    └ <property object at 0x7fe40a46d030>
    │               └ SiLKRandomHomographies(
    │                   (_module): MixedModuleDict(
    │                     (_mods): ModuleDict(
    │                       (model): SiLKVGG(
    │                         (backbone): Pa...
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 250, in with_outputs
    return FixedOutputFlow(self, outputs)
           │               │     └ ('acontextual_descriptor_losskeypoint_loss',)
           │               └ <silk.flow.Flow object at 0x7fe3fe78af50>
           └ <class 'silk.flow.FixedOutputFlow'>

  File "/root/silk/silk/flow.py", line 290, in __init__
    self._tape = self._flow.get_tape(outputs)
    │            │    │     │        └ ('acontextual_descriptor_losskeypoint_loss',)
    │            │    │     └ <function Flow.get_tape at 0x7fe40a4701f0>
    │            │    └ <silk.flow.Flow object at 0x7fe3fe78af50>
    │            └ <silk.flow.FixedOutputFlow object at 0x7fe3fe78aec0>
    └ <silk.flow.FixedOutputFlow object at 0x7fe3fe78aec0>

  File "/root/silk/silk/flow.py", line 185, in get_tape
    output_indexes = set(  # noqa: C401

  File "/root/silk/silk/flow.py", line 186, in <genexpr>
    self._name_to_index[name] for name in outputs
    │    │              │         └ 'acontextual_descriptor_losskeypoint_loss'
    │    │              └ 'acontextual_descriptor_losskeypoint_loss'
    │    └ {'batch': 0, 'use_image_aug': 1, 'images_1': 3, 'images_2': 4, 'image_shape': 5, 'pose_gt_forward': 6, 'pose_gt_backward': 7,...
    └ <silk.flow.Flow object at 0x7fe3fe78af50>

KeyError: 'acontextual_descriptor_losskeypoint_loss'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fe64fc6ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fe6506f6f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fe64fc6ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fe64f302440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fe64fcadd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fe64fcade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fe64fcadcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fe64f1729e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fe64fbf32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fe64f389990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fe64fcacee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fe64f3023b0>
    │   └ <property object at 0x7fe64fcd7100>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fe64f301750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fe64f3016c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fe650561bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fe650722830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7fe64f301d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7fe64f301e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7fe64fcae560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7fe64fcae680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7fe64fcae320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ "Error in call to target 'silk.models.silk.SiLKRandomHomographies':\nKeyError('acontextual_descriptor_losskeypoint_loss')\nfu...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
KeyError('acontextual_descriptor_losskeypoint_loss')
full_key: mode.model
2025-02-26 10:02:45.413 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 10:02:58.026 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 10:02:58.027 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 10:03:01.058 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 10:03:08.563 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (162408), thread 'MainThread' (140103435833792):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f6c5eb6ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f6c5f62ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f6c5eb6ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f6c5e22e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f6c5ebadd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f6c5ebade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f6c5ebadcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f6c5e0a69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f6c5eaf32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f6c5e2b5990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f6c5ebacee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f6c5e22e3b0>
    │   └ <property object at 0x7f6c5f0d9f30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f6c5e22d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f6c5e22d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f6c5f495bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f6c5f65a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f6c5df01e10>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f6a053e1570>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f6a242ff9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6a05196bf0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f6a242ff880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6a05196bf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6a05196bf0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f6a241143a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6a05196bf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f6a241145e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6a05196bf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6a05196bf0>
    │    └ <property object at 0x7f6a24303a60>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6a05196bf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f6a24114670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6a05196bf0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f6a05194eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f6a24114790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6a05196bf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f6a24119530>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f6a05196bf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f6a242b2cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f6a05197f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f6a0525abc0>
    │    │          └ <function Loop.run at 0x7f6a24242b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f6a051958a0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f6a05197f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f6a0525abc0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f6a2429fac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f6a051958a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f6a24242b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f6a05197b50>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f6a051958a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f6a2429c820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f6a05197b50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f6a24242b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f6a051942b0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f6a05197b50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f6a2429c0d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f6a051942b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f6a2429c1f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f6a051942b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f6a04ea78e0>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f6a2429c5e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f6a051942b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f6a2411e290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f6a04ea78e0>
    │         └ <function LightningOptimizer.step at 0x7f6a6742a710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f6a04ea78e0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f6a0ffa6b60 to Trainer at 0x7f6a05196bf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f6a04ea78e0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f6b0c6dc700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f6a05196110>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f6a05194190>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f6a05408c10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f6b0d04bd90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f6b0d04bd00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f6a04ea78e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f6a2428bb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f6a04ea78e0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f6a04ea78e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f6a04ea78e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 444, in _training_step
    result = self.output_result_cls.from_training_step_output(
             │    │                 └ <classmethod(<function ClosureResult.from_training_step_output at 0x7f6a2428b7f0>)>
             │    └ <class 'pytorch_lightning.loops.optimization.optimizer_loop.ClosureResult'>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f6a051942b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 85, in from_training_step_output
    raise MisconfigurationException(
          └ <class 'pytorch_lightning.utilities.exceptions.MisconfigurationException'>

pytorch_lightning.utilities.exceptions.MisconfigurationException: In automatic optimization, `training_step` must return a Tensor, a dict, or None (where the step will be skipped).
2025-02-26 10:03:08.595 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 10:03:56.953 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 10:03:56.954 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 10:03:59.996 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 10:04:07.239 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (165780), thread 'MainThread' (139987897393600):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f517816ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f5178c2af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f517816ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f517782a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f51781a9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f51781a9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f51781a9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f517769a9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f51780ef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f51778b1930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f51781a8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f517782a3b0>
    │   └ <property object at 0x7f517885e1b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f5177829750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f51778296c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f5178a91bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f5178c52830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f51774f5b70>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f4f201bd180>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f4f3d8d39a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4f0c7e0580>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f4f3d8d3880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4f0c7e0580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4f0c7e0580>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f4f3d8e83a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4f0c7e0580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f4f3d8e85e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4f0c7e0580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4f0c7e0580>
    │    └ <property object at 0x7f4f3d8d7790>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4f0c7e0580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f4f3d8e8670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4f0c7e0580>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f4f0c7e1900>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f4f3d8e8790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4f0c7e0580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f4f3d8f1260>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4f0c7e0580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f4f3d886cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f4f0c7e30d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f4f0c789cf0>
    │    │          └ <function Loop.run at 0x7f4f3da12b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f4f0c7e0130>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f4f0c7e30d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f4f0c789cf0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f4f3d873ac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f4f0c7e0130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f4f3da12b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f4f0c7e19f0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f4f0c7e0130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f4f3d870820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f4f0c7e19f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f4f3da12b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f4f0c7e0eb0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f4f0c7e19f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f4f3d8700d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f4f0c7e0eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f4f3d8701f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f4f0c7e0eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f4f0c3c2ce0>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f4f3d8705e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f4f0c7e0eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f4f3d8fa290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f4f0c3c2ce0>
    │         └ <function LightningOptimizer.step at 0x7f4f80a12710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f4f0c3c2ce0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f4f200f9e40 to Trainer at 0x7f4f0c7e0580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f4f0c3c2ce0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f4f80afc700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f4f0c7e2110>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f4f0c7e0280>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f4f201e4c10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f5026643d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f5026643d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f4f0c3c2ce0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f4f3d85fb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f4f0c3c2ce0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f4f0c3c2ce0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 155, in closure
    self._backward_fn(step_output.closure_loss)
    │    │            │           └ tensor(0.)
    │    │            └ ClosureResult(closure_loss=tensor(0.), loss=tensor(0.), extra={})
    │    └ <function OptimizerLoop._make_backward_fn.<locals>.backward_fn at 0x7f50262170a0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f4f0c3c2ce0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 327, in backward_fn
    self.trainer.accelerator.backward(loss, optimizer, opt_idx)
    │    │                            │     │          └ 0
    │    │                            │     └ Adam (
    │    │                            │       Parameter Group 0
    │    │                            │           amsgrad: False
    │    │                            │           betas: [0.9, 0.999]
    │    │                            │           capturable: False
    │    │                            │           differentiable: False
    │    │                            │           eps: ...
    │    │                            └ tensor(0.)
    │    └ <property object at 0x7f4f3d9cf4c0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f4f0c7e0eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 311, in backward
    self.precision_plugin.backward(self.lightning_module, closure_loss, *args, **kwargs)
    │    │                │        │    │                 │              │       └ {}
    │    │                │        │    │                 │              └ (Adam (
    │    │                │        │    │                 │                Parameter Group 0
    │    │                │        │    │                 │                    amsgrad: False
    │    │                │        │    │                 │                    betas: [0.9, 0.999]
    │    │                │        │    │                 │                    capturable: False
    │    │                │        │    │                 │                    differentiable: False
    │    │                │        │    │                 │                    eps:...
    │    │                │        │    │                 └ tensor(0.)
    │    │                │        │    └ <property object at 0x7f4f80a03920>
    │    │                │        └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f4f0c7e0280>
    │    │                └ <function PrecisionPlugin.backward at 0x7f4f80afc3a0>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f4f0c7e2110>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f4f0c7e0280>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 91, in backward
    model.backward(closure_loss, optimizer, *args, **kwargs)
    │     │        │             │           │       └ {}
    │     │        │             │           └ (0,)
    │     │        │             └ Adam (
    │     │        │               Parameter Group 0
    │     │        │                   amsgrad: False
    │     │        │                   betas: [0.9, 0.999]
    │     │        │                   capturable: False
    │     │        │                   differentiable: False
    │     │        │                   eps: ...
    │     │        └ tensor(0.)
    │     └ <function LightningModule.backward at 0x7f4f3d8f9fc0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1446, in backward
    loss.backward(*args, **kwargs)
    │    │         │       └ {}
    │    │         └ ()
    │    └ <function Tensor.backward at 0x7f50c4981fc0>
    └ tensor(0.)
  File "/usr/local/lib/python3.10/dist-packages/torch/_tensor.py", line 522, in backward
    torch.autograd.backward(
    │     │        └ <function backward at 0x7f502699d5a0>
    │     └ <module 'torch.autograd' from '/usr/local/lib/python3.10/dist-packages/torch/autograd/__init__.py'>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
  File "/usr/local/lib/python3.10/dist-packages/torch/autograd/__init__.py", line 266, in backward
    Variable._execution_engine.run_backward(  # Calls into the C++ engine to run the backward pass
    │        │                 └ <method 'run_backward' of 'torch._C._EngineBase' objects>
    │        └ <torch._C._EngineBase object at 0x7f512a8c0e30>
    └ <class 'torch.autograd.variable.Variable'>

RuntimeError: element 0 of tensors does not require grad and does not have a grad_fn
2025-02-26 10:04:07.283 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 10:07:36.563 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 10:07:36.564 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 10:07:39.555 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 10:07:44.697 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (169152), thread 'MainThread' (140521648177600):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fcdbe1dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fcdbec8ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fcdbe1dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fcdbd8aa440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fcdbe219d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fcdbe219e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fcdbe219cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fcdbd70e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fcdbe1672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fcdbd931930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fcdbe218ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fcdbd8aa3b0>
    │   └ <property object at 0x7fcdbe207ce0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fcdbd8a9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fcdbd8a96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fcdbeaf9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fcdbecba830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fcdbd56db10>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fcb64a25240>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fcb839279a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fcb83927880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fcb8393c3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fcb8393c5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>
    │    └ <property object at 0x7fcb8392b790>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fcb8393c670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fcb6480c6a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fcb8393c790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fcb8392bce0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>
    │    └ <function Trainer._run_sanity_check at 0x7fcb8393c940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fcb839451c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcb6480e710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fcb838d4d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fcb83941990>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fcb838b7740>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fcb83941990>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fcb83973580>
                 │    │          └ <function Loop.run at 0x7fcb83a6ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fcb83942920>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fcb83941990>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fcb83973580>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fcb838c1e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fcb83942920>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fcb838c2290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fcb83942920>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fcb83a234c0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fcb83942920>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fcbc6b15b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fcb6480c6a0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fcb6480f4c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fcbc6b09120>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fcb6480c6a0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fcc6cad85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fcc6c718280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fcc6cad85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 508, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fcb6e3271c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 489, in _total_loss
    self.log(f"{mode}.total.loss", loss)
    │    │                         └ None
    │    └ <function LightningModule.log at 0x7fcb839492d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 409, in log
    apply_to_collection(
    └ <function apply_to_collection at 0x7fcc6b438700>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/utilities/apply_func.py", line 92, in apply_to_collection
    return function(data, *args, **kwargs)
           │        │      │       └ {}
           │        │      └ ('val.total.loss', None)
           │        └ None
           └ <function LightningModule.__check_allowed at 0x7fcb83949480>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 575, in __check_allowed
    raise ValueError(f"`self.log({name}, {value})` was called, but `{type(v).__name__}` values cannot be logged")

ValueError: `self.log(val.total.loss, None)` was called, but `NoneType` values cannot be logged
2025-02-26 10:07:44.749 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-26 10:08:20.461 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 10:08:20.462 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 10:08:23.410 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 10:17:21.155 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-26 10:17:21.156 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-26 10:17:21.156 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-26 10:18:29.829 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-26 10:18:29.829 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-26 10:18:32.868 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-26 15:03:49.090 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-26 15:03:49.090 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-26 15:03:49.090 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-27 05:42:12.446 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 05:42:12.447 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 05:42:15.393 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 05:42:20.608 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (161807), thread 'MainThread' (140567269310912):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fd85d572e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fd85e042f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fd85d572e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fd85cc32440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fd85d5b1d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fd85d5b1e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fd85d5b1cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fd85cab69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fd85d4f72e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fd85ccb9930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fd85d5b0ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fd85cc323b0>
    │   └ <property object at 0x7fd85d5db010>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fd85cc31750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fd85cc316c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fd85deadbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fd85e06e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fd85c915a80>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fd601d71420>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fd622cff9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fd622cff880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fd622d183a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fd622d185e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>
    │    └ <property object at 0x7fd622d038d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fd622d18670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fd601b8ab30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fd622d18790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fd622d03e20>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>
    │    └ <function Trainer._run_sanity_check at 0x7fd622d18940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fd622d21300>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd601b89030>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fd622cb0d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fd622d15de0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fd622c7f880>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fd622d15de0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fd622b47490>
                 │    │          └ <function Loop.run at 0x7fd622c42b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fd622d17070>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fd622d15de0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fd622b47490>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fd622c9de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fd622d17070>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fd622c9e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fd622d17070>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fd622df36f0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fd622d17070>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fd665ec1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fd601b8ab30>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fd601b89cf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fd665eb5170>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fd601b8ab30>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fd70bdd05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fd70ba10280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fd70bdd05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 510, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fd60d73b250>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fd60c172e60>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (36, 37)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fd60c172e60>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fd60c172e60>
           │    │     └ <function Flow.flow_from_tape at 0x7fd617e88310>
           │    └ <silk.flow.Flow object at 0x7fd60c172ef0>
           └ <silk.flow.FixedOutputFlow object at 0x7fd60c172e60>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, (tensor([[5.0000...
    │       │        │    │            └ 35
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fd60c173a30>, <silk.flow._InputExtraction object at 0x7fd60c172dd0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fd60c172ef0>
    │       └ 35
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, (tensor([[5.0000...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fd85dd403b0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 4.0500e+01, 8.0467e-01],
           │    │          │         │                 [5.0000e-01, 1.7950e+02, 7.2621e-01]...
           │    │          │         └ <property object at 0x7fd85dd40360>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 4.0500e+01, 8.0467e-01],
           │    │                    [5.0000e-01, 1.7950e+02, 7.2621e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fd601d70580>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 94, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fd60d738dc0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7fd60d739990>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 333, in total_loss
    lse_0 = torch.logsumexp(x0x1, axis=1) #soft version of max
            │     │         └ tensor([[ 6.4715, 17.2539, 19.7275,  ..., 10.4403, 10.2866,  9.6007],
            │     │                   [-5.6955, -8.8789, -8.4419,  ..., -9.4823, -8.7...
            │     └ <built-in method logsumexp of type object at 0x7fd85a859840>
            └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 37.25 GiB. GPU 0 has a total capacity of 47.54 GiB of which 8.52 GiB is free. Process 3604465 has 1.30 GiB memory in use. Process 3680061 has 37.68 GiB memory in use. Of the allocated memory 37.36 GiB is allocated by PyTorch, and 16.57 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-27 05:42:20.758 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 06:38:14.825 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 06:38:14.826 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 06:38:17.847 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 06:38:18.942 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_prev_loss/checkpoints/epoch=9-step=8359.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-02-27 06:38:23.282 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 06:44:06.965 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 06:44:06.966 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 06:44:10.040 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 06:44:11.130 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_prev_loss/checkpoints/epoch=9-step=8359.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-02-27 06:44:15.948 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 06:46:01.509 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 06:46:01.510 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 06:46:04.378 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 06:46:05.419 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_prev_loss/checkpoints/epoch=9-step=8359.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-02-27 06:46:10.010 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 06:53:04.205 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 06:53:04.206 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 06:53:07.188 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 06:53:16.485 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (169054), thread 'MainThread' (139785117381056):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f224175ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f224220af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f224175ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f2240df2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f224179dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f224179de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f224179dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f2240eaa9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f22416e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f2240e79960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f224179cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f2240df23b0>
    │   └ <property object at 0x7f2241783ab0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f2240df1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f2240df16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f2242075bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f2242236830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f2240ad9e10>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f1fe1f44ca0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f2006e8f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1fe1c2a410>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f2006e8f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1fe1c2a410>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1fe1c2a410>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f2006ea83a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1fe1c2a410>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f2006ea85e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1fe1c2a410>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1fe1c2a410>
    │    └ <property object at 0x7f2006e97600>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1fe1c2a410>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f2006ea8670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1fe1c2a410>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f1fe1c2ad40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f2006ea8790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1fe1c2a410>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f2006eb10d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1fe1c2a410>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f2006e42cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f1fe1c2b8e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f1fe1ce1c00>
    │    │          └ <function Loop.run at 0x7f2006fdab00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f1fe1c2a080>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f1fe1c2b8e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f1fe1ce1c00>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f2006e2fac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f1fe1c2a080>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f2006fdab00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f1fe1c2b1f0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f1fe1c2a080>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f2006e2c820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f1fe1c2b1f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f2006fdab00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f1fe1c287c0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f1fe1c2b1f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f2006e2c0d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f1fe1c287c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f2006e2c1f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f1fe1c287c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f1fe1dbabf0>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f2006e2c5e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f1fe1c287c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f2006eb6290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f1fe1dbabf0>
    │         └ <function LightningOptimizer.step at 0x7f204a01a710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f1fe1dbabf0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f1fe1fb91c0 to Trainer at 0x7f1fe1c2a410>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f1fe1dbabf0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f20ef2c8700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f1fe1c28ee0>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f1fe1c288b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f1fe1f849d0>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f20efc3fd90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f20efc3fd00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f1fe1dbabf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f2006e1bb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f1fe1dbabf0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f1fe1dbabf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f1fe1dbabf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7f2006f97470>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f1fe1c287c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f204a0b9ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f1fe1c2ad40>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f1fe1c288b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7f204a0acef0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f1fe1c2ad40>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f20effc45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f20efc04280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f20effc45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 503, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f1ff1907010>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 471, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f1ff028ada0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f1ff028ada0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f1ff028ada0>
           │    │     └ <function Flow.flow_from_tape at 0x7f1ffc0601f0>
           │    └ <silk.flow.Flow object at 0x7f1ff028ae30>
           └ <silk.flow.FixedOutputFlow object at 0x7f1ff028ada0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, (tensor([[5.0000e-01, ...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f1ff028b970>, <silk.flow._InputExtraction object at 0x7f1ff028ad10>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f1ff028ae30>
    │       └ 28
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, (tensor([[5.0000e-01, ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f2241f04450>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 2.9500e+01, 5.0662e-01],
           │    │          │         │                 [5.0000e-01, 3.0500e+01, 5.8398e-01]...
           │    │          │         └ <property object at 0x7f2241f04400>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 2.9500e+01, 5.0662e-01],
           │    │                    [5.0000e-01, 3.0500e+01, 5.8398e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f1fe1f455a0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f1ff1904ca0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f1ff1905870>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 392, in total_loss
    lse_1, argmax_1, max_1 = _scan_reduce(
                             └ <function _scan_reduce at 0x7f1ff1905630>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 19
              │    │          └ tensor([[[-4.7389e-02, -3.9479e-01,  6.4637e-01,  ..., -4.6178e-01,
              │    │                       3.8976e-01,  5.2458e-01],
              │    │                     [-4.8969e-0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7f1fe1d993f0>
              └ <function _scan_reduce.<locals>.scan at 0x7f1fe1d99480>

  File "/root/silk/silk/losses/info_nce/loss.py", line 130, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[ 0.5166,  0.2426, -0.3321,  ...,  0.0364, -0.3600,  0.7485],
    │          │ │                [-0.3661, -0.6229,  0.1334,  ...,  0.0321,  0.2...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7f1fe1d993f0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 137, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[-0.2950, -0.1952, -0.4759,  ..., -0.2649,  0.4027, -0.2579],
                 │       │             [ 0.1769, -0.9429, -0.4815,  ...,  0.2517,  0.6...
                 │       └ tensor([[ 0.5166,  0.2426, -0.3321,  ...,  0.0364, -0.3600,  0.7485],
                 │                 [-0.3661, -0.6229,  0.1334,  ...,  0.0321,  0.2...
                 └ <function total_loss.<locals>.reducer at 0x7f1fe1d99360>

  File "/root/silk/silk/losses/info_nce/loss.py", line 363, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-1.9949, -1.0730,  3.1993,  ...,  4.0687,  2.3180, -3.4898],
    │     │                   [ 2.2563,  4.7926,  7.2739,  ...,  0.9184,  0.6...
    │     └ <built-in method logsumexp of type object at 0x7f223ea59840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.01 GiB. GPU 0 has a total capacity of 47.54 GiB of which 1.42 GiB is free. Process 3604465 has 1.30 GiB memory in use. Process 3729844 has 44.79 GiB memory in use. Of the allocated memory 42.50 GiB is allocated by PyTorch, and 1.98 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-27 06:53:17.015 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 06:55:16.001 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 06:55:16.001 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 06:55:18.965 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 06:56:33.286 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-27 06:56:33.287 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-27 06:56:33.287 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-27 06:56:35.273 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 06:56:35.273 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 06:56:38.183 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 06:56:44.250 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:06:45.035 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:06:45.036 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:06:48.061 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:06:54.271 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (177588), thread 'MainThread' (140235263394240):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f8b103dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f8b10ebef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f8b103dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f8b0fae2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f8b1041dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f8b1041de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f8b1041dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f8b0f93e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f8b103672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f8b0fb71900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f8b1041cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f8b0fae23b0>
    │   └ <property object at 0x7f8b10447010>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f8b0fae1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f8b0fae16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f8b10d29bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f8b10eea830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f8b0e7a1b70>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f88b80e0b80>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f88d5b639a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f88d5b63880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f88d5b783a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f88d5b785e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>
    │    └ <property object at 0x7f88d5b6b740>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f88d5b78670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f88b08e7730>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f88d5b78790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f88d5b6bc90>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>
    │    └ <function Trainer._run_sanity_check at 0x7f88d5b78940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f88d5b85170>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88b08e6c20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f88d5b14d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f88d5b7db40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f88d5af36f0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f88d5b7db40>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f88d59a6650>
                 │    │          └ <function Loop.run at 0x7f88d5ca2b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f88d5b7f010>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f88d5b7db40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f88d59a6650>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f88d5b01e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f88d5b7f010>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f88d5b02290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f88d5b7f010>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f88d5c5f470>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f88d5b7f010>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f8918d0db40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f88b08e7730>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f88b08e41f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f8918d00f40>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f88b08e7730>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f89beddc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f89bea1c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f89beddc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 511, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f88c05cf130>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f88bef86ce0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f88bef86ce0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f88bef86ce0>
           │    │     └ <function Flow.flow_from_tape at 0x7f88cac70310>
           │    └ <silk.flow.Flow object at 0x7f88bef86d70>
           └ <silk.flow.FixedOutputFlow object at 0x7f88bef86ce0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f88bef878b0>, <silk.flow._InputExtraction object at 0x7f88bef86c50>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f88bef86d70>
    │       └ 31
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f8b10bbc3b0>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.4392, 0.3216, 0.2235,  ..., 0.0000, 0.0000, 0.0000],
           │    │          │         │                   [0.4588, 0.3451, 0....
           │    │          │         └ <property object at 0x7f8b10bbc360>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.4392, 0.3216, 0.2235,  ..., 0.0000, 0.0000, 0.0000],
           │    │                      [0.4588, 0.3451, 0....
           │    └ <function photometric_reconstruction_loss at 0x7f88c05ce290>
           └ <silk.flow._FunctionCall object at 0x7f88b80e0dc0>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 161, in photometric_reconstruction_loss
    reconstruction_loss = compute_diff(intrinsics, pose_gt_backward, logits[1], logits[0], im_1.clone(), im_0.clone(), depth_map_0, positions.clone(), shape)
                          │            │           │                 │          │          │    │        │    │        │            │         │        └ torch.Size([1, 370, 1226])
                          │            │           │                 │          │          │    │        │    │        │            │         └ <method 'clone' of 'torch._C.TensorBase' objects>
                          │            │           │                 │          │          │    │        │    │        │            └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                          │            │           │                 │          │          │    │        │    │        │                        1.2245e+03, 1.2255e+03],
                          │            │           │                 │          │          │    │        │    │        │                       [5.0000e-01, 5.00...
                          │            │           │                 │          │          │    │        │    │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                          │            │           │                 │          │          │    │        │    │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                          │            │           │                 │          │          │    │        │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                          │            │           │                 │          │          │    │        └ tensor([[[[0.4392, 0.3216, 0.2235,  ..., 0.0000, 0.0000, 0.0000],
                          │            │           │                 │          │          │    │                    [0.4588, 0.3451, 0.2471,  ..., 0.0000, 0.0000, 0....
                          │            │           │                 │          │          │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                          │            │           │                 │          │          └ tensor([[[[0.2000, 0.1961, 0.1569,  ..., 0.0431, 0.0118, 0.0196],
                          │            │           │                 │          │                      [0.2039, 0.2078, 0.1490,  ..., 0.0118, 0.0118, 0....
                          │            │           │                 │          └ tensor([[[[0.7297, 0.7458, 0.7288,  ..., 0.5138, 0.5188, 0.5224],
                          │            │           │                 │                      [0.7091, 0.7111, 0.7145,  ..., 0.5076, 0.5055, 0....
                          │            │           │                 └ tensor([[[[0.7297, 0.7458, 0.7288,  ..., 0.5138, 0.5188, 0.5224],
                          │            │           │                             [0.7091, 0.7111, 0.7145,  ..., 0.5076, 0.5055, 0....
                          │            │           └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                          │            │                     [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                          │            │              ...
                          │            └ tensor([[707.0912,   0.0000, 601.8873],
                          │                      [  0.0000, 707.0912, 183.1104],
                          │                      [  0.0000,   0.0000,   1.0000]], devi...
                          └ <function compute_diff at 0x7f88c05ce320>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 178, in compute_diff
    image_0_warped, valid_points_1, bf_norm = inverse_warp(image_0, depth_map_1, pose_inv,
                                              │            │        │            └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                              │            │        │                      [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                              │            │        │               ...
                                              │            │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                              │            │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                              │            └ tensor([[[[0.2000, 0.1961, 0.1569,  ..., 0.0431, 0.0118, 0.0196],
                                              │                        [0.2039, 0.2078, 0.1490,  ..., 0.0118, 0.0118, 0....
                                              └ <function inverse_warp at 0x7f88c05ce440>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 301, in inverse_warp
    cam_coords = HomographicSampler.pixel2cam(depth, intrinsics.inverse(), positions, shape)  # [B,3,H,W]
                 │                  │         │      │          │          │          └ torch.Size([1, 370, 1226])
                 │                  │         │      │          │          └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                 │                  │         │      │          │                      1.2245e+03, 1.2255e+03],
                 │                  │         │      │          │                     [5.0000e-01, 5.00...
                 │                  │         │      │          └ <method 'inverse' of 'torch._C.TensorBase' objects>
                 │                  │         │      └ tensor([[707.0912,   0.0000, 601.8873],
                 │                  │         │                [  0.0000, 707.0912, 183.1104],
                 │                  │         │                [  0.0000,   0.0000,   1.0000]], devi...
                 │                  │         └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                 │                  │                    [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                 │                  └ <staticmethod(<function HomographicSampler.pixel2cam at 0x7f88c05b2830>)>
                 └ <class 'silk.cv.homography.HomographicSampler'>

  File "/root/silk/silk/cv/homography.py", line 503, in pixel2cam
    w = shape[3]
        └ torch.Size([1, 370, 1226])

IndexError: tuple index out of range
2025-02-27 07:06:54.418 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:09:05.267 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:09:05.268 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:09:08.266 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:09:14.240 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:10:51.315 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:10:51.316 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:10:54.297 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:11:00.441 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (181164), thread 'MainThread' (140173551108544):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f7cb1ee2e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f7cb2952f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f7cb1ee2e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f7cb157a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f7cb1f21d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f7cb1f21e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f7cb1f21cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f7cb13d69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f7cb1e6b2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f7cb1605900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f7cb1f20ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f7cb157a3b0>
    │   └ <property object at 0x7f7cb1f4b100>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f7cb1579750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f7cb15796c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f7cb27bdbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f7cb297e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f7cb01a1cf0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f7a58705060>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f7a775fb9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f7a775fb880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f7a776143a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f7a776145e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>
    │    └ <property object at 0x7f7a776036a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f7a77614670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f7a5850f520>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f7a77614790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f7a77603bf0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>
    │    └ <function Trainer._run_sanity_check at 0x7f7a77614940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f7a7761d0d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f7a5850ea40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f7a775acd30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f7a77611c90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f7a7758f6a0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f7a77611c90>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f7a77449330>
                 │    │          └ <function Loop.run at 0x7f7a7753eb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f7a776131c0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f7a77611c90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f7a77449330>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f7a77599e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f7a776131c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f7a7759a290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f7a776131c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f7a776f3510>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f7a776131c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f7aba7bdb40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f7a5850f520>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f7a5850fd60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f7aba7b1030>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f7a5850f520>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f7b607d85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f7b60418280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f7b607d85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 511, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f7a6206b0a0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f7a60a86e90>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f7a60a86e90>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f7a60a86e90>
           │    │     └ <function Flow.flow_from_tape at 0x7f7a6c684310>
           │    └ <silk.flow.Flow object at 0x7f7a60a86f20>
           └ <silk.flow.FixedOutputFlow object at 0x7f7a60a86e90>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f7a60a87a60>, <silk.flow._InputExtraction object at 0x7f7a60a86e00>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f7a60a86f20>
    │       └ 31
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f7cb26503b0>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.3922, 0.4431, 0.4275,  ..., 0.0000, 0.0000, 0.0000],
           │    │          │         │                   [0.3647, 0.4314, 0....
           │    │          │         └ <property object at 0x7f7cb2650360>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.3922, 0.4431, 0.4275,  ..., 0.0000, 0.0000, 0.0000],
           │    │                      [0.3647, 0.4314, 0....
           │    └ <function photometric_reconstruction_loss at 0x7f7a6206a200>
           └ <silk.flow._FunctionCall object at 0x7f7a587057b0>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 161, in photometric_reconstruction_loss
    reconstruction_loss = compute_diff(intrinsics, pose_gt_backward, logits[1], logits[0], im_1.clone(), im_0.clone(), depth_map_0, positions.clone(), shape)
                          │            │           │                 │          │          │    │        │    │        │            │         │        └ torch.Size([1, 370, 1226])
                          │            │           │                 │          │          │    │        │    │        │            │         └ <method 'clone' of 'torch._C.TensorBase' objects>
                          │            │           │                 │          │          │    │        │    │        │            └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                          │            │           │                 │          │          │    │        │    │        │                        1.2245e+03, 1.2255e+03],
                          │            │           │                 │          │          │    │        │    │        │                       [5.0000e-01, 5.00...
                          │            │           │                 │          │          │    │        │    │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                          │            │           │                 │          │          │    │        │    │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                          │            │           │                 │          │          │    │        │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                          │            │           │                 │          │          │    │        └ tensor([[[[0.3922, 0.4431, 0.4275,  ..., 0.0000, 0.0000, 0.0000],
                          │            │           │                 │          │          │    │                    [0.3647, 0.4314, 0.4353,  ..., 0.0000, 0.0000, 0....
                          │            │           │                 │          │          │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                          │            │           │                 │          │          └ tensor([[[[0.3020, 0.2902, 0.2627,  ..., 0.1216, 0.1098, 0.1059],
                          │            │           │                 │          │                      [0.3137, 0.2980, 0.2549,  ..., 0.1020, 0.1020, 0....
                          │            │           │                 │          └ tensor([[[[0.5381, 0.6250, 0.5582,  ..., 0.3464, 0.3464, 0.3464],
                          │            │           │                 │                      [0.5006, 0.6524, 0.5541,  ..., 0.3464, 0.3464, 0....
                          │            │           │                 └ tensor([[[[0.5381, 0.6250, 0.5582,  ..., 0.3464, 0.3464, 0.3464],
                          │            │           │                             [0.5006, 0.6524, 0.5541,  ..., 0.3464, 0.3464, 0....
                          │            │           └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                          │            │                     [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                          │            │              ...
                          │            └ tensor([[707.0912,   0.0000, 601.8873],
                          │                      [  0.0000, 707.0912, 183.1104],
                          │                      [  0.0000,   0.0000,   1.0000]], devi...
                          └ <function compute_diff at 0x7f7a6206a290>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 178, in compute_diff
    image_0_warped, valid_points_1, bf_norm = inverse_warp(image_0, depth_map_1, pose_inv,
                                              │            │        │            └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                              │            │        │                      [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                              │            │        │               ...
                                              │            │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                              │            │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                              │            └ tensor([[[[0.3020, 0.2902, 0.2627,  ..., 0.1216, 0.1098, 0.1059],
                                              │                        [0.3137, 0.2980, 0.2549,  ..., 0.1020, 0.1020, 0....
                                              └ <function inverse_warp at 0x7f7a6206a3b0>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 304, in inverse_warp
    cam_coords = HomographicSampler.pixel2cam(depth, intrinsics.inverse(), positions, shape.unsqueeze(0))  # [B,3,H,W]
                 │                  │         │      │          │          │          └ torch.Size([1, 370, 1226])
                 │                  │         │      │          │          └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                 │                  │         │      │          │                      1.2245e+03, 1.2255e+03],
                 │                  │         │      │          │                     [5.0000e-01, 5.00...
                 │                  │         │      │          └ <method 'inverse' of 'torch._C.TensorBase' objects>
                 │                  │         │      └ tensor([[707.0912,   0.0000, 601.8873],
                 │                  │         │                [  0.0000, 707.0912, 183.1104],
                 │                  │         │                [  0.0000,   0.0000,   1.0000]], devi...
                 │                  │         └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                 │                  │                    [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                 │                  └ <staticmethod(<function HomographicSampler.pixel2cam at 0x7f7a6207a7a0>)>
                 └ <class 'silk.cv.homography.HomographicSampler'>

AttributeError: 'torch.Size' object has no attribute 'unsqueeze'
2025-02-27 07:11:00.576 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:12:46.451 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:12:46.451 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:12:49.490 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:12:55.829 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:26:13.336 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:26:13.337 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:26:16.295 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:26:22.718 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (184740), thread 'MainThread' (139865199911360):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f34e6bd6e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f34e76baf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f34e6bd6e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f34e62a2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f34e6c11d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f34e6c11e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f34e6c11cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f34e61329e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f34e6b5f2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f34e632d930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f34e6c10ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f34e62a23b0>
    │   └ <property object at 0x7f34e6b8fce0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f34e62a1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f34e62a16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f34e7521bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f34e76e2830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f34e4f99a80>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f328d40cb80>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f32ac3539a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f32ac353880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f32ac3683a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f32ac3685e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>
    │    └ <property object at 0x7f32ac357880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f32ac368670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f328d2a7010>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f32ac368790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f32ac357dd0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>
    │    └ <function Trainer._run_sanity_check at 0x7f32ac368940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f32ac3752b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f328d2a7fd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f32ac304d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f32ac36db70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f32ac2d3880>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f32ac36db70>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f32ac39dd20>
                 │    │          └ <function Loop.run at 0x7f32ac492b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f32ac36f040>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f32ac36db70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f32ac39dd20>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f32ac2f1e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f32ac36f040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f32ac2f2290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f32ac36f040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f32ac44b600>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f32ac36f040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f32ef505b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f328d2a7010>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f328d2a40a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f32ef4fd3a0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f328d2a7010>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f33955d45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f3395214280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f33955d45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 511, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f3296dc7250>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f3295726d10>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f3295726d10>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f3295726d10>
           │    │     └ <function Flow.flow_from_tape at 0x7f32a146c310>
           │    └ <silk.flow.Flow object at 0x7f3295726da0>
           └ <silk.flow.FixedOutputFlow object at 0x7f3295726d10>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f32957278e0>, <silk.flow._InputExtraction object at 0x7f3295726c80>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f3295726da0>
    │       └ 31
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f34e73a85e0>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.3686, 0.4235, 0.4431,  ..., 0.0000, 0.0157, 0.0000],
           │    │          │         │                   [0.3725, 0.4196, 0....
           │    │          │         └ <property object at 0x7f34e73a8590>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.3686, 0.4235, 0.4431,  ..., 0.0000, 0.0157, 0.0000],
           │    │                      [0.3725, 0.4196, 0....
           │    └ <function photometric_reconstruction_loss at 0x7f3296dc63b0>
           └ <silk.flow._FunctionCall object at 0x7f328d40cdc0>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 161, in photometric_reconstruction_loss
    recon_loss += compute_diff(intrinsics, pose_gt_backward, logits[0], im_1.clone(), im_0.clone(), depth_map_0, positions.clone(), shape)
    │             │            │           │                 │          │    │        │    │        │            │         │        └ torch.Size([2, 1, 370, 1226])
    │             │            │           │                 │          │    │        │    │        │            │         └ <method 'clone' of 'torch._C.TensorBase' objects>
    │             │            │           │                 │          │    │        │    │        │            └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
    │             │            │           │                 │          │    │        │    │        │                        1.2245e+03, 1.2255e+03],
    │             │            │           │                 │          │    │        │    │        │                       [5.0000e-01, 5.00...
    │             │            │           │                 │          │    │        │    │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
    │             │            │           │                 │          │    │        │    │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
    │             │            │           │                 │          │    │        │    └ <method 'clone' of 'torch._C.TensorBase' objects>
    │             │            │           │                 │          │    │        └ tensor([[[[0.3686, 0.4235, 0.4431,  ..., 0.0000, 0.0157, 0.0000],
    │             │            │           │                 │          │    │                    [0.3725, 0.4196, 0.5176,  ..., 0.0000, 0.0000, 0....
    │             │            │           │                 │          │    └ <method 'clone' of 'torch._C.TensorBase' objects>
    │             │            │           │                 │          └ tensor([[[[0.0314, 0.0471, 0.0314,  ..., 0.0314, 0.0039, 0.0275],
    │             │            │           │                 │                      [0.0510, 0.0235, 0.0118,  ..., 0.0353, 0.0118, 0....
    │             │            │           │                 └ tensor([[[[0.4076, 0.2046, 0.2320,  ..., 0.4827, 0.5058, 0.4567],
    │             │            │           │                             [0.4476, 0.2107, 0.1847,  ..., 0.4767, 0.4567, 0....
    │             │            │           └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
    │             │            │                     [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
    │             │            │              ...
    │             │            └ tensor([[707.0912,   0.0000, 601.8873],
    │             │                      [  0.0000, 707.0912, 183.1104],
    │             │                      [  0.0000,   0.0000,   1.0000]], devi...
    │             └ <function compute_diff at 0x7f3296dc6440>
    └ 0

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 185, in compute_diff
    io.imsave("folder_for_viz/diff_weighted.png", (255*(logits_1*diff)[0]).permute(1,2,0).detach().cpu().numpy())
    │  │                                                │        └ tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
    │  │                                                │                    [0., 0., 0.,  ..., 0., 0., 0.],
    │  │                                                │                    [0., 0., 0.,  ..., 0., 0., 0.],...
    │  │                                                └ tensor([[[0.4076, 0.2046, 0.2320,  ..., 0.4827, 0.5058, 0.4567],
    │  │                                                           [0.4476, 0.2107, 0.1847,  ..., 0.4767, 0.4567, 0.46...
    │  └ <function imsave at 0x7f32a1581510>
    └ <module 'skimage.io' from '/usr/local/lib/python3.10/dist-packages/skimage/io/__init__.py'>

RuntimeError: The size of tensor a (1208) must match the size of tensor b (1226) at non-singleton dimension 3
2025-02-27 07:26:22.843 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:27:49.791 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:27:49.791 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:27:52.656 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:27:58.932 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (186528), thread 'MainThread' (140097507496384):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f6afd5dae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f6afe07af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f6afd5dae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f6afcc72440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f6afd615d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f6afd615e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f6afd615cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f6afcaf69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f6afd5632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f6afccfd900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f6afd614ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f6afcc723b0>
    │   └ <property object at 0x7f6afd5ffc40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f6afcc71750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f6afcc716c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f6afdee1bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f6afe0a6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f6afc955ab0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f68a1d84b80>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f68c2d339a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f68c2d33880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f68c2d4c3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f68c2d4c5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>
    │    └ <property object at 0x7f68c2d377e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f68c2d4c670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f68a1b78340>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f68c2d4c790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f68c2d37d30>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>
    │    └ <function Trainer._run_sanity_check at 0x7f68c2d4c940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f68c2d51210>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f68a1b79060>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f68c2ce4d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f68c2d55de0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f68c2caf7e0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f68c2d55de0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f68c2b81ff0>
                 │    │          └ <function Loop.run at 0x7f68c2c76b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f68c2d55a20>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f68c2d55de0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f68c2b81ff0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f68c2cd1e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f68c2d55a20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f68c2cd2290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f68c2d55a20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f68c2e2b6a0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f68c2d55a20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f6905eb1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f68a1b78340>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f68a1b78670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f6905e9dad0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f68a1b78340>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f69abed45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f69abb14280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f69abed45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 511, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f68ad547370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f68ac1b3af0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f68ac1b3af0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f68ac1b3af0>
           │    │     └ <function Flow.flow_from_tape at 0x7f68b7e88310>
           │    └ <silk.flow.Flow object at 0x7f68ac1b3580>
           └ <silk.flow.FixedOutputFlow object at 0x7f68ac1b3af0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f68ac1b36a0>, <silk.flow._InputExtraction object at 0x7f68ac1b2b60>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f68ac1b3580>
    │       └ 31
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f6afdd744f0>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.4314, 0.4235, 0.4510,  ..., 0.1765, 0.1961, 0.1843],
           │    │          │         │                   [0.4000, 0.4549, 0....
           │    │          │         └ <property object at 0x7f6afdd744a0>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.4314, 0.4235, 0.4510,  ..., 0.1765, 0.1961, 0.1843],
           │    │                      [0.4000, 0.4549, 0....
           │    └ <function photometric_reconstruction_loss at 0x7f68ad5464d0>
           └ <silk.flow._FunctionCall object at 0x7f68a1d84dc0>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 161, in photometric_reconstruction_loss
    recon_loss += compute_diff(intrinsics, pose_gt_backward, logits[0], im_1.clone(), im_0.clone(), depth_map_0, positions.clone(), shape)
    │             │            │           │                 │          │    │        │    │        │            │         │        └ torch.Size([2, 1, 370, 1226])
    │             │            │           │                 │          │    │        │    │        │            │         └ <method 'clone' of 'torch._C.TensorBase' objects>
    │             │            │           │                 │          │    │        │    │        │            └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
    │             │            │           │                 │          │    │        │    │        │                        1.2245e+03, 1.2255e+03],
    │             │            │           │                 │          │    │        │    │        │                       [5.0000e-01, 5.00...
    │             │            │           │                 │          │    │        │    │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
    │             │            │           │                 │          │    │        │    │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
    │             │            │           │                 │          │    │        │    └ <method 'clone' of 'torch._C.TensorBase' objects>
    │             │            │           │                 │          │    │        └ tensor([[[[0.4314, 0.4235, 0.4510,  ..., 0.1765, 0.1961, 0.1843],
    │             │            │           │                 │          │    │                    [0.4000, 0.4549, 0.4667,  ..., 0.2078, 0.1961, 0....
    │             │            │           │                 │          │    └ <method 'clone' of 'torch._C.TensorBase' objects>
    │             │            │           │                 │          └ tensor([[[[0.1961, 0.1882, 0.1765,  ..., 0.0784, 0.0784, 0.0745],
    │             │            │           │                 │                      [0.2000, 0.1922, 0.1765,  ..., 0.0745, 0.0745, 0....
    │             │            │           │                 └ tensor([[[[0.5045, 0.4744, 0.5195,  ..., 0.5475, 0.5473, 0.6086],
    │             │            │           │                             [0.5134, 0.4762, 0.5303,  ..., 0.4894, 0.6279, 0....
    │             │            │           └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
    │             │            │                     [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
    │             │            │              ...
    │             │            └ tensor([[707.0912,   0.0000, 601.8873],
    │             │                      [  0.0000, 707.0912, 183.1104],
    │             │                      [  0.0000,   0.0000,   1.0000]], devi...
    │             └ <function compute_diff at 0x7f68ad546560>
    └ 0

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 182, in compute_diff
    print(image_1.shape, image_0_warped.shape, (logits_1*diff).shape)
          │       │      │              │       └ tensor([[[0.5045, 0.4744, 0.5195,  ..., 0.5475, 0.5473, 0.6086],
          │       │      │              │                  [0.5134, 0.4762, 0.5303,  ..., 0.4894, 0.6279, 0.57...
          │       │      │              └ <attribute 'shape' of 'torch._C.TensorBase' objects>
          │       │      └ tensor([[[[0., 0., 0.,  ..., 0., 0., 0.],
          │       │                  [0., 0., 0.,  ..., 0., 0., 0.],
          │       │                  [0., 0., 0.,  ..., 0., 0., 0.],...
          │       └ <attribute 'shape' of 'torch._C.TensorBase' objects>
          └ tensor([[[[0.4314, 0.4235, 0.4510,  ..., 0.1765, 0.1961, 0.1843],
                      [0.4000, 0.4549, 0.4667,  ..., 0.2078, 0.1961, 0....

UnboundLocalError: local variable 'diff' referenced before assignment
2025-02-27 07:27:59.058 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:28:32.860 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:28:32.861 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:28:35.874 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:28:41.890 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:30:58.748 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:30:58.749 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:31:01.687 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:31:23.809 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:35:51.635 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:35:51.636 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:35:54.564 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:36:27.962 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:37:51.726 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:37:51.726 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:37:54.667 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:38:00.523 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:40:36.114 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:40:36.115 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:40:39.065 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:40:45.252 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:42:22.777 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:42:22.777 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:42:25.756 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:42:31.938 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:45:16.061 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:45:16.062 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:45:18.979 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:48:53.932 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-27 07:48:53.933 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-27 07:48:53.933 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-27 07:48:57.692 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:48:57.693 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:49:00.640 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:50:18.143 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-27 07:50:18.145 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-27 07:50:18.145 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-27 07:50:21.635 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:50:21.636 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:50:24.677 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:50:33.039 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (205729), thread 'MainThread' (139655879340480):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py", line 1133, in _try_get_data
    data = self._data_queue.get(timeout=timeout)
           │    │           │           └ 5.0
           │    │           └ <function Queue.get at 0x7f0232db3010>
           │    └ <multiprocessing.queues.Queue object at 0x7f01efa097b0>
           └ <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7f01efa08c70>
  File "/usr/lib/python3.10/multiprocessing/queues.py", line 114, in get
    raise Empty
          └ <class '_queue.Empty'>

_queue.Empty


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f042a45ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f042af0af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f042a45ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f0429af2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f042a49dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f042a49de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f042a49dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f0429baa9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f042a3e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f0429b79930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f042a49cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f0429af23b0>
    │   └ <property object at 0x7f042a483c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f0429af1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f0429af16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f042ad75bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f042af36830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f0428789b40>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f01d0cb4be0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f01efbbf9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f01efbbf880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f01efbd83a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f01efbd85e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>
    │    └ <property object at 0x7f01efbc3790>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f01efbd8670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f01d0b16a70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f01efbd8790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f01efbc3ce0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>
    │    └ <function Trainer._run_sanity_check at 0x7f01efbd8940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f01efbe11c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f01d0b17790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f01efb70d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f01efbdda80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f01efb3f740>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f01efbdda80>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f01efa09d50>
                 │    │          └ <function Loop.run at 0x7f01efb02b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f01efbdf370>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f01efbdda80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 140, in run
    self.on_run_start(*args, **kwargs)
    │    │             │       └ {}
    │    │             └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f01efa09d50>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.on_run_start at 0x7f01efb5dd80>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f01efbdf370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 87, in on_run_start
    self._dataloader_iter = _update_dataloader_iter(data_fetcher, self.batch_progress.current.ready)
    │    │                  │                       │             │    │              │       └ 0
    │    │                  │                       │             │    │              └ ProcessedTracker(ready=0, completed=0, started=0, processed=0)
    │    │                  │                       │             │    └ BatchProgress(total=ProcessedTracker(ready=0, completed=0, started=0, processed=0), current=ProcessedTracker(ready=0, complet...
    │    │                  │                       │             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f01efbdf370>
    │    │                  │                       └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f01efa09d50>
    │    │                  └ <function _update_dataloader_iter at 0x7f01efb10550>
    │    └ None
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f01efbdf370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/utilities.py", line 121, in _update_dataloader_iter
    dataloader_iter = enumerate(data_fetcher, batch_idx)
                                │             └ 0
                                └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f01efa09d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/utilities/fetching.py", line 199, in __iter__
    self.prefetching(self.prefetch_batches)
    │    │           │    └ 1
    │    │           └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f01efa09d50>
    │    └ <function DataFetcher.prefetching at 0x7f02d810e680>
    └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f01efa09d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/utilities/fetching.py", line 258, in prefetching
    self._fetch_next_batch()
    │    └ <function DataFetcher._fetch_next_batch at 0x7f02d810e8c0>
    └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f01efa09d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/utilities/fetching.py", line 300, in _fetch_next_batch
    batch = next(self.dataloader_iter)
                 │    └ None
                 └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f01efa09d50>
  File "/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py", line 631, in __next__
    data = self._next_data()
           │    └ <function _MultiProcessingDataLoaderIter._next_data at 0x7f02d860f490>
           └ <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7f01efa08c70>
  File "/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py", line 1329, in _next_data
    idx, data = self._get_data()
    │           │    └ <function _MultiProcessingDataLoaderIter._get_data at 0x7f02d860f400>
    │           └ <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7f01efa08c70>
    └ 44
  File "/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py", line 1295, in _get_data
    success, data = self._try_get_data()
                    │    └ <function _MultiProcessingDataLoaderIter._try_get_data at 0x7f02d860f370>
                    └ <torch.utils.data.dataloader._MultiProcessingDataLoaderIter object at 0x7f01efa08c70>
  File "/usr/local/lib/python3.10/dist-packages/torch/utils/data/dataloader.py", line 1146, in _try_get_data
    raise RuntimeError(f'DataLoader worker (pid(s) {pids_str}) exited unexpectedly') from e

RuntimeError: DataLoader worker (pid(s) 205867, 205930, 205993, 205994, 206119, 206120, 206183, 206246, 206371, 206434, 206497, 206498, 206623, 206686, 206749, 206812, 206875, 206916) exited unexpectedly
2025-02-27 07:50:33.070 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:51:10.539 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:51:10.539 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:51:13.513 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-27 07:51:22.773 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (207416), thread 'MainThread' (140166709412288):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f7b1a1dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f7b1ac92f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f7b1a1dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f7b198aa440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f7b1a21dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f7b1a21de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f7b1a21dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f7b1970e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f7b1a1672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f7b19931930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f7b1a21cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f7b198aa3b0>
    │   └ <property object at 0x7f7b1a246de0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f7b198a9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f7b198a96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f7b1aafdbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f7b1acbe830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f7b1956e0e0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f78c0a2cc40>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f78df92f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f78c0840a00>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f78df92f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f78c0840a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f78c0840a00>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f78df9483a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f78c0840a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f78df9485e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f78c0840a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f78c0840a00>
    │    └ <property object at 0x7f78df9376f0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f78c0840a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f78df948670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f78c0840a00>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f78c0843280>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f78df948790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f78c0840a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f78df9511c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f78c0840a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f78df8e2cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f78c0840580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f78c082d780>
    │    │          └ <function Loop.run at 0x7f78dfa72b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f78c08429e0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f78c0840580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f78c082d780>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f78df8cfac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f78c08429e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f78dfa72b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f78c0843730>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f78c08429e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f78df8cc820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f78c0843730>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f78dfa72b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f78c0840640>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f78c0843730>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f78df8cc0d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f78c0840640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f78df8cc1f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f78c0840640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f78c04fa7a0>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f78df8cc5e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f78c0840640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f78df956290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f78c04fa7a0>
    │         └ <function LightningOptimizer.step at 0x7f7922a7a710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f78c04fa7a0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f78c08f5580 to Trainer at 0x7f78c0840a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f78c04fa7a0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f7922968700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f78c0840ac0>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f78c0841480>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f78c0a58ca0>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f79c8753d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f79c8753d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f78c04fa7a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f78df8bbb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f78c04fa7a0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f78c04fa7a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f78c04fa7a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7f78dfa2f470>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f78c0840640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f7922b19ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f78c0843280>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f78c0841480>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7f7922b09670>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f78c0843280>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f79c8ad85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f79c8718280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f79c8ad85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 505, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f78ca3332e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 491, in _total_loss
    loss += recon_loss
    │       └ tensor(0.0960, device='cuda:1', grad_fn=<AddBackward0>)
    └ None

TypeError: unsupported operand type(s) for +=: 'NoneType' and 'Tensor'
2025-02-27 07:51:22.857 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-27 07:52:32.163 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-27 07:52:32.164 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-27 07:52:35.140 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-28 00:14:52.988 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-28 00:14:52.988 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-28 00:14:52.989 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-03-05 05:31:23.918 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-05 05:31:23.918 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-05 05:31:27.954 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-05 21:53:09.823 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-03-05 21:53:09.824 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-03-05 21:53:09.824 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-03-06 09:33:41.871 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 09:33:41.871 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 09:33:45.064 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 09:34:04.861 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (535036), thread 'MainThread' (140458622972352):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fbf1185ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fbf12306f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fbf1185ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fbf10ef2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fbf1189dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fbf1189de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fbf1189dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fbf10faa830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fbf117e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fbf10f79960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fbf1189cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fbf10ef23b0>
    │   └ <property object at 0x7fbf11883b50>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fbf10ef1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fbf10ef16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fbf12171bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fbf12332830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fbf0fb89930>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fbcb80c4b80>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fbcd6fc39a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbc9fe98a00>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fbcd6fc3880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbc9fe98a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbc9fe98a00>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fbcd6fd83a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbc9fe98a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fbcd6fd85e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbc9fe98a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbc9fe98a00>
    │    └ <property object at 0x7fbcd6fc77e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbc9fe98a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fbcd6fd8670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbc9fe98a00>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fbc9fe99600>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fbcd6fd8790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbc9fe98a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7fbcd6fdd2b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbc9fe98a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7fbcd6f76cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fbc9fe9a3b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fbc9fe85e40>
    │    │          └ <function Loop.run at 0x7fbcd6f06b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fbc9fe98730>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fbc9fe9a3b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fbc9fe85e40>,)
    │    └ <function TrainingEpochLoop.advance at 0x7fbcd6f63ac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fbc9fe98730>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 2
                   │    │          │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
                   │    │          │               [255, 255, 255,  ...,  14,  14,  12],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7fbcd6f06b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fbc9fe9b4c0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fbc9fe98730>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
    │    │                    [255, 255, 255,  ...,  14,  14,  12],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7fbcd6f60820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fbc9fe9b4c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 2
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
              │    │              │               [255, 255, 255,  ...,  14,  14,  12],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7fbcd6f06b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fbc9fe9a9b0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fbc9fe9b4c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
    │    │                    [255, 255, 255,  ...,  14,  14,  12],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7fbcd6f600d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fbc9fe9a9b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7fbcd6f601f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fbc9fe9a9b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbc9fab2b90>
    │    │               │          │        └ 2
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7fbcd6f605e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fbc9fe9a9b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7fbcd6fea290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbc9fab2b90>
    │         └ <function LightningOptimizer.step at 0x7fbd1a116710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbc9fab2b90>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7fbcc2bd6a20 to Trainer at 0x7fbc9fe98a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbc9fab2b90>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7fbdbf4c4700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7fbc9fe992a0>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fbc9fe998d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7fbcb80f4ca0>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7fbdbfe3bd90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7fbdbfe3bd00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbc9fab2b90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7fbcd6f4fb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbc9fab2b90>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbc9fab2b90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbc9fab2b90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
                           │    │                                             [255, 255, 255,  .....
                           │    └ <property object at 0x7fbcd70bf600>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fbc9fe9a9b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
           │    │                    │                          [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7fbd1a1b5ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fbc9fe99600>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fbc9fe998d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
           │    │                  [255, 255, 255,  ...,  14,  14,  12],
           │    │           ...
           │    └ <property object at 0x7fbd1a1a8f40>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fbc9fe99600>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
           │    │                       [255, 255, 255,  ...,  14,  14,  12],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fbdc03bc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
           │                         [255, 255, 255,  ...,  14,  14,  12],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
         │    │                             [255, 255, 255,  ...,  14,  14,  12],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fbdbfe00280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
           │                        [255, 255, 255,  ...,  14,  14,  12],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
           │    │                       [255, 255, 255,  ...,  14,  14,  12],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fbdc03bc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
           │                         [255, 255, 255,  ...,  14,  14,  12],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
             │                                      [255, 255, 255,  ...,  14,  14,  12],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 508, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fbcc1a8f2e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fbcc0453820>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  14,  14, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fbcc0453820>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fbcc0453820>
           │    │     └ <function Flow.flow_from_tape at 0x7fbccc080310>
           │    └ <silk.flow.Flow object at 0x7fbcc04535b0>
           └ <silk.flow.FixedOutputFlow object at 0x7fbcc0453820>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  16,  15,  14],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  14,  14, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  1.0699e-03,  1.0942e-04, -3.2648e-03],
    │       │        │    │            │                [-1.0699e-03,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fbcc0452b30>, <silk.flow._InputExtraction object at 0x7fbcc0452a40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fbcc04535b0>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  1.0699e-03,  1.0942e-04, -3.2648e-03],
              [-1.0699e-03,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fbf12000450>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 4.1350e+02, 8.0712e-01],
           │    │          │         │                 [5.0000e-01, 4.9250e+02, 7.5473e-01]...
           │    │          │         └ <property object at 0x7fbf12000400>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 4.1350e+02, 8.0712e-01],
           │    │                    [5.0000e-01, 4.9250e+02, 7.5473e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fbcb80c5480>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fbcc1a8cdc0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7fbcc1a8d990>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 392, in total_loss
    lse_1, argmax_1, max_1 = _scan_reduce(
                             └ <function _scan_reduce at 0x7fbcc1a8d750>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 19
              │    │          └ tensor([[[ 4.7412e-01,  3.8355e-01, -5.0796e-01,  ..., -1.9938e-01,
              │    │                      -1.8803e-01,  3.7468e-01],
              │    │                     [ 2.1910e-0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7fbc9fa75ea0>
              └ <function _scan_reduce.<locals>.scan at 0x7fbc9fa75f30>

  File "/root/silk/silk/losses/info_nce/loss.py", line 130, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[-0.5912,  0.7063, -0.3223,  ...,  0.0792, -0.2574,  0.5085],
    │          │ │                [-0.2004,  0.4267, -0.2375,  ..., -1.0495, -0.6...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7fbc9fa75ea0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 137, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[ 1.2713e-01, -3.0832e-01, -1.3782e-01,  ...,  3.2663e-02,
                 │       │              -3.9177e-01, -1.3045e-02],
                 │       │             [ 3.2450e-01, ...
                 │       └ tensor([[-0.5912,  0.7063, -0.3223,  ...,  0.0792, -0.2574,  0.5085],
                 │                 [-0.2004,  0.4267, -0.2375,  ..., -1.0495, -0.6...
                 └ <function total_loss.<locals>.reducer at 0x7fbc9fa75870>

  File "/root/silk/silk/losses/info_nce/loss.py", line 363, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-1.8442,  2.2069, -1.0246,  ...,  1.7919,  3.5357,  1.7263],
    │     │                   [-2.8152, -1.6254,  3.5305,  ..., -3.0300, -2.5...
    │     └ <built-in method logsumexp of type object at 0x7fbf0ec59840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 2.01 GiB. GPU 0 has a total capacity of 47.54 GiB of which 2.00 GiB is free. Process 3649441 has 280.00 MiB memory in use. Process 3649981 has 45.23 GiB memory in use. Of the allocated memory 44.51 GiB is allocated by PyTorch, and 425.00 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-03-06 09:34:05.107 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 09:34:46.983 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 09:34:46.984 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 09:34:50.150 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 09:35:01.209 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (538410), thread 'MainThread' (139921111269824):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f41eb572e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f41ebfeef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f41eb572e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f41eac06440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f41eb5b1d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f41eb5b1e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f41eb5b1cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f41eaa6a830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f41eb4f72e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f41eac8d990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f41eb5b0ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f41eac063b0>
    │   └ <property object at 0x7f41eb5db0b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f41eac05750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f41eac056c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f41ebe59bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f41ec01a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f41ea8c59f0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f3f91d8d000>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f3fb0c9b9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f91adfeb0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f3fb0c9b880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f91adfeb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f91adfeb0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f3fb0cb83a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f91adfeb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f3fb0cb85e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f91adfeb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f91adfeb0>
    │    └ <property object at 0x7f3fb0ca34c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f91adfeb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f3fb0cb8670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f91adfeb0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f3f91add870>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f3fb0cb8790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f91adfeb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f3fb0cbcf90>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f91adfeb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f3fb0c4ecb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f3f91adc970>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f3f91a39d80>
    │    │          └ <function Loop.run at 0x7f3fb0ddab00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f3f91adcaf0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f3f91adc970>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f3f91a39d80>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f3fb0c3bac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f3f91adcaf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f3fb0ddab00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f3f91adf9a0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f3f91adcaf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f3fb0c38820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f3f91adf9a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f3fb0ddab00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f3f91ade200>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f3f91adf9a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f3fb0c380d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f3f91ade200>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f3fb0c381f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f3f91ade200>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f3f917eab30>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f3fb0c385e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f3f91ade200>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f3fb0cc2290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f3f917eab30>
    │         └ <function LightningOptimizer.step at 0x7f3ff3e2a710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f3f917eab30>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f3f9a156e30 to Trainer at 0x7f3f91adfeb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f3f917eab30>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f40990d8700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f3f91adc760>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f3f91adcbe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f3f91db8ca0>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f4099a4bd90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f4099a4bd00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f3f917eab30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f3fb0c27b50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f3f917eab30>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f3f917eab30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f3f917eab30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7f3fb0d97470>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f3f91ade200>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f3ff3ec9ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f3f91add870>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f3f91adcbe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7f3ff3ebd170>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f3f91add870>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f4099dd05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f4099a10280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f4099dd05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 508, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f3f9b7232e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f3f9a11ee00>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f3f9a11ee00>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f3f9a11ee00>
           │    │     └ <function Flow.flow_from_tape at 0x7f3fa5e70310>
           │    └ <silk.flow.Flow object at 0x7f3f9a11ee90>
           └ <silk.flow.FixedOutputFlow object at 0x7f3f9a11ee00>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000, -0.0013,  0.0036,  0.0081],
    │       │        │    │            │                [ 0.0013,  1.0000, -0.0011, -0.012...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f3f9a11f9d0>, <silk.flow._InputExtraction object at 0x7f3f9a11ed70>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f3f9a11ee90>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000, -0.0013,  0.0036,  0.0081],
              [ 0.0013,  1.0000, -0.0011, -0.012...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f41ebcec3b0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 3.4500e+01, 7.2591e-01],
           │    │          │         │                 [5.0000e-01, 8.7500e+01, 7.7372e-01]...
           │    │          │         └ <property object at 0x7f41ebcec360>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 3.4500e+01, 7.2591e-01],
           │    │                    [5.0000e-01, 8.7500e+01, 7.7372e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f3f91d8d5a0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f3f9b720dc0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f3f9b721990>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 392, in total_loss
    lse_1, argmax_1, max_1 = _scan_reduce(
                             └ <function _scan_reduce at 0x7f3f9b721750>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 15
              │    │          └ tensor([[[-0.0279,  0.3723,  0.1962,  ..., -0.2032,  0.1471, -0.0603],
              │    │                     [ 0.3737,  0.1493, -0.3237,  ..., -0.0254,  0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7f3f917f5900>
              └ <function _scan_reduce.<locals>.scan at 0x7f3f917f5990>

  File "/root/silk/silk/losses/info_nce/loss.py", line 130, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[ 0.6428,  0.3727,  0.8224,  ..., -0.1034,  0.2101, -0.0958],
    │          │ │                [-0.0626, -0.6078, -0.0100,  ...,  0.2105,  0.3...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7f3f917f5900>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 137, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[ 0.4297,  0.1616, -0.8108,  ..., -0.5344, -0.5930, -0.5471],
                 │       │             [-0.1496, -0.3879, -0.8282,  ..., -0.7252,  0.2...
                 │       └ tensor([[ 0.6428,  0.3727,  0.8224,  ..., -0.1034,  0.2101, -0.0958],
                 │                 [-0.0626, -0.6078, -0.0100,  ...,  0.2105,  0.3...
                 └ <function total_loss.<locals>.reducer at 0x7f3f917f5870>

  File "/root/silk/silk/losses/info_nce/loss.py", line 363, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-4.0129, -3.3147,  3.2610,  ..., -0.8012,  0.2159, -0.1490],
    │     │                   [-5.1500, -3.0398,  4.5096,  ...,  0.9155,  0.1...
    │     └ <built-in method logsumexp of type object at 0x7f41e8859840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 1.61 GiB. GPU 0 has a total capacity of 47.54 GiB of which 79.19 MiB is free. Process 3649441 has 280.00 MiB memory in use. Process 3653382 has 47.16 GiB memory in use. Of the allocated memory 45.27 GiB is allocated by PyTorch, and 1.58 GiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-03-06 09:35:01.797 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 09:35:12.122 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 09:35:12.123 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 09:35:15.284 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 12:13:37.426 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-03-06 12:13:37.427 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-03-06 12:13:37.427 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-03-06 12:13:42.457 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 12:13:42.457 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 12:13:45.332 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 12:16:58.100 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-03-06 12:16:58.101 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-03-06 12:16:58.101 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-03-06 12:22:55.325 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 12:22:55.326 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 12:22:58.198 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 12:27:47.548 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-03-06 12:27:47.549 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-03-06 12:27:47.549 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-03-06 12:27:53.036 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 12:27:53.037 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 12:27:55.915 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 12:31:04.413 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-03-06 12:31:04.414 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-03-06 12:31:04.414 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-03-06 12:31:06.840 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 12:31:06.841 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 12:31:09.843 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 12:31:38.768 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-03-06 12:31:38.769 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-03-06 12:31:38.769 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-03-06 12:40:48.645 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 12:40:48.646 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 12:40:51.578 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 12:40:52.654 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_prev_loss/checkpoints/epoch=9-step=8359.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 12:40:56.943 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 12:41:55.210 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 12:41:55.211 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 12:41:58.156 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 12:41:59.444 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss/checkpoints/epoch=9-step=8359.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 12:42:03.819 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 12:43:35.376 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 12:43:35.377 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 12:43:38.358 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 12:43:39.480 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 12:43:43.852 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 12:55:53.646 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 12:55:53.647 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 12:55:56.590 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 12:55:57.764 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 12:56:03.132 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:17:50.299 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:17:50.299 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:17:53.229 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:17:54.312 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:17:59.070 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:18:41.313 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:18:41.314 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:18:44.267 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:18:45.315 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:18:50.494 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:21:58.103 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:21:58.104 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:22:00.989 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:22:02.321 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:22:07.771 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:23:10.071 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:23:10.072 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:23:13.030 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:23:14.066 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:23:19.832 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:24:30.728 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:24:30.729 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:24:33.643 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:24:34.690 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:24:39.893 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:25:33.358 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:25:33.358 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:25:36.340 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:25:37.578 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:25:43.041 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:27:34.395 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:27:34.396 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:27:37.335 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:27:38.403 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:27:43.677 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:30:46.779 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:30:46.779 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:30:49.742 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:30:50.807 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:30:55.798 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (594356), thread 'MainThread' (139717819781568):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f129636ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f1296e0ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f129636ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f1295a2e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f12963add80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f12963ade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f12963adcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f129588a8c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f12962f32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f1295ab9870>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f12963acee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f1295a2e3b0>
    │   └ <property object at 0x7f1296393c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f1295a2d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f1295a2d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f1296c75bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f1296e3a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f103cb6fbb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f103cbc8f10>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f105badba30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f105badb910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f105baf4430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f105baf4670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>
    │    └ <property object at 0x7f105bae34c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f105baf4700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f105b921e70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f105baf4820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f105bae3a10>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>
    │    └ <function Trainer._run_sanity_check at 0x7f105baf49d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f105baf8ef0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f105b9238e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f105ba8cdc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f105b923310>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f105ba6f470>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f105b923310>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f103cc06110>
                 │    │          └ <function Loop.run at 0x7f105ba1eb90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f105b920250>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f105b923310>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f103cc06110>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f105ba79ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f105b920250>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f105ba7a320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f105b920250>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f105bbd7470>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f105b920250>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f109ecc5bd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f105b921e70>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f105b9220e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f109ecb5580>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f105b921e70>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f1144bd0670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f1144814310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f1144bd0670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f1046347520>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f1044f5f9d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f1044f5f9d0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f1044f5f9d0>
           │    │     └ <function Flow.flow_from_tape at 0x7f1050c8c3a0>
           │    └ <silk.flow.Flow object at 0x7f1044f5f460>
           └ <silk.flow.FixedOutputFlow object at 0x7f1044f5f9d0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f1044f5f580>, <silk.flow._InputExtraction object at 0x7f1044f5ea40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f1044f5f460>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f1296b084f0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 3.9500e+01, 7.4463e-01],
           │    │          │         │                 [5.0000e-01, 4.5500e+01, 7.6952e-01]...
           │    │          │         └ <property object at 0x7f1296b084a0>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 3.9500e+01, 7.4463e-01],
           │    │                    [5.0000e-01, 4.5500e+01, 7.6952e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f103cbc8730>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f1046346290>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f1046346200>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 456, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f10463460e0>

TypeError: sym_corr_cross_entropy() missing 2 required positional arguments: 'corr_1' and 'ghost_sim'
2025-03-06 13:30:55.926 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:31:11.985 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:31:11.986 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:31:14.910 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:31:16.096 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:31:20.697 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (596144), thread 'MainThread' (140430367748544):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fb87d5cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fb87e0bef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fb87d5cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fb87ccd2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fb87d60dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fb87d60de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fb87d60dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fb87cb368c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fb87d5572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fb87cd59990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fb87d60cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fb87ccd23b0>
    │   └ <property object at 0x7fb87d5f3b50>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fb87ccd1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fb87ccd16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fb87df29bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fb87e0ea830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fb642bbc100>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fb621d40f10>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fb642d5fa30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fb642d5f910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fb642d74430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fb642d74670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>
    │    └ <property object at 0x7fb642d63740>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fb642d74700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fb642da87f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fb642d74820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fb642d63c90>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>
    │    └ <function Trainer._run_sanity_check at 0x7fb642d749d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fb642d7d170>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb621d7bee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fb642d10dc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fb621d7a980>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fb642cf36a0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fb621d7a980>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fb642daa1d0>
                 │    │          └ <function Loop.run at 0x7fb642e9eb90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fb621d7bd60>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fb621d7a980>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fb642daa1d0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fb642cfdea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fb621d7bd60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fb642cfe320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fb621d7bd60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fb642e5b560>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fb621d7bd60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fb685efdbd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fb642da87f0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fb642daa680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fb685ef8cc0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fb642da87f0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fb72bfcc670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fb72bc10310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fb72bfcc670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fb62d7f3400>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fb62c14f9d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fb62c14f9d0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fb62c14f9d0>
           │    │     └ <function Flow.flow_from_tape at 0x7fb637e603a0>
           │    └ <silk.flow.Flow object at 0x7fb62c14f460>
           └ <silk.flow.FixedOutputFlow object at 0x7fb62c14f9d0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fb62c14f580>, <silk.flow._InputExtraction object at 0x7fb62c14ea40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fb62c14f460>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fb87ddb8450>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 9.3559e-01],
           │    │          │         │                 [5.0000e-01, 1.5000e+00, 9.4916e-01]...
           │    │          │         └ <property object at 0x7fb87ddb8400>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 9.3559e-01],
           │    │                    [5.0000e-01, 1.5000e+00, 9.4916e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fb621d40730>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fb62d7f2170>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7fb62d7f20e0>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 454, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7fb62d7f1fc0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 352, in sym_corr_cross_entropy
    b = distances

NameError: name 'distances' is not defined
2025-03-06 13:31:20.816 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:35:21.691 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:35:21.692 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:35:24.607 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:35:25.660 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:35:30.000 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:36:07.755 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:36:07.755 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:36:10.742 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:36:11.997 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:36:16.447 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:36:19.763 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:36:19.764 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:36:22.670 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:36:23.734 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:36:28.843 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:37:50.524 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:37:50.525 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:37:53.449 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:37:54.741 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:37:59.178 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:39:11.379 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:39:11.380 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:39:14.386 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:39:15.584 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:39:20.009 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:40:28.093 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:40:28.093 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:40:31.072 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:40:32.283 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:40:36.718 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:40:40.412 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:40:40.412 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:40:43.320 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:40:44.596 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:40:49.053 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 13:40:53.139 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 13:40:53.140 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 13:40:56.074 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 13:40:57.117 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 13:41:01.579 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:04:43.727 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:04:43.728 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:04:46.672 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:04:47.933 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:04:52.665 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:04:58.238 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:04:58.239 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:05:01.158 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:05:02.216 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:05:07.442 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:05:17.364 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:05:17.364 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:05:20.317 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:05:21.370 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:05:26.631 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (615749), thread 'MainThread' (139672751489472):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f0817ee2e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f0818996f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f0817ee2e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f08175ae440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f0817f21d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f0817f21e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f0817f21cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f081741e8c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f0817e6b2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f0817635960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f0817f20ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f08175ae3b0>
    │   └ <property object at 0x7f0817f4b0b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f08175ad750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f08175ad6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f0818801bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f08189c2830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f05c0107bb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f05c0160400>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f05dd667a30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f05dd667910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f05dd480430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f05dd480670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>
    │    └ <property object at 0x7f05dd66f650>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f05dd480700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f05dd4b7970>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f05dd480820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f05dd66fba0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>
    │    └ <function Trainer._run_sanity_check at 0x7f05dd4809d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f05dd489080>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05dd4b6e00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f05dd614dc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f05c019ef20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f05df6bce50>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f05c019ef20>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f05dd4b6500>
                 │    │          └ <function Loop.run at 0x7f05dd5aab90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f05c019f520>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f05c019ef20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f05dd4b6500>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f05dd601ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f05c019f520>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f05dd602320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f05c019f520>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f05dd763470>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f05c019f520>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f0620835bd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f05dd4b7970>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f05dd4b68c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f06208253f0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f05dd4b7970>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f06c67e0670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f06c6424310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f06c67e0670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f05c7f0b370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f05c6ae2d70>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f05c6ae2d70>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f05c6ae2d70>
           │    │     └ <function Flow.flow_from_tape at 0x7f05d28a83a0>
           │    └ <silk.flow.Flow object at 0x7f05c6ae3820>
           └ <silk.flow.FixedOutputFlow object at 0x7f05c6ae2d70>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f05c6ae3640>, <silk.flow._InputExtraction object at 0x7f05c6ae2b90>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f05c6ae3820>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f08186943b0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 9.5624e-01],
           │    │          │         │                 [5.0000e-01, 1.5000e+00, 9.4008e-01]...
           │    │          │         └ <property object at 0x7f0818694360>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 9.5624e-01],
           │    │                    [5.0000e-01, 1.5000e+00, 9.4008e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f05c0161540>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f05c7f0a0e0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f05c7f0a050>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 454, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f05c7f09f30>

  File "/root/silk/silk/losses/info_nce/loss.py", line 325, in sym_corr_cross_entropy
    distances_0 = compute_dist(desc_0, desc_1)
                  │            │       └ tensor([[-0.1210, -0.3318, -0.2201,  ...,  0.1431, -0.2045,  0.0501],
                  │            │                 [-0.0739, -0.3662, -0.0711,  ...,  0.1056, -0.1...
                  │            └ tensor([[ 0.3705, -0.6283, -0.0252,  ...,  0.6939, -0.3010,  0.1734],
                  │                      [ 0.3513, -0.6065,  0.0520,  ...,  0.7303, -0.1...
                  └ <function compute_dist at 0x7f05c7f09750>

  File "/root/silk/silk/matching/mnn.py", line 29, in compute_dist
    distance = 1 - torch.matmul(desc_0, desc_1.T)
                   │     │      │       │      └ <attribute 'T' of 'torch._C.TensorBase' objects>
                   │     │      │       └ tensor([[-0.0271, -0.0744, -0.0494,  ...,  0.0321, -0.0459,  0.0112],
                   │     │      │                 [-0.0166, -0.0821, -0.0159,  ...,  0.0237, -0.0...
                   │     │      └ tensor([[ 0.0831, -0.1409, -0.0057,  ...,  0.1556, -0.0675,  0.0389],
                   │     │                [ 0.0788, -0.1360,  0.0117,  ...,  0.1638, -0.0...
                   │     └ <built-in method matmul of type object at 0x7f0815259840>
                   └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/torch/_tensor.py", line 40, in wrapped
    return f(*args, **kwargs)
           │  │       └ {}
           │  └ (tensor([[ 0.4395,  0.3169,  0.0829,  ..., -0.3741, -0.3532, -0.3436],
           │            [ 0.3805,  0.2667,  0.0440,  ..., -0.3712, -0....
           └ <function Tensor.__rsub__ at 0x7f076479ab90>
  File "/usr/local/lib/python3.10/dist-packages/torch/_tensor.py", line 941, in __rsub__
    return _C._VariableFunctions.rsub(self, other)
           │  │                  │    │     └ 1
           │  │                  │    └ tensor([[ 0.4395,  0.3169,  0.0829,  ..., -0.3741, -0.3532, -0.3436],
           │  │                  │              [ 0.3805,  0.2667,  0.0440,  ..., -0.3712, -0.3...
           │  │                  └ <staticmethod(<built-in method rsub of type object at 0x7f0815259840>)>
           │  └ <torch._C._VariableFunctionsClass object at 0x7f0818afa450>
           └ <module 'torch._C' from '/usr/local/lib/python3.10/dist-packages/torch/_C.cpython-310-x86_64-linux-gnu.so'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 37.25 GiB. GPU 0 has a total capacity of 47.54 GiB of which 9.73 GiB is free. Process 3845851 has 37.78 GiB memory in use. Of the allocated memory 37.46 GiB is allocated by PyTorch, and 18.08 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-03-06 15:05:26.771 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:06:32.793 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:06:32.794 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:06:35.705 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:06:36.744 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:06:41.731 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (617537), thread 'MainThread' (139828874924480):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f2c719dae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f2c7247ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f2c719dae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f2c710a6440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f2c71a15d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f2c71a15e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f2c71a15cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f2c70f028c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f2c719632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f2c71131960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f2c71a14ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f2c710a63b0>
    │   └ <property object at 0x7f2c719ffb50>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f2c710a5750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f2c710a56c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f2c722e5bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f2c724aa830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f2a181dbbb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f2a18234400>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f2a37137a30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f2a37137910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f2a3714c430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f2a3714c670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>
    │    └ <property object at 0x7f2a3713bba0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f2a3714c700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f2a36f861d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f2a3714c820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f2a37150130>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>
    │    └ <function Trainer._run_sanity_check at 0x7f2a3714c9d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f2a371515d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2a36f85000>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f2a370e4dc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f2a18273cd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f2a370b3b50>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f2a18273cd0>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f2a36f84c40>
                 │    │          └ <function Loop.run at 0x7f2a37076b90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f2a182738b0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f2a18273cd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f2a36f84c40>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f2a370d1ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f2a182738b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f2a370d2320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f2a182738b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f2a37227b00>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f2a182738b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f2a7a2b5bd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f2a36f861d0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f2a36f85ea0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f2a7a2a9120>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f2a36f861d0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f2b202d8670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f2b1ff1c310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f2b202d8670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f2a21947400>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f2a205b6c80>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f2a205b6c80>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f2a205b6c80>
           │    │     └ <function Flow.flow_from_tape at 0x7f2a2c28c3a0>
           │    └ <silk.flow.Flow object at 0x7f2a205b6d10>
           └ <silk.flow.FixedOutputFlow object at 0x7f2a205b6c80>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f2a205b7850>, <silk.flow._InputExtraction object at 0x7f2a205b6bf0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f2a205b6d10>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f2c721784f0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 2.9500e+01, 8.2408e-01],
           │    │          │         │                 [5.0000e-01, 3.0500e+01, 8.7040e-01]...
           │    │          │         └ <property object at 0x7f2c721784a0>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 2.9500e+01, 8.2408e-01],
           │    │                    [5.0000e-01, 3.0500e+01, 8.7040e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f2a18235510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f2a21946170>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f2a219460e0>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 454, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f2a21945fc0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 325, in sym_corr_cross_entropy
    distances_0 = compute_dist(desc_0.to("cuda:1"), desc_1.to("cuda:1"))
                  │            │      │             │      └ <method 'to' of 'torch._C.TensorBase' objects>
                  │            │      │             └ tensor([[-0.3243,  0.0061,  0.3190,  ..., -0.0318,  0.2319,  0.5727],
                  │            │      │                       [-0.0565, -0.1415,  0.3081,  ..., -0.0463,  0.2...
                  │            │      └ <method 'to' of 'torch._C.TensorBase' objects>
                  │            └ tensor([[ 0.1995,  0.4397, -0.4080,  ..., -0.2381,  0.0040, -0.2545],
                  │                      [ 0.4331,  0.4362, -0.3956,  ..., -0.1237,  0.0...
                  └ <function compute_dist at 0x7f2a219457e0>

  File "/root/silk/silk/matching/mnn.py", line 29, in compute_dist
    distance = 1 - torch.matmul(desc_0, desc_1.T)
                   │     │      │       │      └ <attribute 'T' of 'torch._C.TensorBase' objects>
                   │     │      │       └ tensor([[-0.0727,  0.0014,  0.0715,  ..., -0.0071,  0.0520,  0.1284],
                   │     │      │                 [-0.0127, -0.0317,  0.0691,  ..., -0.0104,  0.0...
                   │     │      └ tensor([[ 0.0447,  0.0986, -0.0915,  ..., -0.0534,  0.0009, -0.0571],
                   │     │                [ 0.0971,  0.0978, -0.0887,  ..., -0.0277,  0.0...
                   │     └ <built-in method matmul of type object at 0x7f2c6ec59840>
                   └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/torch/_tensor.py", line 40, in wrapped
    return f(*args, **kwargs)
           │  │       └ {}
           │  └ (tensor([[ 0.1210,  0.1520,  0.1786,  ..., -0.1224, -0.1285, -0.1583],
           │            [ 0.0817,  0.1231,  0.1476,  ..., -0.1600, -0....
           └ <function Tensor.__rsub__ at 0x7f2bfed96b90>
  File "/usr/local/lib/python3.10/dist-packages/torch/_tensor.py", line 941, in __rsub__
    return _C._VariableFunctions.rsub(self, other)
           │  │                  │    │     └ 1
           │  │                  │    └ tensor([[ 0.1210,  0.1520,  0.1786,  ..., -0.1224, -0.1285, -0.1583],
           │  │                  │              [ 0.0817,  0.1231,  0.1476,  ..., -0.1600, -0.1...
           │  │                  └ <staticmethod(<built-in method rsub of type object at 0x7f2c6ec59840>)>
           │  └ <torch._C._VariableFunctionsClass object at 0x7f2c725e2450>
           └ <module 'torch._C' from '/usr/local/lib/python3.10/dist-packages/torch/_C.cpython-310-x86_64-linux-gnu.so'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 37.25 GiB. GPU 1 has a total capacity of 47.54 GiB of which 8.73 GiB is free. Process 3848614 has 38.79 GiB memory in use. Of the allocated memory 37.67 GiB is allocated by PyTorch, and 462.78 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-03-06 15:06:41.881 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:09:30.224 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:09:30.225 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:09:33.177 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:09:34.254 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:09:38.839 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (619325), thread 'MainThread' (140712846901696):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7ffa426e2e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7ffa431def80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7ffa426e2e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7ffa41de6440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7ffa42721d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7ffa42721e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7ffa42721cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7ffa41c6a8c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7ffa4266b2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7ffa41e71900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7ffa42720ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7ffa41de63b0>
    │   └ <property object at 0x7ffa4274b0b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7ffa41de5750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7ffa41de56c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7ffa43049bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7ffa4320a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7ff7f1153bb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7ff7f11acf10>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7ff807eb3a30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7ff807eb3910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7ff807ecc430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7ff807ecc670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>
    │    └ <property object at 0x7ff807ebb6a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7ff807ecc700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7ff807cf4e20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7ff807ecc820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7ff807ebbbf0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>
    │    └ <function Trainer._run_sanity_check at 0x7ff807ecc9d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7ff807ed10d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff7f11ead40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7ff807e64dc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7ff7f11ebdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7ff80d1ac130>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7ff7f11ebdc0>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7ff807cf7eb0>
                 │    │          └ <function Loop.run at 0x7ff807df6b90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7ff7f11ebca0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7ff7f11ebdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7ff807cf7eb0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7ff807e51ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7ff7f11ebca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7ff807e52320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7ff7f11ebca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7ff807fb3510>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7ff7f11ebca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7ff84b0cdbd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7ff807cf4e20>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7ff807cf4a90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7ff84b0c4ef0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7ff807cf4e20>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7ff8f0fe0670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7ff8f0c24310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7ff8f0fe0670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7ff7f274f370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7ff7f133b9d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7ff7f133b9d0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7ff7f133b9d0>
           │    │     └ <function Flow.flow_from_tape at 0x7ff7fd0983a0>
           │    └ <silk.flow.Flow object at 0x7ff7f133b460>
           └ <silk.flow.FixedOutputFlow object at 0x7ff7f133b9d0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7ff7f133b580>, <silk.flow._InputExtraction object at 0x7ff7f133aa40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7ff7f133b460>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7ffa42edc3b0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 1.5000e+00, 8.5472e-01],
           │    │          │         │                 [5.0000e-01, 2.5000e+00, 9.0410e-01]...
           │    │          │         └ <property object at 0x7ffa42edc360>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 1.5000e+00, 8.5472e-01],
           │    │                    [5.0000e-01, 2.5000e+00, 9.0410e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7ff7f11ac790>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7ff7f274e0e0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7ff7f274e050>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 454, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7ff7f274df30>

  File "/root/silk/silk/losses/info_nce/loss.py", line 327, in sym_corr_cross_entropy
    a = distances_0[query_corr_0]
        │           └ tensor([False, False, False,  ..., False, False, False], device='cuda:0')
        └ tensor([[1.4733e-05, 1.4006e-05, 1.3560e-05,  ..., 1.3732e-05, 1.4504e-05,
                   1.5150e-05],
                  [1.4775e-05, 1.4059e...

RuntimeError: indices should be either on cpu or on the same device as the indexed tensor (cuda:1)
2025-03-06 15:09:38.991 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:10:25.274 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:10:25.275 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:10:28.250 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:10:29.316 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:10:33.989 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:12:50.882 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:12:50.883 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:12:53.846 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:12:54.916 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:12:59.984 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (622901), thread 'MainThread' (140589414101440):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fdd8545ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fdd85f2af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fdd8545ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fdd84b1e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fdd8549dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fdd8549de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fdd8549dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fdd84bd68c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fdd853e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fdd84ba5990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fdd8549cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fdd84b1e3b0>
    │   └ <property object at 0x7fdd85483c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fdd84b1d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fdd84b1d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fdd85d95bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fdd85f56830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fdb2c48bbb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fdb2c4e4460>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fdb4abefa30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fdb4abef910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fdb4ac04430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fdb4ac04670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>
    │    └ <property object at 0x7fdb4abf3740>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fdb4ac04700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fdb4aa33730>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fdb4ac04820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fdb4abf3c90>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>
    │    └ <function Trainer._run_sanity_check at 0x7fdb4ac049d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fdb4ac11170>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fdb4aa32f80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fdb4aba0dc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fdb2c520040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fdb4ab836f0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fdb2c520040>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fdb4aa32440>
                 │    │          └ <function Loop.run at 0x7fdb4ab32b90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdb2c522680>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fdb2c520040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fdb4aa32440>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fdb4ab8dea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdb2c522680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fdb4ab8e320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdb2c522680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fdb4aceb510>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fdb2c522680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fdb8dda9bd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fdb4aa33730>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fdb4aa30190>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fdb8dd9ce00>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fdb4aa33730>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fdc33fb8670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fdc33a00310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fdc33fb8670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fdb3568f400>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fdb34076d40>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fdb34076d40>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fdb34076d40>
           │    │     └ <function Flow.flow_from_tape at 0x7fdb3fc843a0>
           │    └ <silk.flow.Flow object at 0x7fdb34076dd0>
           └ <silk.flow.FixedOutputFlow object at 0x7fdb34076d40>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fdb34077910>, <silk.flow._InputExtraction object at 0x7fdb34076cb0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fdb34076dd0>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fdd85c24450>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 9.3648e-01],
           │    │          │         │                 [5.0000e-01, 1.5000e+00, 9.4976e-01]...
           │    │          │         └ <property object at 0x7fdd85c24400>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 9.3648e-01],
           │    │                    [5.0000e-01, 1.5000e+00, 9.4976e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fdb2c4e55a0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fdb3568e170>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7fdb3568e0e0>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 459, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7fdb3568dfc0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 328, in sym_corr_cross_entropy
    idx = corr_0[0]
          └ tensor([], device='cuda:0', dtype=torch.int64)

IndexError: index 0 is out of bounds for dimension 0 with size 0
2025-03-06 15:13:00.100 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:13:04.743 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:13:04.744 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:13:07.644 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:13:08.696 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:13:13.848 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (624626), thread 'MainThread' (140086421406144):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f6868972e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f68693f6f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f6868972e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f6868006440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f68689b1d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f68689b1e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f68689b1cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f6867e768c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f68688f72e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f686808d960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f68689b0ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f68680063b0>
    │   └ <property object at 0x7f68689db0b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f6868005750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f68680056c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f6869261bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f6869422830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f661013bbb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f66101945e0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f662e0aba30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f662e0ab910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f662e0c4430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f662e0c4670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>
    │    └ <property object at 0x7f662e0af7e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f662e0c4700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f662deee680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f662e0c4820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f662e0afd30>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>
    │    └ <function Trainer._run_sanity_check at 0x7f662e0c49d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f662e0c9210>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f662deef2b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f662e05cdc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f66101d3430>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f662e02b7e0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f66101d3430>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f662deed0f0>
                 │    │          └ <function Loop.run at 0x7f662e1eab90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f66101d0490>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f66101d3430>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f662deed0f0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f662e045ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f66101d0490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f662e046320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f66101d0490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f662e1a3510>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f66101d0490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f66712c5bd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f662deee680>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f662deef790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f66712b9530>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f662deee680>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f67171d4670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f6716e14310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f67171d4670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f6618b27370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f6617526dd0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f6617526dd0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f6617526dd0>
           │    │     └ <function Flow.flow_from_tape at 0x7f66232743a0>
           │    └ <silk.flow.Flow object at 0x7f6617526e60>
           └ <silk.flow.FixedOutputFlow object at 0x7f6617526dd0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f66175279a0>, <silk.flow._InputExtraction object at 0x7f6617526d40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f6617526e60>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f68690f43b0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 9.6135e-01],
           │    │          │         │                 [5.0000e-01, 1.5000e+00, 9.7529e-01]...
           │    │          │         └ <property object at 0x7f68690f4360>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 9.6135e-01],
           │    │                    [5.0000e-01, 1.5000e+00, 9.7529e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f66101955a0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f6618b260e0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f6618b26050>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 459, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f6618b25f30>

  File "/root/silk/silk/losses/info_nce/loss.py", line 328, in sym_corr_cross_entropy
    idx = corr_0[0]
          └ tensor([], device='cuda:0', dtype=torch.int64)

IndexError: index 0 is out of bounds for dimension 0 with size 0
2025-03-06 15:13:13.967 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:13:16.202 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:13:16.203 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:13:19.165 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:13:20.468 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:13:25.033 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (626414), thread 'MainThread' (140280908943808):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f95b0edee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f95b19baf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f95b0edee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f95b05e2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f95b0f19d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f95b0f19e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f95b0f19cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f95b043e8c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f95b0e672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f95b066d960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f95b0f18ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f95b05e23b0>
    │   └ <property object at 0x7f95b0f46e80>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f95b05e1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f95b05e16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f95b1821bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f95b19e6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f9358107bb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f9358160f10>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f9376683a30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f9376683910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f937649c430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f937649c670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>
    │    └ <property object at 0x7f937668b6a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f937649c700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f93764cc130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f937649c820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f937668bbf0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>
    │    └ <function Trainer._run_sanity_check at 0x7f937649c9d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f93764a10d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f93764cc3a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f9376634dc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f93764cfb50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f9376617600>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f93764cfb50>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f935819ff40>
                 │    │          └ <function Loop.run at 0x7f93765c6b90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f93764ce440>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f93764cfb50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f935819ff40>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f9376621ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f93764ce440>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f9376622320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f93764ce440>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f93767834c0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f93764ce440>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f93b9821bd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f93764cc130>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f93764cfeb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f93b98117b0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f93764cc130>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f945f7dc670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f945f420310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f945f7dc670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f9360f13370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f935fae3a60>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f935fae3a60>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f935fae3a60>
           │    │     └ <function Flow.flow_from_tape at 0x7f936b8a83a0>
           │    └ <silk.flow.Flow object at 0x7f935fae34f0>
           └ <silk.flow.FixedOutputFlow object at 0x7f935fae3a60>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f935fae3610>, <silk.flow._InputExtraction object at 0x7f935fae2ad0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f935fae34f0>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f95b16b44f0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 8.8262e-01],
           │    │          │         │                 [5.0000e-01, 1.5000e+00, 8.1365e-01]...
           │    │          │         └ <property object at 0x7f95b16b44a0>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 8.8262e-01],
           │    │                    [5.0000e-01, 1.5000e+00, 8.1365e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f9358161420>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f9360f120e0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f9360f12050>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 459, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f9360f11f30>

  File "/root/silk/silk/losses/info_nce/loss.py", line 328, in sym_corr_cross_entropy
    idx = corr_0[0]
          └ tensor([], device='cuda:0', dtype=torch.int64)

IndexError: index 0 is out of bounds for dimension 0 with size 0
2025-03-06 15:13:25.149 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:13:29.040 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:13:29.041 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:13:31.985 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:13:33.057 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:13:37.480 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (628202), thread 'MainThread' (139757495706048):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f1bd316ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f1bd3bfef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f1bd316ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f1bd27fe440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f1bd31a9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f1bd31a9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f1bd31a9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f1bd266e8c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f1bd30ef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f1bd2885930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f1bd31a8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f1bd27fe3b0>
    │   └ <property object at 0x7f1bd38321b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f1bd27fd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f1bd27fd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f1bd3a65bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f1bd3c26830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f1979953bb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f19799ac400>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f199889fa30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f199889f910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f19988b4430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f19988b4670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>
    │    └ <property object at 0x7f19988a76a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f19988b4700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f19986e6e60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f19988b4820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f19988a7bf0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>
    │    └ <function Trainer._run_sanity_check at 0x7f19988b49d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f19988bd0d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f19986e5450>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f1998850dc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f19799ea3e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f19988336a0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f19799ea3e0>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f19986e5c00>
                 │    │          └ <function Loop.run at 0x7f19989deb90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f19799eaf80>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f19799ea3e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f19986e5c00>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f1998839ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f19799eaf80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f199883a320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f19799eaf80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f1998997510>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f19799eaf80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f19dba09bd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f19986e6e60>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f19986e6380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f19db9fcea0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f19986e6e60>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f1a819c8670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f1a8160c310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f1a819c8670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f198333b370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f1981d3edd0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f1981d3edd0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f1981d3edd0>
           │    │     └ <function Flow.flow_from_tape at 0x7f198da743a0>
           │    └ <silk.flow.Flow object at 0x7f1981d3f880>
           └ <silk.flow.FixedOutputFlow object at 0x7f1981d3edd0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f1981d3f6a0>, <silk.flow._InputExtraction object at 0x7f1981d3ebf0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f1981d3f880>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f1bd38ec5e0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 8.5639e-01],
           │    │          │         │                 [5.0000e-01, 1.5000e+00, 7.7258e-01]...
           │    │          │         └ <property object at 0x7f1bd38ec590>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 8.5639e-01],
           │    │                    [5.0000e-01, 1.5000e+00, 7.7258e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f19799ad5a0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f198333a0e0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f198333a050>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 459, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f1983339f30>

  File "/root/silk/silk/losses/info_nce/loss.py", line 328, in sym_corr_cross_entropy
    idx = corr_0[0]
          └ tensor([], device='cuda:0', dtype=torch.int64)

IndexError: index 0 is out of bounds for dimension 0 with size 0
2025-03-06 15:13:37.598 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:13:40.165 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:13:40.165 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:13:43.124 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:13:44.187 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:13:49.338 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (629990), thread 'MainThread' (140028013294016):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f5acf2cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f5acfda2f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f5acf2cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f5ace99a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f5acf30dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f5acf30de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f5acf30dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f5ace8128c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f5acf2572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f5acea21900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f5acf30cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f5ace99a3b0>
    │   └ <property object at 0x7f5acf2f3ab0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f5ace999750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f5ace9996c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f5acfc0dbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f5acfdce830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f587dd63bb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f587ddb8f10>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f5894a9ba30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f5894a9b910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f58948ac430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f58948ac670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>
    │    └ <property object at 0x7f5894a9f740>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f58948ac700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f58948e0880>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f58948ac820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f5894a9fc90>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>
    │    └ <function Trainer._run_sanity_check at 0x7f58948ac9d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f58948b1170>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58948e00a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f5894a4cdc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f58948e1a80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f5894a2f6a0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f58948e1a80>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f587ddf78e0>
                 │    │          └ <function Loop.run at 0x7f58949deb90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f58948e3820>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f58948e1a80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f587ddf78e0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f5894a39ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f58948e3820>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f5894a3a320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f58948e3820>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f5894b935b0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f58948e3820>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f58d7c15bd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f58948e0880>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f58948e2d40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f58d7c0cd10>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f58948e0880>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f597dbcc670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f597d810310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f597dbcc670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f587f37f370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f587df478b0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f587df478b0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f587df478b0>
           │    │     └ <function Flow.flow_from_tape at 0x7f5889cb43a0>
           │    └ <silk.flow.Flow object at 0x7f587df47340>
           └ <silk.flow.FixedOutputFlow object at 0x7f587df478b0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f587df47460>, <silk.flow._InputExtraction object at 0x7f587df46920>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f587df47340>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f5acfa9c450>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 9.5582e-01],
           │    │          │         │                 [5.0000e-01, 1.5000e+00, 9.4826e-01]...
           │    │          │         └ <property object at 0x7f5acfa9c400>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.0000e-01, 9.5582e-01],
           │    │                    [5.0000e-01, 1.5000e+00, 9.4826e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f587ddb8550>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f587f37e0e0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f587f37e050>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 459, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f587f37df30>

  File "/root/silk/silk/losses/info_nce/loss.py", line 328, in sym_corr_cross_entropy
    idx = corr_0[0]
          └ tensor([], device='cuda:0', dtype=torch.int64)

IndexError: index 0 is out of bounds for dimension 0 with size 0
2025-03-06 15:13:49.453 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:13:52.761 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:13:52.762 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:13:55.670 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:13:56.716 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:14:01.680 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (631778), thread 'MainThread' (140621267313088):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fe4efdd6e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fe4f08caf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fe4efdd6e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fe4ef4da440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fe4efe11d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fe4efe11e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fe4efe11cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fe4ef33e8c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fe4efd5f2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fe4ef565990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fe4efe10ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fe4ef4da3b0>
    │   └ <property object at 0x7fe4efd8fce0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fe4ef4d9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fe4ef4d96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fe4f0731bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fe4f08f2830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fe29ea6bbb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fe296658f10>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fe2b5573a30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fe2b5573910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fe2b5588430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fe2b5588670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>
    │    └ <property object at 0x7fe2b557b5b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fe2b5588700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fe2b53b6bf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fe2b5588820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fe2b557bb00>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>
    │    └ <function Trainer._run_sanity_check at 0x7fe2b55889d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fe2b558cfe0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe296696620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fe2b5520dc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fe296696320>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fe2b5507510>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fe296696320>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fe2b53b76a0>
                 │    │          └ <function Loop.run at 0x7fe2b56b2b90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fe296695a50>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fe296696320>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fe2b53b76a0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fe2b550dea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fe296695a50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fe2b550e320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fe296695a50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fe2b566f330>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fe296695a50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fe2f87bdbd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fe2b53b6bf0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fe2b53b6680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fe2f87b13f0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fe2b53b6bf0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fe39e7d4670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fe39e418310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fe39e7d4670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fe29ffff370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fe29e9db9a0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fe29e9db9a0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fe29e9db9a0>
           │    │     └ <function Flow.flow_from_tape at 0x7fe2aa6743a0>
           │    └ <silk.flow.Flow object at 0x7fe29e9db430>
           └ <silk.flow.FixedOutputFlow object at 0x7fe29e9db9a0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fe29e9db550>, <silk.flow._InputExtraction object at 0x7fe29e9daa10>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fe29e9db430>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fe4f05b85e0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.5000e+00, 7.8421e-01],
           │    │          │         │                 [5.0000e-01, 6.5000e+00, 8.4060e-01]...
           │    │          │         └ <property object at 0x7fe4f05b8590>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 5.5000e+00, 7.8421e-01],
           │    │                    [5.0000e-01, 6.5000e+00, 8.4060e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fe296658730>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fe29fffe0e0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7fe29fffe050>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 459, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7fe29fffdf30>

  File "/root/silk/silk/losses/info_nce/loss.py", line 328, in sym_corr_cross_entropy
    idx = corr_0[0]
          └ tensor([], device='cuda:0', dtype=torch.int64)

IndexError: index 0 is out of bounds for dimension 0 with size 0
2025-03-06 15:14:01.798 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:14:10.652 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:14:10.653 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:14:13.563 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:14:14.599 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:14:19.872 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (633566), thread 'MainThread' (140229649678784):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f89c1a6ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f89c2516f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f89c1a6ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f89c112e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f89c1aadd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f89c1aade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f89c1aadcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f89c0f8a8c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f89c19f32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f89c11bd8a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f89c1aacee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f89c112e3b0>
    │   └ <property object at 0x7f89c1ad7100>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f89c112d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f89c112d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f89c2381bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f89c2542830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f8768263bb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f87682bcf10>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f87871cba30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f87871cb910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f87871e0430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f87871e0670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>
    │    └ <property object at 0x7f87871cf790>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f87871e0700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8787016bf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f87871e0820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f87871cfce0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>
    │    └ <function Trainer._run_sanity_check at 0x7f87871e09d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f87871e51c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f87682fa620>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f878717cdc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f87682fa320>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f878715f6a0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f87682fa320>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f87870176a0>
                 │    │          └ <function Loop.run at 0x7f878710eb90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f87682f9a50>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f87682fa320>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f87870176a0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f8787169ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f87682f9a50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f878716a320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f87682f9a50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f87872c74c0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f87682f9a50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f87ca3b9bd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8787016bf0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f8787016680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f87ca3b0ea0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8787016bf0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f88703cc670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f8870010310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f88703cc670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f8771c87370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f87706539a0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f87706539a0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f87706539a0>
           │    │     └ <function Flow.flow_from_tape at 0x7f877c2843a0>
           │    └ <silk.flow.Flow object at 0x7f8770653430>
           └ <silk.flow.FixedOutputFlow object at 0x7f87706539a0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f8770653550>, <silk.flow._InputExtraction object at 0x7f8770652a10>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f8770653430>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f89c22143b0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 4.1500e+01, 8.1371e-01],
           │    │          │         │                 [5.0000e-01, 4.2500e+01, 9.3583e-01]...
           │    │          │         └ <property object at 0x7f89c2214360>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 4.1500e+01, 8.1371e-01],
           │    │                    [5.0000e-01, 4.2500e+01, 9.3583e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f87682bc730>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f8771c860e0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f8771c86050>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 459, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f8771c85f30>

  File "/root/silk/silk/losses/info_nce/loss.py", line 328, in sym_corr_cross_entropy
    idx = corr_0[0]
          └ tensor([], device='cuda:0', dtype=torch.int64)

IndexError: index 0 is out of bounds for dimension 0 with size 0
2025-03-06 15:14:19.991 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:14:23.412 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:14:23.413 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:14:26.410 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:14:27.633 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:14:32.446 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:22:23.103 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:22:23.104 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:22:26.021 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:22:27.322 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:22:32.244 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (637079), thread 'MainThread' (139961387180480):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f4b4bf6ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f4b4ca0ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f4b4bf6ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f4b4b5fe440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f4b4bfa9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f4b4bfa9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f4b4bfa9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f4b4b4828c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f4b4beef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f4b4b689900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f4b4bfa8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f4b4b5fe3b0>
    │   └ <property object at 0x7f4b4c6421b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f4b4b5fd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f4b4b5fd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f4b4c875bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f4b4ca36830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f48fab9fbb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f48f2780460>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f491169ba30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f491169b910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f49116b4430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f49116b4670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>
    │    └ <property object at 0x7f49116a3470>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f49116b4700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f49116e69e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f49116b4820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f49116a39c0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>
    │    └ <function Trainer._run_sanity_check at 0x7f49116b49d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f49116bcea0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f49116e74f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f491164cdc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f48f27bfaf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f491618c130>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f48f27bfaf0>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f49116e5450>
                 │    │          └ <function Loop.run at 0x7f49117dab90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f48f27bfbe0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f48f27bfaf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f49116e5450>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f4911639ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f48f27bfbe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f491163a320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f48f27bfbe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f4911797330>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f48f27bfbe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f49548bdbd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f49116e69e0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f49116e5c00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f49548ad760>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f49116e69e0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f49fa7cc670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f49fa410310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f49fa7cc670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f48fc10f400>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f48fab12d40>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f48fab12d40>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f48fab12d40>
           │    │     └ <function Flow.flow_from_tape at 0x7f49068603a0>
           │    └ <silk.flow.Flow object at 0x7f48fab12dd0>
           └ <silk.flow.FixedOutputFlow object at 0x7f48fab12d40>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f48fab13910>, <silk.flow._InputExtraction object at 0x7f48fab12cb0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f48fab12dd0>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f4b4c6fc5e0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 3.7500e+01, 7.6104e-01],
           │    │          │         │                 [5.0000e-01, 3.8500e+01, 8.7922e-01]...
           │    │          │         └ <property object at 0x7f4b4c6fc590>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 3.7500e+01, 7.6104e-01],
           │    │                    [5.0000e-01, 3.8500e+01, 8.7922e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f48f27815a0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f48fc10dbd0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f48fc10db40>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 379, in total_loss
    softmax_1 = _scan_reduce(
                └ <function _scan_reduce at 0x7f48fc10d900>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 13
              │    │          └ tensor([[[ 0.1131, -0.2832, -0.0322,  ...,  0.4006, -0.1116, -0.1903],
              │    │                     [ 0.2387, -0.4677,  0.0490,  ...,  0.4832, -0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7f48f05955a0>
              └ <function _scan_reduce.<locals>.scan at 0x7f48f0595630>

  File "/root/silk/silk/losses/info_nce/loss.py", line 133, in scan
    return carry, torch.stack(ys, dim=1)
           │      │     │     └ [tensor([[3.9340e-04, 1.1158e-07, 5.0514e-09,  ..., 1.0280e-09, 1.2187e-09,
           │      │     │                1.5566e-09],
           │      │     │               [3.9158e-03, 2.0998...
           │      │     └ <built-in method stack of type object at 0x7f4b49259840>
           │      └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
           └ None

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 18.31 GiB. GPU 0 has a total capacity of 47.54 GiB of which 10.43 GiB is free. Process 3880094 has 37.08 GiB memory in use. Of the allocated memory 36.76 GiB is allocated by PyTorch, and 19.36 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-03-06 15:22:32.639 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:52:40.009 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:52:40.010 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:52:42.940 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:52:44.227 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:52:48.759 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 15:58:12.660 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 15:58:12.661 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 15:58:15.626 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 15:58:16.696 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 15:58:34.138 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-03-06 15:58:34.139 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-03-06 15:58:34.139 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-03-06 16:02:22.917 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:02:22.918 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:02:25.850 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:02:26.928 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:02:31.991 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:04:12.952 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:04:12.952 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:04:15.915 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:04:16.979 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:04:21.987 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:04:31.865 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:04:31.866 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:04:34.823 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:04:35.895 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:04:41.010 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:04:44.091 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:04:44.092 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:04:47.015 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:04:48.274 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:04:53.325 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:04:58.320 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:04:58.321 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:05:01.321 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:05:02.392 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:05:07.407 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:15:26.836 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:15:26.837 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:15:29.775 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:15:31.055 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:15:36.078 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:20:35.362 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:20:35.363 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:20:38.302 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:20:39.423 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:20:44.480 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (654694), thread 'MainThread' (140145423098304):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f76255d6e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f7626062f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f76255d6e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f7624c6e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f7625615d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f7625615e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f7625615cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f7624ad28c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f762555f2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f7624cfd8d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f7625614ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f7624c6e3b0>
    │   └ <property object at 0x7f76255fbba0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f7624c6d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f7624c6d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f7625ec9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f762608a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f73c5d27bb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f73c5d84400>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f73ead1ba30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f73ead1b910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f73ead30430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f73ead30670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>
    │    └ <property object at 0x7f73ead1f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f73ead30700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f73eab669e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f73ead30820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f73ead1fdd0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>
    │    └ <function Trainer._run_sanity_check at 0x7f73ead309d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f73ead392b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f73eab67f40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f73eacccdc0>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f73eab67280>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f73eac97830>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f73eab67280>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f73c5dbe260>
                 │    │          └ <function Loop.run at 0x7f73eac5eb90>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f73eab64a30>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f73eab67280>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f73c5dbe260>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f73eacb5ea0>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f73eab64a30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f73eacb6320>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f73eab64a30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f73eae13740>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f73eab64a30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f742deb9bd0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f73eab669e0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f73eab67640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f742dea9940>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f73eab669e0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f74d3dd0670>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f74d3a10310>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f74d3dd0670>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 523, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f73d554b370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f73d418ed40>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f73d418ed40>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f73d418ed40>
           │    │     └ <function Flow.flow_from_tape at 0x7f73dfe903a0>
           │    └ <silk.flow.Flow object at 0x7f73d418f7f0>
           └ <silk.flow.FixedOutputFlow object at 0x7f73d418ed40>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f73d418f610>, <silk.flow._InputExtraction object at 0x7f73d418dc60>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f73d418f7f0>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f7625d505e0>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 1.7500e+01, 8.0900e-01],
           │    │          │         │                 [5.0000e-01, 1.8500e+01, 8.7454e-01]...
           │    │          │         └ <property object at 0x7f7625d50590>
           │    │          └ <BoundArguments (sparse_positions=(tensor([[5.0000e-01, 1.7500e+01, 8.0900e-01],
           │    │                    [5.0000e-01, 1.8500e+01, 8.7454e-01]...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f73c5d854b0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f73d5549ab0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7f73d5549a20>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 427, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f73d5549900>

  File "/root/silk/silk/losses/info_nce/loss.py", line 241, in sym_corr_cross_entropy
    loss_0 = asym_corr_cross_entropy(
             └ <function asym_corr_cross_entropy at 0x7f73d5549870>

  File "/root/silk/silk/losses/info_nce/loss.py", line 199, in asym_corr_cross_entropy
    log_num = torch.bmm(desc_0.unsqueeze(1), desc_1.unsqueeze(2)).reshape(-1,1)
              │     │   │      │             │      └ <method 'unsqueeze' of 'torch._C.TensorBase' objects>
              │     │   │      │             └ tensor([[ 0.5657,  0.0933, -0.2046,  ..., -0.3436,  0.4169, -0.5899],
              │     │   │      │                       [ 0.5657,  0.0933, -0.2046,  ..., -0.3436,  0.4...
              │     │   │      └ <method 'unsqueeze' of 'torch._C.TensorBase' objects>
              │     │   └ tensor([], device='cuda:0', size=(0, 128))
              │     └ <built-in method bmm of type object at 0x7f7622859840>
              └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

RuntimeError: Expected size for first two dimensions of batch2 tensor to be: [0, 128] but got: [70001, 128].
2025-03-06 16:20:44.604 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:22:20.270 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:22:20.271 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:22:23.241 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:22:24.319 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:22:29.990 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:22:34.474 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:22:34.475 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:22:37.442 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:22:38.693 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:22:43.662 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:22:57.875 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:22:57.875 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:23:00.821 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:23:02.069 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:23:07.173 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:24:44.786 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:24:44.787 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:24:47.647 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:24:48.990 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:27:25.323 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (661783), thread 'MainThread' (139951292191168):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,  10],
    │    │                    [255, 255, 255,  ...,  12,  12,  11],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f46b7af0160>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f46b7b9d8a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f46b7af0280>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f46b7b9d8a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 277, in _run_optimization
    self.trainer.fit_loop.epoch_loop.batch_loop._update_running_loss(result.loss)
    │    │                                                           │      └ tensor(54483.7578, device='cuda:1')
    │    │                                                           └ ClosureResult(closure_loss=tensor(54483.7578, device='cuda:1', grad_fn=<DivBackward0>), loss=tensor(54483.7578, device='cuda:...
    │    └ <property object at 0x7f46b7c4f510>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f46b7b9d8a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 127, in _update_running_loss
    self.accumulated_loss.append(current_loss)
    │    │                │      └ tensor(54483.7578, device='cuda:1')
    │    │                └ <function TensorRunningAccum.append at 0x7f47a012c0d0>
    │    └ <pytorch_lightning.trainer.supporters.TensorRunningAccum object at 0x7f46989aba00>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f46b7b9d360>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/supporters.py", line 78, in append
    x = x.to(self.memory)
        │ │  │    └ tensor([0.])
        │ │  └ <pytorch_lightning.trainer.supporters.TensorRunningAccum object at 0x7f46989aba00>
        │ └ <method 'to' of 'torch._C.TensorBase' objects>
        └ tensor(54483.7578, device='cuda:1')

KeyboardInterrupt


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f48f23dae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f48f2eb2f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f48f23dae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f48f1aa6440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f48f2415d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f48f2415e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f48f2415cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f48f19368c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f48f23632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f48f1b2d930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f48f2414ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f48f1aa63b0>
    │   └ <property object at 0x7f48f23ffba0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f48f1aa5750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f48f1aa56c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f48f2d19bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f48f2ede830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f46a0fb7bb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f4698c0c400>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f46b7b53a30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46b7b9ed40>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f46b7b53910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46b7b9ed40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46b7b9ed40>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f46b7b68430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46b7b9ed40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f46b7b68670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46b7b9ed40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46b7b9ed40>
    │    └ <property object at 0x7f46b7b5b650>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46b7b9ed40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f46b7b68700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46b7b9ed40>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f46b7b9e110>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f46b7b68820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46b7b9ed40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f46b7b75120>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f46b7b9ed40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f46b7b06d40>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f46b7b9ee30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f46988f3c70>
    │    │          └ <function Loop.run at 0x7f46b7c92b90>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f46b7b9d090>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f46b7b9ee30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f46988f3c70>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f46b7af3b50>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f46b7b9d090>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 102
                   │    │          │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,  10],
                   │    │          │               [255, 255, 255,  ...,  12,  12,  11],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f46b7c92b90>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f46b7b9d360>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f46b7b9d090>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,  10],
    │    │                    [255, 255, 255,  ...,  12,  12,  11],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f46b7af08b0>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f46b7b9d360>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 102
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,  10],
              │    │              │               [255, 255, 255,  ...,  12,  12,  11],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f46b7c92b90>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f46b7b9d8a0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f46b7b9d360>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,   9,   9,  10],
    │    │                    [255, 255, 255,  ...,  12,  12,  11],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f46b7af0160>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f46b7b9d8a0>
  File "/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/signal_handling.py", line 66, in handler
    _error_if_any_worker_fails()
    └ <built-in function _error_if_any_worker_fails>

RuntimeError: DataLoader worker (pid 663570) exited unexpectedly with exit code 1. Details are lost due to multiprocessing. Rerunning with num_workers=0 may give better error trace.
2025-03-06 16:27:25.364 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:27:28.145 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:27:28.146 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:27:31.036 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:27:32.210 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:28:13.008 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (665157), thread 'MainThread' (139903383744960):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  11,  10,  13],
    │    │                    [255, 255, 255,  ...,  12,  11,  15],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f3b90234160>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f3b900e3ca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f3b90234280>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f3b900e3ca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 277, in _run_optimization
    self.trainer.fit_loop.epoch_loop.batch_loop._update_running_loss(result.loss)
    │    │                                                           │      └ tensor(0.0635, device='cuda:1')
    │    │                                                           └ ClosureResult(closure_loss=tensor(0.0635, device='cuda:1', grad_fn=<DivBackward0>), loss=tensor(0.0635, device='cuda:1'), ext...
    │    └ <property object at 0x7f3b90393510>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f3b900e3ca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 127, in _update_running_loss
    self.accumulated_loss.append(current_loss)
    │    │                │      └ tensor(0.0635, device='cuda:1')
    │    │                └ <function TensorRunningAccum.append at 0x7f3c787380d0>
    │    └ <pytorch_lightning.trainer.supporters.TensorRunningAccum object at 0x7f3b71196d70>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f3b900e1330>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/supporters.py", line 78, in append
    x = x.to(self.memory)
        │ │  │    └ tensor([0.])
        │ │  └ <pytorch_lightning.trainer.supporters.TensorRunningAccum object at 0x7f3b71196d70>
        │ └ <method 'to' of 'torch._C.TensorBase' objects>
        └ tensor(0.0635, device='cuda:1')

KeyboardInterrupt


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f3dcaacee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f3dcb5a2f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f3dcaacee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f3dca19a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f3dcab0dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f3dcab0de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f3dcab0dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f3dca0128c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f3dcaa572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f3dca221960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f3dcab0cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f3dca19a3b0>
    │   └ <property object at 0x7f3dcaaf3ab0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f3dca199750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f3dca1996c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f3dcb40dbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f3dcb5ce830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f3b7955bbb0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f3b795b8400>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f3b9029ba30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3b900e3880>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f3b9029b910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3b900e3880>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3b900e3880>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f3b900ac430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3b900e3880>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f3b900ac670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3b900e3880>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3b900e3880>
    │    └ <property object at 0x7f3b9029f7e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3b900e3880>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f3b900ac700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3b900e3880>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f3b900e1c90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f3b900ac820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3b900e3880>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f3b900b52b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3b900e3880>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f3b9024ad40>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f3b900e1ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f3b7116b5b0>
    │    │          └ <function Loop.run at 0x7f3b901deb90>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f3b900e3400>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f3b900e1ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f3b7116b5b0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f3b90237b50>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f3b900e3400>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 20
                   │    │          │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  11,  10,  13],
                   │    │          │               [255, 255, 255,  ...,  12,  11,  15],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f3b901deb90>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f3b900e1330>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f3b900e3400>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  11,  10,  13],
    │    │                    [255, 255, 255,  ...,  12,  11,  15],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f3b902348b0>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f3b900e1330>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 20
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  11,  10,  13],
              │    │              │               [255, 255, 255,  ...,  12,  11,  15],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f3b901deb90>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f3b900e3ca0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f3b900e1330>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  11,  10,  13],
    │    │                    [255, 255, 255,  ...,  12,  11,  15],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f3b90234160>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f3b900e3ca0>
  File "/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/signal_handling.py", line 66, in handler
    _error_if_any_worker_fails()
    └ <built-in function _error_if_any_worker_fails>

RuntimeError: DataLoader worker (pid 666944) exited unexpectedly with exit code 1. Details are lost due to multiprocessing. Rerunning with num_workers=0 may give better error trace.
2025-03-06 16:28:13.047 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:28:16.542 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:28:16.543 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:28:19.383 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:28:20.729 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:46:46.048 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (668531), thread 'MainThread' (140391830188480):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7faf845cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7faf85076f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7faf845cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7faf83c66440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7faf8460dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7faf8460de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7faf8460dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7faf83d1e8c0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7faf845572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7faf83ced990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7faf8460cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7faf83c663b0>
    │   └ <property object at 0x7faf84637010>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7faf83c65750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7faf83c656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7faf84ee1bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7faf850a2830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fad49b800d0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fad26d68f10>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fad49d1ba30>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fad49d1b910>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fad49d30430>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fad49d30670>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
    │    └ <property object at 0x7fad49d23650>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fad49d30700>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fad49b65ba0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fad49d30820>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7fad49d35120>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7fad49ccad40>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fad49b67340>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fad26a53970>
    │    │          └ <function Loop.run at 0x7fad49e5eb90>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fad49b64bb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fad49b67340>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 151, in run
    output = self.on_run_end()
             │    └ <function TrainingEpochLoop.on_run_end at 0x7fad49cb7c70>
             └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fad49b64bb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 302, in on_run_end
    self.trainer.call_hook("on_train_epoch_end")
    │    └ <property object at 0x7fad49e1b470>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fad49b64bb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1490, in call_hook
    callback_fx(*args, **kwargs)
    │            │       └ {}
    │            └ ()
    └ <bound method TrainerCallbackHookMixin.on_train_epoch_end of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/callback_hook.py", line 93, in on_train_epoch_end
    callback.on_train_epoch_end(self, self.lightning_module)
    │        │                  │     │    └ <property object at 0x7fad49d23ba0>
    │        │                  │     └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
    │        │                  └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
    │        └ <function ModelCheckpoint.on_train_epoch_end at 0x7fad8d1cc8b0>
    └ <pytorch_lightning.callbacks.model_checkpoint.ModelCheckpoint object at 0x7fad49b64c10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/callbacks/model_checkpoint.py", line 315, in on_train_epoch_end
    self.save_checkpoint(trainer)
    │    │               └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
    │    └ <function ModelCheckpoint.save_checkpoint at 0x7fad8d1ccb80>
    └ <pytorch_lightning.callbacks.model_checkpoint.ModelCheckpoint object at 0x7fad49b64c10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/callbacks/model_checkpoint.py", line 371, in save_checkpoint
    self._validate_monitor_key(trainer)
    │    │                     └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fad26da7be0>
    │    └ <function ModelCheckpoint._validate_monitor_key at 0x7fad8d1cd240>
    └ <pytorch_lightning.callbacks.model_checkpoint.ModelCheckpoint object at 0x7fad49b64c10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/callbacks/model_checkpoint.py", line 632, in _validate_monitor_key
    raise MisconfigurationException(m)
          │                         └ "ModelCheckpoint(monitor='val.monitor.loss') not found in the returned metrics: ['train.total.loss', 'train.acontextual.descr...
          └ <class 'pytorch_lightning.utilities.exceptions.MisconfigurationException'>

pytorch_lightning.utilities.exceptions.MisconfigurationException: ModelCheckpoint(monitor='val.monitor.loss') not found in the returned metrics: ['train.total.loss', 'train.acontextual.descriptors.loss', 'train.recon.loss', 'val.total.loss', 'val.acontextual.descriptors.loss', 'val.recon.loss']. HINT: Did you call self.log('val.monitor.loss', value) in the LightningModule?
2025-03-06 16:46:46.071 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:48:54.579 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:48:54.579 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:48:57.512 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:48:58.572 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_1/checkpoints/epoch=99-step=83599.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-06 16:56:17.634 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-03-06 16:56:17.635 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-03-06 16:56:17.635 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-03-06 16:56:20.322 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:56:20.322 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:56:23.530 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 16:56:24.616 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (676863), thread 'MainThread' (140323289768384):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f9f8f066e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f9f8fb42f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f9f8f066e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f9f8e726440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f9f8f0a5d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f9f8f0a5e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f9f8f0a5cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f9f8e7de830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f9f8efeb2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f9f8e7b58d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f9f8f0a4ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f9f8e7263b0>
    │   └ <property object at 0x7f9f8f7761b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f9f8e725750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f9f8e7256c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f9f8f9a9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f9f8fb6a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 52, in main
    if config.mode.continue_from_checkpoint is not None:
       └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...

  File "/usr/local/lib/python3.10/dist-packages/omegaconf/dictconfig.py", line 359, in __getattr__
    self._format_and_raise(key=key, value=None, cause=e)
    │    │                     └ 'continue_from_checkpoint'
    │    └ <function Node._format_and_raise at 0x7f9f8f1a2e60>
    └ {'command': 'training', 'model': {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', '...
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/base.py", line 231, in _format_and_raise
    format_and_raise(
    └ <function format_and_raise at 0x7f9f8f1a1bd0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/_utils.py", line 820, in format_and_raise
    _raise(ex, cause)
    │      │   └ ConfigAttributeError("Key 'continue_from_checkpoint' is not in struct\n    full_key: mode.continue_from_checkpoint\n    objec...
    │      └ ConfigAttributeError("Key 'continue_from_checkpoint' is not in struct\n    full_key: mode.continue_from_checkpoint\n    objec...
    └ <function _raise at 0x7f9f8f1a1b40>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/_utils.py", line 798, in _raise
    raise ex.with_traceback(sys.exc_info()[2])  # set env var OC_CAUSE=1 for full trace
          │  │              │   └ <built-in function exc_info>
          │  │              └ <module 'sys' (built-in)>
          │  └ <method 'with_traceback' of 'BaseException' objects>
          └ ConfigAttributeError("Key 'continue_from_checkpoint' is not in struct\n    full_key: mode.continue_from_checkpoint\n    objec...
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/dictconfig.py", line 351, in __getattr__
    return self._get_impl(
           │    └ <function DictConfig._get_impl at 0x7f9f8f1dd000>
           └ {'command': 'training', 'model': {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', '...
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/dictconfig.py", line 442, in _get_impl
    node = self._get_child(
           │    └ <function BaseContainer._get_child at 0x7f9f8f1b16c0>
           └ {'command': 'training', 'model': {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', '...
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/basecontainer.py", line 73, in _get_child
    child = self._get_node(
            │    └ <function DictConfig._get_node at 0x7f9f8f1dd120>
            └ {'command': 'training', 'model': {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', '...
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/dictconfig.py", line 475, in _get_node
    self._validate_get(key)
    │    │             └ 'continue_from_checkpoint'
    │    └ <function DictConfig._validate_get at 0x7f9f8f1dc700>
    └ {'command': 'training', 'model': {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', '...
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/dictconfig.py", line 164, in _validate_get
    self._format_and_raise(
    │    └ <function Node._format_and_raise at 0x7f9f8f1a2e60>
    └ {'command': 'training', 'model': {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', '...
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/base.py", line 231, in _format_and_raise
    format_and_raise(
    └ <function format_and_raise at 0x7f9f8f1a1bd0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/_utils.py", line 900, in format_and_raise
    _raise(ex, cause)
    │      │   └ ConfigAttributeError("Key 'continue_from_checkpoint' is not in struct")
    │      └ ConfigAttributeError("Key 'continue_from_checkpoint' is not in struct\n    full_key: mode.continue_from_checkpoint\n    objec...
    └ <function _raise at 0x7f9f8f1a1b40>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/_utils.py", line 798, in _raise
    raise ex.with_traceback(sys.exc_info()[2])  # set env var OC_CAUSE=1 for full trace
          │  │              │   └ <built-in function exc_info>
          │  │              └ <module 'sys' (built-in)>
          │  └ <method 'with_traceback' of 'BaseException' objects>
          └ ConfigAttributeError("Key 'continue_from_checkpoint' is not in struct\n    full_key: mode.continue_from_checkpoint\n    objec...

omegaconf.errors.ConfigAttributeError: Key 'continue_from_checkpoint' is not in struct
    full_key: mode.continue_from_checkpoint
    object_type=dict
2025-03-06 16:56:24.633 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-06 16:56:35.995 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-06 16:56:35.996 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-06 16:56:39.080 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-06 23:00:18.249 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (676994), thread 'MainThread' (140484839289280):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fc52c1cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fc52ccdaf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fc52c1cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fc52b8d2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fc52c20dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fc52c20de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fc52c20dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fc52b74a830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fc52c1572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fc52b959930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fc52c20cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fc52b8d23b0>
    │   └ <property object at 0x7fc52c1f3c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fc52b8d1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fc52b8d16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fc52cb45bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fc52cd06830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fc52a5919f0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fc2dacb4b80>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fc2f19a39a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc2d08bbb50>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fc2f19a3880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc2d08bbb50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc2d08bbb50>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fc2f19b83a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc2d08bbb50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fc2f19b85e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc2d08bbb50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc2d08bbb50>
    │    └ <property object at 0x7fc2f19a7790>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc2d08bbb50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fc2f19b8670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc2d08bbb50>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fc2d08b9de0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fc2f19b8790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc2d08bbb50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7fc2f19c1260>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc2d08bbb50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7fc2f1952cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fc2d08b9a50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fc2d08e84f0>
    │    │          └ <function Loop.run at 0x7fc2f18e6b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fc2d08b86a0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fc2d08b9a50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fc2d08e84f0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7fc2f193fac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fc2d08b86a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 335
                   │    │          │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
                   │    │          │               [255, 255, 255,  ...,  27,  29,  22],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7fc2f18e6b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fc2d08b89d0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fc2d08b86a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
    │    │                    [255, 255, 255,  ...,  27,  29,  22],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7fc2f193c820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fc2d08b89d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 335
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
              │    │              │               [255, 255, 255,  ...,  27,  29,  22],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7fc2f18e6b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fc2d08b83a0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fc2d08b89d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
    │    │                    [255, 255, 255,  ...,  27,  29,  22],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7fc2f193c0d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fc2d08b83a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7fc2f193c1f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fc2d08b83a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fc2d0482ef0>
    │    │               │          │        └ 335
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7fc2f193c5e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fc2d08b83a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7fc2f19ca290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fc2d0482ef0>
    │         └ <function LightningOptimizer.step at 0x7fc334b1e710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fc2d0482ef0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7fc2d0991530 to Trainer at 0x7fc2d08bbb50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fc2d0482ef0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7fc3d9ecc700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7fc2d08ba710>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fc2d08b9690>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7fc2dace0d30>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7fc3da847d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7fc3da847d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fc2d0482ef0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7fc2f192fb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fc2d0482ef0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fc2d0482ef0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fc2d0482ef0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
                           │    │                                             [255, 255, 255,  .....
                           │    └ <property object at 0x7fc2f1a9f650>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fc2d08b83a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
           │    │                    │                          [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7fc334bbdab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fc2d08b9de0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fc2d08b9690>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
           │    │                  [255, 255, 255,  ...,  27,  29,  22],
           │    │           ...
           │    └ <property object at 0x7fc334bb1350>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fc2d08b9de0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
           │    │                       [255, 255, 255,  ...,  27,  29,  22],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fc3dabcc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
           │                         [255, 255, 255,  ...,  27,  29,  22],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
         │    │                             [255, 255, 255,  ...,  27,  29,  22],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fc3da80c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
           │                        [255, 255, 255,  ...,  27,  29,  22],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
           │    │                       [255, 255, 255,  ...,  27,  29,  22],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fc3dabcc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
           │                         [255, 255, 255,  ...,  27,  29,  22],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
             │                                      [255, 255, 255,  ...,  27,  29,  22],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 516, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fc2dc26b370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 472, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fc2dae42dd0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  27,  29, ...
           │    │     │              │    │      │    └ (31, 29, 30)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fc2dae42dd0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fc2dae42dd0>
           │    │     └ <function Flow.flow_from_tape at 0x7fc2e6a88310>
           │    └ <silk.flow.Flow object at 0x7fc2dae43880>
           └ <silk.flow.FixedOutputFlow object at 0x7fc2dae42dd0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  18,  19,  19],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  27,  29, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00, -1.6160e-03, -1.1179e-03,  7.4176e-03],
    │       │        │    │            │                [ 1.6160e-03,  1.0...
    │       │        │    │            └ 28
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fc2dae436a0>, <silk.flow._InputExtraction object at 0x7fc2dae42bf0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fc2dae43880>
    │       └ 28
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00, -1.6160e-03, -1.1179e-03,  7.4176e-03],
              [ 1.6160e-03,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fc52c9d4450>
           │    │          │         │       └ <BoundArguments (sparse_positions=(tensor([], device='cuda:1', size=(0, 3), grad_fn=<SliceBackward0>), tensor([], device='cud...
           │    │          │         └ <property object at 0x7fc52c9d4400>
           │    │          └ <BoundArguments (sparse_positions=(tensor([], device='cuda:1', size=(0, 3), grad_fn=<SliceBackward0>), tensor([], device='cud...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fc2dacb55a0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 90, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fc2dc268dc0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0, loss_1 = jax_loss.total_loss(
                     │        └ <function total_loss at 0x7fc2dc269a20>
                     └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 401, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7fc2dc2697e0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 0
              │    │          └ tensor([], device='cuda:0', size=(0, 5400, 128), grad_fn=<CloneBackward0>)
              │    └ <function _scan_reduce.<locals>.fun at 0x7fc2d0479bd0>
              └ <function _scan_reduce.<locals>.scan at 0x7fc2d0479ab0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 133, in scan
    return carry, torch.stack(ys, dim=1)
           │      │     │     └ []
           │      │     └ <built-in method stack of type object at 0x7fc529659840>
           │      └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
           └ None

RuntimeError: stack expects a non-empty TensorList
2025-03-06 23:00:18.410 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-07 01:53:19.065 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-07 01:53:19.065 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-07 01:53:22.683 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-07 01:53:23.927 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : silk/lightning_logs/sparse_recon_loss_2/checkpoints/epoch=18-step=15883.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-07 01:53:23.928 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (710708), thread 'MainThread' (139628991607232):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7efde7a5ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7efde84e6f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7efde7a5ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7efde70f2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7efde7a9dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7efde7a9de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7efde7a9dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7efde71aa830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7efde79e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7efde7179960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7efde7a9cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7efde70f23b0>
    │   └ <property object at 0x7efde7a83c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7efde70f1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7efde70f16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7efde8351bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7efde8512830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 56, in main
    load_model_from_checkpoint(
    └ <function load_model_from_checkpoint at 0x7efde8512a70>

  File "/root/silk/silk/config/model.py", line 26, in load_model_from_checkpoint
    checkpoint = pl_load(checkpoint_path, device)
                 │       │                └ None
                 │       └ 'silk/lightning_logs/sparse_recon_loss_2/checkpoints/epoch=18-step=15883.ckpt'
                 └ <function load at 0x7efbf0603d90>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/utilities/cloud_io.py", line 37, in load
    with fs.open(path_or_url, "rb") as f:
         │  │    └ 'silk/lightning_logs/sparse_recon_loss_2/checkpoints/epoch=18-step=15883.ckpt'
         │  └ <function AbstractFileSystem.open at 0x7efbf06700d0>
         └ <fsspec.implementations.local.LocalFileSystem object at 0x7efb7e2411e0>
  File "/usr/local/lib/python3.10/dist-packages/fsspec/spec.py", line 1293, in open
    f = self._open(
        │    └ <function LocalFileSystem._open at 0x7efbf0692f80>
        └ <fsspec.implementations.local.LocalFileSystem object at 0x7efb7e2411e0>
  File "/usr/local/lib/python3.10/dist-packages/fsspec/implementations/local.py", line 197, in _open
    return LocalFileOpener(path, mode, fs=self, **kwargs)
           │               │     │        │       └ {'autocommit': True, 'cache_options': None}
           │               │     │        └ <fsspec.implementations.local.LocalFileSystem object at 0x7efb7e2411e0>
           │               │     └ 'rb'
           │               └ '/root/silk/silk/lightning_logs/sparse_recon_loss_2/checkpoints/epoch=18-step=15883.ckpt'
           └ <class 'fsspec.implementations.local.LocalFileOpener'>
  File "/usr/local/lib/python3.10/dist-packages/fsspec/implementations/local.py", line 322, in __init__
    self._open()
    │    └ <function LocalFileOpener._open at 0x7efbf06935b0>
    └ <fsspec.implementations.local.LocalFileOpener object at 0x7efbacfdaec0>
  File "/usr/local/lib/python3.10/dist-packages/fsspec/implementations/local.py", line 327, in _open
    self.f = open(self.path, mode=self.mode)
    │    │        │    │          │    └ 'rb'
    │    │        │    │          └ <fsspec.implementations.local.LocalFileOpener object at 0x7efbacfdaec0>
    │    │        │    └ '/root/silk/silk/lightning_logs/sparse_recon_loss_2/checkpoints/epoch=18-step=15883.ckpt'
    │    │        └ <fsspec.implementations.local.LocalFileOpener object at 0x7efbacfdaec0>
    │    └ None
    └ <fsspec.implementations.local.LocalFileOpener object at 0x7efbacfdaec0>

FileNotFoundError: [Errno 2] No such file or directory: '/root/silk/silk/lightning_logs/sparse_recon_loss_2/checkpoints/epoch=18-step=15883.ckpt'
2025-03-07 01:53:23.936 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-03-07 01:54:36.004 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-03-07 01:54:36.005 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-03-07 01:54:39.613 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-03-07 01:54:41.148 | WARNING  | silk.cli.training:main:53 - the model's weight are being loaded from checkpoint : /root/silk/lightning_logs/sparse_recon_loss_2/checkpoints/epoch=18-step=15883.ckpt
please make sure to disable it if that's not the intended behavior (by setting `config.mode.continue_from_checkpoint` to `null`).
2025-03-07 01:54:46.809 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
