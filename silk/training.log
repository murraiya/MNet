2025-02-19 08:39:59.350 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-19 08:39:59.351 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-19 08:40:02.346 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-19 08:42:02.619 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-19 08:42:02.620 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-19 08:42:02.620 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-19 08:45:33.969 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-19 08:45:33.969 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-19 08:45:36.969 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-19 08:45:52.938 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-19 08:45:52.939 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-19 08:45:52.939 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-21 05:37:16.860 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 05:37:16.860 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 05:37:19.758 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 05:37:24.281 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 06:43:57.103 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 06:43:57.104 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 06:44:00.076 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 06:44:04.301 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 06:47:53.587 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 06:47:53.587 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 06:47:56.510 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 06:48:00.865 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (7501), thread 'MainThread' (139968832328128):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f4d07b6ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f4d08646f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f4d07b6ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f4d07266440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f4d07badd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f4d07bade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f4d07badcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f4d070c27a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f4d07af32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f4d072ed960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f4d07bacee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f4d072663b0>
    │   └ <property object at 0x7f4d07bd6de0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f4d07265750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f4d072656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f4d084adbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f4d08672830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f4d06f1e6e0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f4ab0088b50>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f4acd3039a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f4acd303880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f4acd3243a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f4acd3245e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>
    │    └ <property object at 0x7f4acd307b50>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f4acd324670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f4acd31e320>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f4acd324790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f4acd3280e0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>
    │    └ <function Trainer._run_sanity_check at 0x7f4acd324940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f4acd329580>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4a9c31ad10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f4acd2b4d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f4a9c31be50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f4ace5d84a0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f4a9c31be50>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f4acd14a350>
                 │    │          └ <function Loop.run at 0x7f4acd24ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f4acd31f430>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f4a9c31be50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f4acd14a350>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f4acd2a1e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f4acd31f430>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
             │    │                            [  9,   8,   7,  ...,  37,  62,  47],
             │    │                     ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f4acd2a2290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f4acd31f430>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
             │    │                                               [  9,   8,   7,  ....
             │    └ <property object at 0x7f4acd3fb880>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f4acd31f430>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
           │    │                    │                            [  9,   8,   7,  ....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f4b104c1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f4acd31e320>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f4acd31fcd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
           │    │                  [  9,   8,   7,  ...,  37,  62,  47],
           │    │          ...
           │    └ <property object at 0x7f4b104b1a80>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f4acd31e320>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
           │    │                       [  9,   8,   7,  ...,  37,  62,  47],
           │    │               ...
           │    └ <function Module._call_impl at 0x7f4bb63d45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
           │                         [  9,   8,   7,  ...,  37,  62,  47],
           │                 ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
         │    │                             [  9,   8,   7,  ...,  37,  62,  47],
         │    │                     ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f4bb6010280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
           │                        [  9,   8,   7,  ...,  37,  62,  47],
           │                ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
           │    │                       [  9,   8,   7,  ...,  37,  62,  47],
           │    │               ...
           │    └ <function Module._call_impl at 0x7f4bb63d45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
           │                         [  9,   8,   7,  ...,  37,  62,  47],
           │                 ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
             │                                        [  9,   8,   7,  ...,  37,  62,  47],
             │                                ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 527, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f4ab7b43250>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 489, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f4ab677af80>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
           │    │     │              │    │      │    │                            [  9,   8,   7,  ...,  37,  62,...
           │    │     │              │    │      │    └ (38, 39, 40, 41)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f4ab677af80>
           │    │     │              │    └ ((0, ()), (1, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, ()), (11, ()), (12, [2]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f4ab677af80>
           │    │     └ <function Flow.flow_from_tape at 0x7f4ac24a0160>
           │    └ <silk.flow.Flow object at 0x7f4ab677ba30>
           └ <silk.flow.FixedOutputFlow object at 0x7f4ab677af80>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': (tensor([[[[  8,  10,  10,  ...,  37,  61,  47],
    │       │        │    │            │      │                    [  9,   8,   7,  ...,  37,  62,...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 164, 164]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │          ...
    │       │        │    │            └ 17
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f4ab677b160>, <silk.flow._InputExtraction object at 0x7f4ab677bac0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f4ab677ba30>
    │       └ 17
    └ [None, None, None, None, None, torch.Size([1, 3, 164, 164]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
        ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f4d083404f0>
           │    │          │         │       └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    │          │         └ <property object at 0x7f4d083404a0>
           │    │          └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    └ <bound method AutoForward.forward_flow of SiLKVGG(
           │        (backbone): ParametricVGG(
           │          (mp): Identity()
           │          (layers): ModuleList...
           └ <silk.flow._FunctionCall object at 0x7f4ab0088340>

  File "/root/silk/silk/flow.py", line 332, in forward_flow
    return self._flow(outputs, *args, **kwargs)
           │    │     │         │       └ {'images': tensor([[[[0.0286, 0.0347, 0.0556,  ..., 0.1927, 0.1796, 0.1009],
           │    │     │         │                   [0.0320, 0.0369, 0.0608,  ..., 0.1927,...
           │    │     │         └ ()
           │    │     └ ('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms')
           │    └ <silk.flow.Flow object at 0x7f4ab7b503d0>
           └ SiLKVGG(
               (backbone): ParametricVGG(
                 (mp): Identity()
                 (layers): ModuleList(
                   (0): Sequential(
                     (0): Sequ...

  File "/root/silk/silk/flow.py", line 244, in flow
    return self.flow_from_tape(tape, output_indexes, inputs)
           │    │              │     │               └ {'images': tensor([[[[0.0286, 0.0347, 0.0556,  ..., 0.1927, 0.1796, 0.1009],
           │    │              │     │                           [0.0320, 0.0369, 0.0608,  ..., 0.1927,...
           │    │              │     └ (10, 2, 14, 13, 6)
           │    │              └ ((0, ()), (1, [0]), (2, ()), (3, [1]), (4, ()), (5, [4]), (6, [5]), (7, ()), (8, [7]), (10, ()), (13, [3]), (14, [8]))
           │    └ <function Flow.flow_from_tape at 0x7f4ac24a0160>
           └ <silk.flow.Flow object at 0x7f4ab7b503d0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'images': tensor([[[[0.0286, 0.0347, 0.0556,  ..., 0.1927, 0.1796, 0.1009],
    │       │        │    │            │      │                    [0.0320, 0.0369, 0.0608,  ..., 0.1927,...
    │       │        │    │            │      └ [None, None, tensor([[[[ 1.8399,  1.1169,  0.3593,  ...,  1.4656,  1.4637,  1.5047],
    │       │        │    │            │                  [ 0.5438, -0.0781, -0.2848,  ....
    │       │        │    │            └ 7
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f4ab67b8550>, <silk.flow._FunctionCall object at 0x7f4ab67b8850>, <silk.flow._Funct...
    │       │        └ <silk.flow.Flow object at 0x7f4ab7b503d0>
    │       └ 7
    └ [None, None, tensor([[[[ 1.8399,  1.1169,  0.3593,  ...,  1.4656,  1.4637,  1.5047],
                [ 0.5438, -0.0781, -0.2848,  ....

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f4d083404f0>
           │    │          │         │       └ <BoundArguments (prob_map=tensor([[[0.8629, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
           │    │          │         │                  [0.0000, 0.0000, 0.0000, ...
           │    │          │         └ <property object at 0x7f4d083404a0>
           │    │          └ <BoundArguments (prob_map=tensor([[[0.8629, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
           │    │                     [0.0000, 0.0000, 0.0000, ...
           │    └ <function prob_map_to_positions_with_prob at 0x7f4ac2466950>
           └ <silk.flow._FunctionCall object at 0x7f4acd1647f0>

  File "/root/silk/silk/backbones/superpoint/utils.py", line 515, in prob_map_to_positions_with_prob
    print("3 ", positions.requires_grad)
                └ (tensor([[ 0.5000,  0.5000],
                          [ 0.5000, 15.5000],
                          [ 0.5000, 16.5000],
                          ...,
                          [70.5000, 59.5000],...

AttributeError: 'tuple' object has no attribute 'requires_grad'
2025-02-21 06:48:01.052 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 06:48:24.836 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 06:48:24.837 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 06:48:27.735 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 06:48:31.955 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (9224), thread 'MainThread' (140490936050112):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fc697866e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fc698336f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fc697866e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fc696f26440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fc6978a5d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fc6978a5e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fc6978a5cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fc696fde7a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fc6977eb2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fc696fad8d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fc6978a4ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fc696f263b0>
    │   └ <property object at 0x7fc697f6a1b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fc696f25750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fc696f256c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fc69819dbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fc69835e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fc695b8e980>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fc42e035630>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fc45cfef9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fc45cfef880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fc45d0103a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fc45d0105e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>
    │    └ <property object at 0x7fc45cff78d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fc45d010670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fc42debf4f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fc45d010790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fc45cff7e20>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>
    │    └ <function Trainer._run_sanity_check at 0x7fc45d010940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fc45d015300>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc42debfdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fc45cfa0d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fc45d006380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fc45cf6f830>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fc45d006380>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fc45ce326b0>
                 │    │          └ <function Loop.run at 0x7fc45cf36b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fc42debecb0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fc45d006380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fc45ce326b0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fc45cf8de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fc42debecb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
             │    │                            [174, 178, 180,  ...,  84,  68,  58],
             │    │                     ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fc45cf8e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fc42debecb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
             │    │                                               [174, 178, 180,  ....
             │    └ <property object at 0x7fc45d0ef790>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fc42debecb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
           │    │                    │                            [174, 178, 180,  ....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fc4a01b5b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fc42debf4f0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fc42debd1b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
           │    │                  [174, 178, 180,  ...,  84,  68,  58],
           │    │          ...
           │    └ <property object at 0x7fc4a01a58f0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fc42debf4f0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
           │    │                       [174, 178, 180,  ...,  84,  68,  58],
           │    │               ...
           │    └ <function Module._call_impl at 0x7fc5461c45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
           │                         [174, 178, 180,  ...,  84,  68,  58],
           │                 ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
         │    │                             [174, 178, 180,  ...,  84,  68,  58],
         │    │                     ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fc545e04280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
           │                        [174, 178, 180,  ...,  84,  68,  58],
           │                ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
           │    │                       [174, 178, 180,  ...,  84,  68,  58],
           │    │               ...
           │    └ <function Module._call_impl at 0x7fc5461c45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
           │                         [174, 178, 180,  ...,  84,  68,  58],
           │                 ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
             │                                        [174, 178, 180,  ...,  84,  68,  58],
             │                                ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 527, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fc447893250>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 489, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fc4464a89d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
           │    │     │              │    │      │    │                            [174, 178, 180,  ...,  84,  68,...
           │    │     │              │    │      │    └ (38, 39, 40, 41)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fc4464a89d0>
           │    │     │              │    └ ((0, ()), (1, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, ()), (11, ()), (12, [2]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fc4464a89d0>
           │    │     └ <function Flow.flow_from_tape at 0x7fc45209c1f0>
           │    └ <silk.flow.Flow object at 0x7fc446467c40>
           └ <silk.flow.FixedOutputFlow object at 0x7fc4464a89d0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': (tensor([[[[179, 183, 186,  ...,  71,  81,  87],
    │       │        │    │            │      │                    [174, 178, 180,  ...,  84,  68,...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 164, 164]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │          ...
    │       │        │    │            └ 17
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fc44789c640>, <silk.flow._InputExtraction object at 0x7fc44789d720>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fc446467c40>
    │       └ 17
    └ [None, None, None, None, None, torch.Size([1, 3, 164, 164]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
        ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fc6980245e0>
           │    │          │         │       └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    │          │         └ <property object at 0x7fc698024590>
           │    │          └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    └ <bound method AutoForward.forward_flow of SiLKVGG(
           │        (backbone): ParametricVGG(
           │          (mp): Identity()
           │          (layers): ModuleList...
           └ <silk.flow._FunctionCall object at 0x7fc42e034ee0>

  File "/root/silk/silk/flow.py", line 332, in forward_flow
    return self._flow(outputs, *args, **kwargs)
           │    │     │         │       └ {'images': tensor([[[[0.6262, 0.6355, 0.6459,  ..., 0.2534, 0.2914, 0.3069],
           │    │     │         │                   [0.6172, 0.6264, 0.6384,  ..., 0.2214,...
           │    │     │         └ ()
           │    │     └ ('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms')
           │    └ <silk.flow.Flow object at 0x7fc4464a8a90>
           └ SiLKVGG(
               (backbone): ParametricVGG(
                 (mp): Identity()
                 (layers): ModuleList(
                   (0): Sequential(
                     (0): Sequ...

  File "/root/silk/silk/flow.py", line 244, in flow
    return self.flow_from_tape(tape, output_indexes, inputs)
           │    │              │     │               └ {'images': tensor([[[[0.6262, 0.6355, 0.6459,  ..., 0.2534, 0.2914, 0.3069],
           │    │              │     │                           [0.6172, 0.6264, 0.6384,  ..., 0.2214,...
           │    │              │     └ (10, 2, 14, 13, 6)
           │    │              └ ((0, ()), (1, [0]), (2, ()), (3, [1]), (4, ()), (5, [4]), (6, [5]), (7, ()), (8, [7]), (10, ()), (13, [3]), (14, [8]))
           │    └ <function Flow.flow_from_tape at 0x7fc45209c1f0>
           └ <silk.flow.Flow object at 0x7fc4464a8a90>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'images': tensor([[[[0.6262, 0.6355, 0.6459,  ..., 0.2534, 0.2914, 0.3069],
    │       │        │    │            │      │                    [0.6172, 0.6264, 0.6384,  ..., 0.2214,...
    │       │        │    │            │      └ [None, None, tensor([[[[-0.6028, -0.5782, -0.5656,  ..., -0.1433, -0.2121, -0.1182],
    │       │        │    │            │                  [-0.3316, -0.3314, -0.2973,  ....
    │       │        │    │            └ 13
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fc4464a8a00>, <silk.flow._FunctionCall object at 0x7fc4464a8220>, <silk.flow._Funct...
    │       │        └ <silk.flow.Flow object at 0x7fc4464a8a90>
    │       └ 13
    └ [None, None, tensor([[[[-0.6028, -0.5782, -0.5656,  ..., -0.1433, -0.2121, -0.1182],
                [-0.3316, -0.3314, -0.2973,  ....

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fc6980245e0>
           │    │          │         │       └ <BoundArguments (raw_descriptors=tensor([[[[-1.7650e+00, -1.7094e+00, -1.3920e+00,  ...,  3.9333e-01,
           │    │          │         │                     4.6331e-01,...
           │    │          │         └ <property object at 0x7fc698024590>
           │    │          └ <BoundArguments (raw_descriptors=tensor([[[[-1.7650e+00, -1.7094e+00, -1.3920e+00,  ...,  3.9333e-01,
           │    │                        4.6331e-01,...
           │    └ functools.partial(<function SiLKVGG.sparsify_descriptors at 0x7fc447891480>, scale_factor=Parameter containing:
           │      tensor(1.4100...
           └ <silk.flow._FunctionCall object at 0x7fc4464a9ab0>

  File "/root/silk/silk/backbones/silk/silk.py", line 388, in sparsify_descriptors
    print("5 ", sparse_descriptors.requires_grad)
                └ [tensor([[ 0.1492, -0.0508, -0.1641,  ..., -0.0833,  0.2032, -0.0437],
                          [ 0.1739, -0.1829, -0.1560,  ..., -0.1029,  0....

AttributeError: 'list' object has no attribute 'requires_grad'
2025-02-21 06:48:32.204 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 06:52:57.404 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 06:52:57.405 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 06:53:00.330 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 06:53:04.458 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 06:53:27.060 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 06:53:27.061 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 06:53:29.987 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 06:53:34.360 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (12670), thread 'MainThread' (139982818587072):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f50495cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f504a09af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f50495cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f5048c9a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f504960dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f504960de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f504960dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f5048b127a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f50495572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f5048d21960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f504960cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f5048c9a3b0>
    │   └ <property object at 0x7f5049636e80>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f5048c99750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f5048c996c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f5049f05bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f504a0c6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f50479929b0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f4dd5d51630>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f4e0ed579a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f4e0ed57880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f4e0ed783a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f4e0ed785e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>
    │    └ <property object at 0x7f4e0ed5f920>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f4e0ed78670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f4dd5cdb4f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f4e0ed78790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f4e0ed5fe70>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>
    │    └ <function Trainer._run_sanity_check at 0x7f4e0ed78940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f4e0ed7d350>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f4dd5cdbdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f4e0ed08d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f4e0ed6e380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f4e0ecdb8d0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f4e0ed6e380>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f4e0eb9e6b0>
                 │    │          └ <function Loop.run at 0x7f4e0ec9eb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f4dd5cdacb0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f4e0ed6e380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f4e0eb9e6b0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f4e0ecf5e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f4dd5cdacb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
             │    │                            [ 70,  58,  88,  ..., 181, 182, 183],
             │    │                     ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f4e0ecf6290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f4dd5cdacb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
             │    │                                               [ 70,  58,  88,  ....
             │    └ <property object at 0x7f4e0ee53740>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f4dd5cdacb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
           │    │                    │                            [ 70,  58,  88,  ....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f4e51f01b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f4dd5cdb4f0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f4dd5cd91b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
           │    │                  [ 70,  58,  88,  ..., 181, 182, 183],
           │    │          ...
           │    └ <property object at 0x7f4e51ef1990>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f4dd5cdb4f0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
           │    │                       [ 70,  58,  88,  ..., 181, 182, 183],
           │    │               ...
           │    └ <function Module._call_impl at 0x7f4ef7fcc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
           │                         [ 70,  58,  88,  ..., 181, 182, 183],
           │                 ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
         │    │                             [ 70,  58,  88,  ..., 181, 182, 183],
         │    │                     ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f4ef7c0c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
           │                        [ 70,  58,  88,  ..., 181, 182, 183],
           │                ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
           │    │                       [ 70,  58,  88,  ..., 181, 182, 183],
           │    │               ...
           │    └ <function Module._call_impl at 0x7f4ef7fcc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
           │                         [ 70,  58,  88,  ..., 181, 182, 183],
           │                 ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
             │                                        [ 70,  58,  88,  ..., 181, 182, 183],
             │                                ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 527, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f4df97df370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 489, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f4df81f09d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
           │    │     │              │    │      │    │                            [ 70,  58,  88,  ..., 181, 182,...
           │    │     │              │    │      │    └ (38, 39, 40, 41)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f4df81f09d0>
           │    │     │              │    └ ((0, ()), (1, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, ()), (11, ()), (12, [2]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f4df81f09d0>
           │    │     └ <function Flow.flow_from_tape at 0x7f4e03e84310>
           │    └ <silk.flow.Flow object at 0x7f4df81b3c40>
           └ <silk.flow.FixedOutputFlow object at 0x7f4df81f09d0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': (tensor([[[[ 66,  85,  39,  ..., 176, 178, 178],
    │       │        │    │            │      │                    [ 70,  58,  88,  ..., 181, 182,...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 164, 164]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │          ...
    │       │        │    │            └ 17
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f4df97e8640>, <silk.flow._InputExtraction object at 0x7f4df97e9720>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f4df81b3c40>
    │       └ 17
    └ [None, None, None, None, None, torch.Size([1, 3, 164, 164]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
        ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f5049d94360>
           │    │          │         │       └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    │          │         └ <property object at 0x7f5049d94310>
           │    │          └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    └ <bound method AutoForward.forward_flow of SiLKVGG(
           │        (backbone): ParametricVGG(
           │          (mp): Identity()
           │          (layers): ModuleList...
           └ <silk.flow._FunctionCall object at 0x7f4dd5d50ee0>

  File "/root/silk/silk/flow.py", line 332, in forward_flow
    return self._flow(outputs, *args, **kwargs)
           │    │     │         │       └ {'images': tensor([[[[0.2784, 0.2583, 0.1979,  ..., 0.9073, 0.9096, 0.9096],
           │    │     │         │                   [0.2767, 0.2390, 0.3201,  ..., 0.9132,...
           │    │     │         └ ()
           │    │     └ ('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms')
           │    └ <silk.flow.Flow object at 0x7f4df81f0a90>
           └ SiLKVGG(
               (backbone): ParametricVGG(
                 (mp): Identity()
                 (layers): ModuleList(
                   (0): Sequential(
                     (0): Sequ...

  File "/root/silk/silk/flow.py", line 244, in flow
    return self.flow_from_tape(tape, output_indexes, inputs)
           │    │              │     │               └ {'images': tensor([[[[0.2784, 0.2583, 0.1979,  ..., 0.9073, 0.9096, 0.9096],
           │    │              │     │                           [0.2767, 0.2390, 0.3201,  ..., 0.9132,...
           │    │              │     └ (10, 2, 14, 13, 6)
           │    │              └ ((0, ()), (1, [0]), (2, ()), (3, [1]), (4, ()), (5, [4]), (6, [5]), (7, ()), (8, [7]), (10, ()), (13, [3]), (14, [8]))
           │    └ <function Flow.flow_from_tape at 0x7f4e03e84310>
           └ <silk.flow.Flow object at 0x7f4df81f0a90>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'images': tensor([[[[0.2784, 0.2583, 0.1979,  ..., 0.9073, 0.9096, 0.9096],
    │       │        │    │            │      │                    [0.2767, 0.2390, 0.3201,  ..., 0.9132,...
    │       │        │    │            │      └ [None, None, tensor([[[[ 0.7195,  0.8406,  0.7582,  ..., -1.3495, -0.9766, -0.6658],
    │       │        │    │            │                  [ 0.8463,  0.7977,  0.7265,  ....
    │       │        │    │            └ 13
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f4df81f0a00>, <silk.flow._FunctionCall object at 0x7f4df81f0220>, <silk.flow._Funct...
    │       │        └ <silk.flow.Flow object at 0x7f4df81f0a90>
    │       └ 13
    └ [None, None, tensor([[[[ 0.7195,  0.8406,  0.7582,  ..., -1.3495, -0.9766, -0.6658],
                [ 0.8463,  0.7977,  0.7265,  ....

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f5049d94360>
           │    │          │         │       └ <BoundArguments (raw_descriptors=tensor([[[[ 0.4255,  0.6238,  0.5022,  ..., -0.6862,  0.1968,  0.4361],
           │    │          │         │                   [ 0.6625, ...
           │    │          │         └ <property object at 0x7f5049d94310>
           │    │          └ <BoundArguments (raw_descriptors=tensor([[[[ 0.4255,  0.6238,  0.5022,  ..., -0.6862,  0.1968,  0.4361],
           │    │                      [ 0.6625, ...
           │    └ functools.partial(<function SiLKVGG.sparsify_descriptors at 0x7f4df97dd5a0>, scale_factor=Parameter containing:
           │      tensor(1.4100...
           └ <silk.flow._FunctionCall object at 0x7f4df81f1ab0>

  File "/root/silk/silk/backbones/silk/silk.py", line 388, in sparsify_descriptors
    print("5 ", sparse_descriptors.requires_grad)
                └ [tensor([[ 0.0332, -0.1303,  0.0613,  ..., -0.1489, -0.0167, -0.0301],
                          [ 0.1730,  0.0009,  0.0831,  ..., -0.1528, -0....

AttributeError: 'list' object has no attribute 'requires_grad'
2025-02-21 06:53:34.600 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 06:54:33.331 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 06:54:33.331 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 06:54:36.282 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 06:54:37.172 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (14393), thread 'MainThread' (140067059298752):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'in_channels': 1, 'detection_threshold': 1.0, 'detection_top_k': 3000, 'nms_dist': 0, 'padding': 0, 'border_dist': 0, 'descr...
           │         └ ()
           └ <class 'silk.backbones.silk.silk.SiLKVGG'>

  File "/root/silk/silk/backbones/silk/silk.py", line 248, in __init__
    MagicPoint.add_detector_head_post_processing(
    │          └ <staticmethod(<function MagicPoint.add_detector_head_post_processing at 0x7f61a1071360>)>
    └ <class 'silk.backbones.superpoint.magicpoint.MagicPoint'>

TypeError: MagicPoint.add_detector_head_post_processing() got an unexpected keyword argument 'prefix'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f63e67cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f63e72cef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f63e67cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f63e5ed2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f63e680dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f63e680de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f63e680dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f63e5d427a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f63e67572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f63e5f59930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f63e680cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f63e5ed23b0>
    │   └ <property object at 0x7f63e6837010>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f63e5ed1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f63e5ed16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f63e7139bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f63e72fa830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f63e5ed1d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f63e5ed1e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f63e680e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f63e680e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 342, in instantiate_node
    value = instantiate_node(
            └ <function instantiate_node at 0x7f63e680e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model.model'
           │            │         │        │     └ {'in_channels': 1, 'detection_threshold': 1.0, 'detection_top_k': 3000, 'nms_dist': 0, 'padding': 0, 'border_dist': 0, 'descr...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.backbones.silk.silk.SiLKVGG'>
           └ <function _call_target at 0x7f63e680e320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ 'Error in call to target \'silk.backbones.silk.silk.SiLKVGG\':\nTypeError("MagicPoint.add_detector_head_post_processing() got...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.backbones.silk.silk.SiLKVGG':
TypeError("MagicPoint.add_detector_head_post_processing() got an unexpected keyword argument 'prefix'")
full_key: mode.model.model
2025-02-21 06:54:37.377 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 06:55:01.068 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 06:55:01.069 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 06:55:03.948 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 06:55:08.214 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (14524), thread 'MainThread' (139859037671872):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f337776ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f33781eef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f337776ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f3376e02440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f33777add80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f33777ade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f33777adcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f3376c667a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f33776f32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f3376e8d900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f33777acee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f3376e023b0>
    │   └ <property object at 0x7f3377c99f30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f3376e01750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f3376e016c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f3378055bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f337821a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f3376ac2350>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f310df75630>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f313ce9b9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f313ce9b880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f313cebc3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f313cebc5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>
    │    └ <property object at 0x7f313ce9fba0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f313cebc670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f313ceb2680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f313cebc790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f313cec0130>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>
    │    └ <function Trainer._run_sanity_check at 0x7f313cebc940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f313cec15d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f310df76950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f313ce4cd30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f313ccdc850>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f313ce1bba0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f313ccdc850>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f310dc0bd00>
                 │    │          └ <function Loop.run at 0x7f313cfdeb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f313ceb2e30>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f313ccdc850>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f310dc0bd00>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f313ce39e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f313ceb2e30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
             │    │                            [ 51,  51,  58,  ..., 141, 144, 138],
             │    │                     ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f313ce3a290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f313ceb2e30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
             │    │                                               [ 51,  51,  58,  ....
             │    └ <property object at 0x7f313cf93b00>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f313ceb2e30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
           │    │                    │                            [ 51,  51,  58,  ....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f31800c5b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f313ceb2680>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f313ceb2dd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
           │    │                  [ 51,  51,  58,  ..., 141, 144, 138],
           │    │          ...
           │    └ <property object at 0x7f31800b58a0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f313ceb2680>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
           │    │                       [ 51,  51,  58,  ..., 141, 144, 138],
           │    │               ...
           │    └ <function Module._call_impl at 0x7f3225fd05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
           │                         [ 51,  51,  58,  ..., 141, 144, 138],
           │                 ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
         │    │                             [ 51,  51,  58,  ..., 141, 144, 138],
         │    │                     ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f3225c0c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
           │                        [ 51,  51,  58,  ..., 141, 144, 138],
           │                ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
           │    │                       [ 51,  51,  58,  ..., 141, 144, 138],
           │    │               ...
           │    └ <function Module._call_impl at 0x7f3225fd05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
           │                         [ 51,  51,  58,  ..., 141, 144, 138],
           │                 ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
             │                                        [ 51,  51,  58,  ..., 141, 144, 138],
             │                                ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 527, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f3127923370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 489, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f3126358a00>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
           │    │     │              │    │      │    │                            [ 51,  51,  58,  ..., 141, 144,...
           │    │     │              │    │      │    └ (38, 39, 40, 41)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f3126358a00>
           │    │     │              │    └ ((0, ()), (1, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, ()), (11, ()), (12, [2]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f3126358a00>
           │    │     └ <function Flow.flow_from_tape at 0x7f31320781f0>
           │    └ <silk.flow.Flow object at 0x7f312631bc70>
           └ <silk.flow.FixedOutputFlow object at 0x7f3126358a00>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': (tensor([[[[ 47,  50,  63,  ..., 155, 155, 152],
    │       │        │    │            │      │                    [ 51,  51,  58,  ..., 141, 144,...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 164, 164]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │          ...
    │       │        │    │            └ 17
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f312792c670>, <silk.flow._InputExtraction object at 0x7f312792d750>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f312631bc70>
    │       └ 17
    └ [None, None, None, None, None, torch.Size([1, 3, 164, 164]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
        ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f3377ee84f0>
           │    │          │         │       └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    │          │         └ <property object at 0x7f3377ee84a0>
           │    │          └ <BoundArguments (outputs=('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms'), args=(), kwar...
           │    └ <bound method AutoForward.forward_flow of SiLKVGG(
           │        (backbone): ParametricVGG(
           │          (mp): Identity()
           │          (layers): ModuleList...
           └ <silk.flow._FunctionCall object at 0x7f310df74eb0>

  File "/root/silk/silk/flow.py", line 332, in forward_flow
    return self._flow(outputs, *args, **kwargs)
           │    │     │         │       └ {'images': tensor([[[[0.1762, 0.1788, 0.2341,  ..., 0.8827, 0.8827, 0.8792],
           │    │     │         │                   [0.2158, 0.1980, 0.1822,  ..., 0.8064,...
           │    │     │         └ ()
           │    │     └ ('normalized_descriptors', 'logits', 'sparse_positions', 'sparse_descriptors', 'nms')
           │    └ <silk.flow.Flow object at 0x7f3126358ac0>
           └ SiLKVGG(
               (backbone): ParametricVGG(
                 (mp): Identity()
                 (layers): ModuleList(
                   (0): Sequential(
                     (0): Sequ...

  File "/root/silk/silk/flow.py", line 244, in flow
    return self.flow_from_tape(tape, output_indexes, inputs)
           │    │              │     │               └ {'images': tensor([[[[0.1762, 0.1788, 0.2341,  ..., 0.8827, 0.8827, 0.8792],
           │    │              │     │                           [0.2158, 0.1980, 0.1822,  ..., 0.8064,...
           │    │              │     └ (10, 2, 14, 13, 6)
           │    │              └ ((0, ()), (1, [0]), (2, ()), (3, [1]), (4, ()), (5, [4]), (6, [5]), (7, ()), (8, [7]), (10, ()), (13, [3]), (14, [8]))
           │    └ <function Flow.flow_from_tape at 0x7f31320781f0>
           └ <silk.flow.Flow object at 0x7f3126358ac0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'images': tensor([[[[0.1762, 0.1788, 0.2341,  ..., 0.8827, 0.8827, 0.8792],
    │       │        │    │            │      │                    [0.2158, 0.1980, 0.1822,  ..., 0.8064,...
    │       │        │    │            │      └ [None, None, tensor([[[[-0.5741, -0.5957, -1.1516,  ...,  1.7753,  1.5811,  1.5946],
    │       │        │    │            │                  [-0.9289, -1.3242, -1.2969,  ....
    │       │        │    │            └ 13
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f3126358a30>, <silk.flow._FunctionCall object at 0x7f3126358250>, <silk.flow._Funct...
    │       │        └ <silk.flow.Flow object at 0x7f3126358ac0>
    │       └ 13
    └ [None, None, tensor([[[[-0.5741, -0.5957, -1.1516,  ...,  1.7753,  1.5811,  1.5946],
                [-0.9289, -1.3242, -1.2969,  ....

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f3377ee84f0>
           │    │          │         │       └ <BoundArguments (raw_descriptors=tensor([[[[-0.0068, -0.4549, -0.0390,  ...,  1.7369,  1.6629,  1.5750],
           │    │          │         │                   [ 0.2318, ...
           │    │          │         └ <property object at 0x7f3377ee84a0>
           │    │          └ <BoundArguments (raw_descriptors=tensor([[[[-0.0068, -0.4549, -0.0390,  ...,  1.7369,  1.6629,  1.5750],
           │    │                      [ 0.2318, ...
           │    └ functools.partial(<function SiLKVGG.sparsify_descriptors at 0x7f3127921510>, scale_factor=Parameter containing:
           │      tensor(1.4100...
           └ <silk.flow._FunctionCall object at 0x7f3126359ae0>

  File "/root/silk/silk/backbones/silk/silk.py", line 387, in sparsify_descriptors
    print("5 ", sparse_descriptors.requires_grad)
                └ [tensor([[ 0.2921,  0.0095, -0.1396,  ..., -0.0116, -0.0581, -0.0825],
                          [ 0.3700,  0.0402, -0.1068,  ...,  0.0076, -0....

AttributeError: 'list' object has no attribute 'requires_grad'
2025-02-21 06:55:08.449 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 06:55:39.719 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 06:55:39.720 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 06:55:42.651 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 06:55:46.819 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 06:56:32.075 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 06:56:32.076 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 06:56:35.034 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 06:56:44.295 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-21 06:56:44.296 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-21 06:56:44.296 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-21 06:59:54.316 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 06:59:54.317 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 06:59:57.185 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 07:00:06.194 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-21 07:00:06.195 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-21 07:00:06.195 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-21 07:05:27.227 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 07:05:27.227 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 07:05:30.107 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 07:05:48.747 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-21 07:05:48.748 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-21 07:05:48.748 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-21 07:09:49.954 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 07:09:49.954 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 07:09:52.831 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 07:19:07.741 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-21 07:19:07.742 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-21 07:19:07.742 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-21 07:19:52.454 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 07:19:52.455 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 07:19:55.394 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 07:20:06.098 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-21 07:20:06.099 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-21 07:20:06.099 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-21 07:33:33.834 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 07:33:33.835 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 07:33:36.827 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 07:33:41.552 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (36109), thread 'MainThread' (140235587273152):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f8b238e2e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f8b2439ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f8b238e2e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f8b22fae440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f8b23921d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f8b23921e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f8b23921cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f8b22e267a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f8b2386b2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f8b230398d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f8b23920ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f8b22fae3b0>
    │   └ <property object at 0x7f8b2394b0b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f8b22fad750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f8b22fad6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f8b24209bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f8b243ca830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f8b22c825c0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f88ca15d7e0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f88e906b9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f88e906b880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f88e8e903a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f88e8e905e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>
    │    └ <property object at 0x7f88e906f970>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f88e8e90670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f88e8e8abf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f88e8e90790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f88e906fec0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>
    │    └ <function Trainer._run_sanity_check at 0x7f88e8e90940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f88e8e953a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f88c1ffe1d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f88e901cd30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f88c1ffde10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f88e8feb970>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f88c1ffde10>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f88e8eba380>
                 │    │          └ <function Loop.run at 0x7f88e8fb2b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f88e8e8be20>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f88c1ffde10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f88e8eba380>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f88e9009e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f88e8e8be20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
             │    │                            [ 79, 128, 171,  ...,  49,  55,  38],
             │    │                     ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f88e900a290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f88e8e8be20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
             │    │                                               [ 79, 128, 171,  ....
             │    └ <property object at 0x7f88e9167970>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f88e8e8be20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
           │    │                    │                            [ 79, 128, 171,  ....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f892c235b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f88e8e8abf0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f88e8e8b370>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
           │    │                  [ 79, 128, 171,  ...,  49,  55,  38],
           │    │          ...
           │    └ <property object at 0x7f892c225d00>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f88e8e8abf0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
           │    │                       [ 79, 128, 171,  ...,  49,  55,  38],
           │    │               ...
           │    └ <function Module._call_impl at 0x7f89d21e45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
           │                         [ 79, 128, 171,  ...,  49,  55,  38],
           │                 ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
         │    │                             [ 79, 128, 171,  ...,  49,  55,  38],
         │    │                     ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f89d1e20280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
           │                        [ 79, 128, 171,  ...,  49,  55,  38],
           │                ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
           │    │                       [ 79, 128, 171,  ...,  49,  55,  38],
           │    │               ...
           │    └ <function Module._call_impl at 0x7f89d21e45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
           │                         [ 79, 128, 171,  ...,  49,  55,  38],
           │                 ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': (tensor([[[[ 72,  94, 110,  ...,  33,  38,  57],
             │                                        [ 79, 128, 171,  ...,  49,  55,  38],
             │                                ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 520, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f88d390f2e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 486, in _total_loss
    if math.isnan(actx_desc_loss):
                  └ tensor(10.8542, device='cuda:1')

NameError: name 'math' is not defined
2025-02-21 07:33:41.629 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 07:34:18.057 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 07:34:18.057 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 07:34:20.944 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 07:34:34.222 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-21 07:34:34.223 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-21 07:34:34.223 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-21 07:35:16.022 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 07:35:16.022 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 07:35:18.974 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 07:36:04.796 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-21 07:36:04.797 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-21 07:36:04.797 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-21 07:59:09.689 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 07:59:09.690 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 07:59:12.658 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 07:59:14.267 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (44778), thread 'MainThread' (139727395656128):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'pad_if_needed': True}
           │         └ ()
           └ <class 'silk.transforms.cv.image.HWCToCHW'>

TypeError: HWCToCHW.__init__() got an unexpected keyword argument 'pad_if_needed'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f14d0fdae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f14d1a52f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f14d0fdae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f14d0672440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f14d1019d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f14d1019e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f14d1019cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f14d04ce830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f14d0f632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f14d06f9990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f14d1018ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f14d06723b0>
    │   └ <property object at 0x7f14d14fdf30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f14d0671750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f14d06716c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f14d18b9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f14d1a7e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 64, in main
    train_loader = instantiate_and_ensure_is_instance(
                   └ <function instantiate_and_ensure_is_instance at 0x7f14d0671d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'_target_': 'torch.utils.data.DataLoader', 'dataset': {'_target_': 'silk.datasets.raw_kitti_mot.raw_kitti_mot_dataset.kittiM...
               └ <function instantiate at 0x7f14d0671e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'_target_': 'torch.utils.data.DataLoader', 'dataset': {'_target_': 'silk.datasets.raw_kitti_mot.raw_kitti_mot_dataset.kittiM...
           │     │     └ <function instantiate at 0x7f14d101a560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f14d101a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 342, in instantiate_node
    value = instantiate_node(
            └ <function instantiate_node at 0x7f14d101a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 342, in instantiate_node
    value = instantiate_node(
            └ <function instantiate_node at 0x7f14d101a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 342, in instantiate_node
    value = instantiate_node(
            └ <function instantiate_node at 0x7f14d101a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 316, in instantiate_node
    items = [
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 317, in <listcomp>
    instantiate_node(item, convert=convert, recursive=recursive)
    │                │             │                  └ True
    │                │             └ <ConvertMode.NONE: 'none'>
    │                └ {'_target_': 'silk.transforms.abstract.Map', 'function': {'_target_': 'silk.transforms.abstract.Compose', '_args_': [{'_targe...
    └ <function instantiate_node at 0x7f14d101a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 342, in instantiate_node
    value = instantiate_node(
            └ <function instantiate_node at 0x7f14d101a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 342, in instantiate_node
    value = instantiate_node(
            └ <function instantiate_node at 0x7f14d101a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 316, in instantiate_node
    items = [
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 317, in <listcomp>
    instantiate_node(item, convert=convert, recursive=recursive)
    │                │             │                  └ True
    │                │             └ <ConvertMode.NONE: 'none'>
    │                └ {'_target_': 'silk.transforms.cv.image.HWCToCHW', 'pad_if_needed': True}
    └ <function instantiate_node at 0x7f14d101a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.loaders.training.collate_fn.transform._args_[1].function._args_1'
           │            │         │        │     └ {'pad_if_needed': True}
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.transforms.cv.image.HWCToCHW'>
           └ <function _call_target at 0x7f14d101a320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ 'Error in call to target \'silk.transforms.cv.image.HWCToCHW\':\nTypeError("HWCToCHW.__init__() got an unexpected keyword arg...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.transforms.cv.image.HWCToCHW':
TypeError("HWCToCHW.__init__() got an unexpected keyword argument 'pad_if_needed'")
full_key: mode.loaders.training.collate_fn.transform._args_[1].function._args_1
2025-02-21 07:59:14.273 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 07:59:36.685 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 07:59:36.685 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 07:59:39.616 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 07:59:43.202 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (44909), thread 'MainThread' (139951232045504):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f48eeadee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f48ef556f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f48eeadee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f48ee176440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f48eeb1dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f48eeb1de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f48eeb1dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f48edfd2830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f48eea672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f48ee201900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f48eeb1cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f48ee1763b0>
    │   └ <property object at 0x7f48ef001f30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f48ee175750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f48ee1756c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f48ef3bdbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f48ef582830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f48ecd9d9c0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f4695308100>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f46b41fb9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f46b41fb880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f46b42103a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f46b42105e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>
    │    └ <property object at 0x7f46b41ff8d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f46b4210670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f469509b6d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f46b4210790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f46b41ffe20>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>
    │    └ <function Trainer._run_sanity_check at 0x7f46b4210940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f46b4219300>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f469509a950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f46b41acd30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f46b42162f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f46b4177830>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f46b42162f0>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f46b4048c70>
                 │    │          └ <function Loop.run at 0x7f46b413eb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f46b4216ef0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f46b42162f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f46b4048c70>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f46b4199e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f46b4216ef0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f46b419a290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f46b4216ef0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f46b42ef6f0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f46b4216ef0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f46f73b9b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f469509b6d0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f469509b850>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f46f73a94e0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f469509b6d0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f479d3d45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f479d014280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f479d3d45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 513, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f469ec93370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 483, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f469d6879d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (39, 40, 36, 41, 42)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f469d6879d0>
           │    │     │              │    └ ((0, ()), (1, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, ()), (11, ()), (12, [2]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f469d6879d0>
           │    │     └ <function Flow.flow_from_tape at 0x7f46a9284280>
           │    └ <silk.flow.Flow object at 0x7f469d687460>
           └ <silk.flow.FixedOutputFlow object at 0x7f469d6879d0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │                  [255, 255, 255,  ...,  32,  30,  29],
    │       │        │    │            │           ...
    │       │        │    │            └ 2
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f469d687580>, <silk.flow._InputExtraction object at 0x7f469d686a40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f469d687460>
    │       └ 2
    └ [NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
                [255, 255, 255,  ...,  32,  30,  29],
         ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f48ef2504f0>
           │    │          │         │       └ <BoundArguments (batch=NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │          │         │                   [255, 255, 255,  .....
           │    │          │         └ <property object at 0x7f48ef2504a0>
           │    │          └ <BoundArguments (batch=NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                      [255, 255, 255,  .....
           │    └ <bound method SiLKRandomHomographies._check_batch of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): Modul...
           └ <silk.flow._FunctionCall object at 0x7f469d6c4160>

  File "/root/silk/silk/models/silk.py", line 587, in _check_batch
    assert len(batch["image_1"][0].shape) == 4
               └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
                           [255, 255, 255,  ...,  32,  30,  29],
                     ...

AssertionError: assert len(batch["image_1"][0].shape) == 4
2025-02-21 07:59:43.279 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:00:54.125 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:00:54.126 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:00:57.101 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:01:00.656 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:01:34.752 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:01:34.753 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:01:37.668 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:01:41.268 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:05:15.352 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:05:15.353 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:05:18.290 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:05:21.847 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (50078), thread 'MainThread' (140646790361536):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7feae12cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7feae1d6ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7feae12cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7feae0966440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7feae130dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7feae130de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7feae130dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7feae0a1e830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7feae12572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7feae09ed930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7feae130cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7feae09663b0>
    │   └ <property object at 0x7feae12f3c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7feae0965750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7feae09656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7feae1bd9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7feae1d9a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7feadf58d9c0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fe888320700>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fe8a6a1f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fe8a6a1f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fe8a6a343a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fe8a6a345e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>
    │    └ <property object at 0x7fe8a6a27420>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fe8a6a34670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fe8817f63e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fe8a6a34790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fe8a6a27970>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>
    │    └ <function Trainer._run_sanity_check at 0x7fe8a6a34940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fe8a6a40e50>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe8817f4a30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fe8a69d0d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fe8a6a3bd60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fe8a69b3470>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fe8a6a3bd60>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fe8a68688b0>
                 │    │          └ <function Loop.run at 0x7fe8a6962b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fe8a6a3a860>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fe8a6a3bd60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fe8a68688b0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fe8a69bde10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fe8a6a3a860>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fe8a69be290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fe8a6a3a860>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fe8a6b1f380>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fe8a6a3a860>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fe8e9bb1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fe8817f63e0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fe8817f5780>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fe8e9ba8fe0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fe8817f63e0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fe98fbc45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fe98f804280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fe98fbc45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 513, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fe8912eb2e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 483, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fe88feb2da0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (39, 40, 36, 41, 42)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fe88feb2da0>
           │    │     │              │    └ ((0, ()), (1, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, ()), (11, ()), (12, [2]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fe88feb2da0>
           │    │     └ <function Flow.flow_from_tape at 0x7fe89bb901f0>
           │    └ <silk.flow.Flow object at 0x7fe88feb3850>
           └ <silk.flow.FixedOutputFlow object at 0x7fe88feb2da0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, False, (tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │                  [255, 255, 255,  ...,  32,  30,  29],
    │       │        │    │            │                  [255...
    │       │        │    │            └ 11
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fe88feb3670>, <silk.flow._InputExtraction object at 0x7fe88feb2bc0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fe88feb3850>
    │       └ 11
    └ [None, False, (tensor([[[[255, 255, 255,  ...,  35,  34,  34],
                [255, 255, 255,  ...,  32,  30,  29],
                [255...

  File "/root/silk/silk/flow.py", line 54, in __call__
    return self.get_dependencies_from_session(session)[0][self._tuple_index]
           │    │                             │           │    └ 8
           │    │                             │           └ <silk.flow._TupleOutputExtraction object at 0x7fe8882c2bc0>
           │    │                             └ [None, False, (tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                                         [255, 255, 255,  ...,  32,  30,  29],
           │    │                                         [255...
           │    └ <function _Transition.get_dependencies_from_session at 0x7fe89bb73640>
           └ <silk.flow._TupleOutputExtraction object at 0x7fe8882c2bc0>

IndexError: tuple index out of range
2025-02-21 08:05:22.018 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:06:30.354 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:06:30.355 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:06:33.348 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:06:34.453 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (51801), thread 'MainThread' (140423175692736):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 556, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7fb480d0ecb0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 297, in _init_loss_flow
    self.flow.define_transition(
    │    └ <property object at 0x7fb48b455080>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 160, in define_transition
    args = tuple(self.index_of(name) for name in args)
                 │    │                          └ ('nms', 'descriptors', 'image_shape', 'pose_gt_forward', 'pose_gt_backward', 'intrinsics', 'depth_map_1', 'depth_map_2', 'cro...
                 │    └ <function Flow.index_of at 0x7fb48b443f40>
                 └ <silk.flow.Flow object at 0x7fb47f6b7460>

  File "/root/silk/silk/flow.py", line 160, in <genexpr>
    args = tuple(self.index_of(name) for name in args)
                 │    │        │         └ 'crop_point'
                 │    │        └ 'crop_point'
                 │    └ <function Flow.index_of at 0x7fb48b443f40>
                 └ <silk.flow.Flow object at 0x7fb47f6b7460>

  File "/root/silk/silk/flow.py", line 138, in index_of
    return self._name_to_index[name]
           │    │              └ 'crop_point'
           │    └ {'batch': 0, 'use_image_aug': 1, 'images_1': 3, 'images_2': 4, 'image_shape': 5, 'pose_gt_forward': 6, 'pose_gt_backward': 7,...
           └ <silk.flow.Flow object at 0x7fb47f6b7460>

KeyError: 'crop_point'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fb6d0b6ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fb6d15e6f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fb6d0b6ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fb6d01fe440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fb6d0ba9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fb6d0ba9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fb6d0ba9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fb6d005a830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fb6d0aef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fb6d02898d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fb6d0ba8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fb6d01fe3b0>
    │   └ <property object at 0x7fb6d14f8ea0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fb6d01fd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fb6d01fd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fb6d144dbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fb6d160e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7fb6d01fdd80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7fb6d01fde10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7fb6d0baa560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7fb6d0baa680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7fb6d0baa320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ "Error in call to target 'silk.models.silk.SiLKRandomHomographies':\nKeyError('crop_point')\nfull_key: mode.model"
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
KeyError('crop_point')
full_key: mode.model
2025-02-21 08:06:34.462 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:07:29.295 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:07:29.296 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:07:32.244 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:07:37.128 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (51932), thread 'MainThread' (139648947683776):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f028d1dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f028dc82f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f028d1dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f028c8aa440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f028d21dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f028d21de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f028d21dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f028c706830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f028d1672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f028c9358d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f028d21cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f028c8aa3b0>
    │   └ <property object at 0x7f028d246de0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f028c8a9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f028c8a96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f028daedbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f028dcae830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f028c561f00>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f003bc38220>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f00529479a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f0052947880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f00529603a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f00529605e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>
    │    └ <property object at 0x7f005294f600>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f0052960670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f0031752080>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f0052960790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f005294fb50>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>
    │    └ <function Trainer._run_sanity_check at 0x7f0052960940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f005276d030>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f00317510c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f00528f8d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f0052966920>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f00528db5b0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f0052966920>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f00527979a0>
                 │    │          └ <function Loop.run at 0x7f005288ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f0052966f50>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f0052966920>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f00527979a0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f00528e5e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f0052966f50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f00528e6290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f0052966f50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f0052a3f5b0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f0052966f50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f0095abdb40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f0031752080>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f0031751bd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f0095ab8cc0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f0031752080>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f013badc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f013b71c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f013badc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 513, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f003d157370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 483, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f003bdc7820>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (37, 38, 34, 39, 40)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f003bdc7820>
           │    │     │              │    └ ((0, ()), (1, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, [1]...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f003bdc7820>
           │    │     └ <function Flow.flow_from_tape at 0x7f0047aa0280>
           │    └ <silk.flow.Flow object at 0x7f003bdc75b0>
           └ <silk.flow.FixedOutputFlow object at 0x7f003bdc7820>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f003bdc6b30>, <silk.flow._InputExtraction object at 0x7f003bdc6a40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f003bdc75b0>
    │       └ 31
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f028d9803b0>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0., ...
           │    │          │         └ <property object at 0x7f028d980360>
           │    │          └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0., ...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f003bc39390>

  File "/root/silk/silk/models/silk.py", line 649, in _get_corr
    warped_positions_backward = sampler.transform_points(
                                │       └ <function HomographicSampler.transform_points at 0x7f003d336b90>
                                └ <silk.cv.homography.HomographicSampler object at 0x7f00317a0130>

  File "/root/silk/silk/cv/homography.py", line 707, in transform_points
    points[0,:,0] += crop_point[1].to(points.device)
    │                │                │      └ <attribute 'device' of 'torch._C.TensorBase' objects>
    │                │                └ tensor([[[   9.5000,    9.5000],
    │                │                           [  10.5000,    9.5000],
    │                │                           [  11.5000,    9.5000],
    │                │                           ...,
    │                │                           [12...
    │                └ tensor([[[[ 3.1187e-02,  3.0501e-02,  3.0361e-02,  ...,  1.5700e-02,
    │                              1.8301e-02,  2.5504e-02],
    │                            [ 6.2991...
    └ tensor([[[   9.5000,    9.5000],
               [  10.5000,    9.5000],
               [  11.5000,    9.5000],
               ...,
               [12...

RuntimeError: The size of tensor a (425216) must match the size of tensor b (1208) at non-singleton dimension 2
2025-02-21 08:07:37.393 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:09:55.769 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:09:55.770 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:09:58.658 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:09:59.715 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (53655), thread 'MainThread' (140437616103872):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 552, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7fb7dd6b6cb0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 304, in _init_loss_flow
    crop_point,

NameError: name 'crop_point' is not defined


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fba2d6dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fba2e152f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fba2d6dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fba2cd76440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fba2d71dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fba2d71de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fba2d71dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fba2cbd2830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fba2d6672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fba2ce01990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fba2d71cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fba2cd763b0>
    │   └ <property object at 0x7fba2d7470b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fba2cd75750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fba2cd756c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fba2dfb9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fba2e17e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7fba2cd75d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7fba2cd75e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7fba2d71e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7fba2d71e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7fba2d71e320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ 'Error in call to target \'silk.models.silk.SiLKRandomHomographies\':\nNameError("name \'crop_point\' is not defined")\nfull_...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
NameError("name 'crop_point' is not defined")
full_key: mode.model
2025-02-21 08:09:59.726 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:13:01.635 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:13:01.636 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:13:04.548 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:13:05.615 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (53786), thread 'MainThread' (139648449036736):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 543, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7f001f82acb0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 221, in _init_loss_flow
    self.flow.define_transition(
    │    └ <property object at 0x7f0029e68ef0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 163, in define_transition
    transition = _FunctionCall(function, *args, **kwargs)
                 │             │          │       └ {}
                 │             │          └ (11,)
                 │             └ <bound method SiLKBase._aug_images of SiLKRandomHomographies(
                 │                 (_module): MixedModuleDict(
                 │                   (_mods): ModuleDict(
                 │                     (m...
                 └ <class 'silk.flow._FunctionCall'>

  File "/root/silk/silk/flow.py", line 76, in __init__
    self._signature.bind(*args, **kwargs)
    │    │          │     │       └ {}
    │    │          │     └ (11,)
    │    │          └ <function Signature.bind at 0x7f026fdf9000>
    │    └ <Signature (images, use_image_aug)>
    └ <silk.flow._FunctionCall object at 0x7f001e21a6b0>

  File "/usr/lib/python3.10/inspect.py", line 3186, in bind
    return self._bind(args, kwargs)
           │    │     │     └ {}
           │    │     └ (11,)
           │    └ <function Signature._bind at 0x7f026fdf8f70>
           └ <Signature (images, use_image_aug)>
  File "/usr/lib/python3.10/inspect.py", line 3101, in _bind
    raise TypeError(msg) from None
                    └ "missing a required argument: 'use_image_aug'"

TypeError: missing a required argument: 'use_image_aug'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f026f66ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f02700f6f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f026f66ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f026ed02440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f026f6add80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f026f6ade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f026f6adcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f026eb72830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f026f5f32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f026ed89960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f026f6acee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f026ed023b0>
    │   └ <property object at 0x7f026f6d7010>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f026ed01750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f026ed016c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f026ff61bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f0270122830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f026ed01d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f026ed01e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f026f6ae560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f026f6ae680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7f026f6ae320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ 'Error in call to target \'silk.models.silk.SiLKRandomHomographies\':\nTypeError("missing a required argument: \'use_image_au...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
TypeError("missing a required argument: 'use_image_aug'")
full_key: mode.model
2025-02-21 08:13:05.633 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:13:37.927 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:13:37.927 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:13:40.894 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:13:41.963 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (53917), thread 'MainThread' (140615218524608):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 542, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7fe137712cb0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 286, in _init_loss_flow
    self.flow.define_transition(
    │    └ <property object at 0x7fe141e61170>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 163, in define_transition
    transition = _FunctionCall(function, *args, **kwargs)
                 │             │          │       └ {}
                 │             │          └ (20, 16, 5, 6, 7, 8, 9, 10, 5, 11)
                 │             └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
                 │                 (_module): MixedModuleDict(
                 │                   (_mods): ModuleDi...
                 └ <class 'silk.flow._FunctionCall'>

  File "/root/silk/silk/flow.py", line 76, in __init__
    self._signature.bind(*args, **kwargs)
    │    │          │     │       └ {}
    │    │          │     └ (20, 16, 5, 6, 7, 8, 9, 10, 5, 11)
    │    │          └ <function Signature.bind at 0x7fe387d2d000>
    │    └ <Signature (nms, descriptors, image_shape, pose_gt_forward, pose_gt_backward, intrinsics, depth_map_1, depth_map_2, crop_poin...
    └ <silk.flow._FunctionCall object at 0x7fe11dd65360>

  File "/usr/lib/python3.10/inspect.py", line 3186, in bind
    return self._bind(args, kwargs)
           │    │     │     └ {}
           │    │     └ (20, 16, 5, 6, 7, 8, 9, 10, 5, 11)
           │    └ <function Signature._bind at 0x7fe387d2cf70>
           └ <Signature (nms, descriptors, image_shape, pose_gt_forward, pose_gt_backward, intrinsics, depth_map_1, depth_map_2, crop_poin...
  File "/usr/lib/python3.10/inspect.py", line 3101, in _bind
    raise TypeError(msg) from None
                    └ "missing a required argument: 'img'"

TypeError: missing a required argument: 'img'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fe38755ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fe38802ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fe38755ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fe386c1e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fe38759dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fe38759de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fe38759dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fe386cd6830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fe3874e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fe386cad900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fe38759cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fe386c1e3b0>
    │   └ <property object at 0x7fe387583c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fe386c1d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fe386c1d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fe387e99bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fe38805a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7fe386c1dd80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7fe386c1de10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7fe38759e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7fe38759e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7fe38759e320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ 'Error in call to target \'silk.models.silk.SiLKRandomHomographies\':\nTypeError("missing a required argument: \'img\'")\nful...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
TypeError("missing a required argument: 'img'")
full_key: mode.model
2025-02-21 08:13:41.973 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:17:24.762 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:17:24.763 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:17:27.676 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:17:32.557 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (54048), thread 'MainThread' (139833936118208):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f2d9f46ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f2d9ff3af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f2d9f46ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f2d9eb2e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f2d9f4add80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f2d9f4ade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f2d9f4adcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f2d9e9b2830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f2d9f3f32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f2d9ebb5960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f2d9f4acee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f2d9eb2e3b0>
    │   └ <property object at 0x7f2d9f4d7060>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f2d9eb2d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f2d9eb2d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f2d9fda5bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f2d9ff66830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f2d9d795ba0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f2b464d5300>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f2b64be79a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f2b64be7880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f2b64bfc3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f2b64bfc5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>
    │    └ <property object at 0x7f2b64beb7e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f2b64bfc670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f2b46220790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f2b64bfc790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f2b64bebd30>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>
    │    └ <function Trainer._run_sanity_check at 0x7f2b64bfc940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f2b64c09210>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f2b46220970>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f2b64b98d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f2b64c02e90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f2b64b67790>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f2b64c02e90>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f2b64c30e80>
                 │    │          └ <function Loop.run at 0x7f2b64d26b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f2b64c03100>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f2b64c02e90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f2b64c30e80>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f2b64b85e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f2b64c03100>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f2b64b86290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f2b64c03100>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f2b64cdf5b0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f2b64c03100>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f2ba7db5b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f2b46220790>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f2b462239a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f2ba7da93f0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f2b46220790>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f2c4ddcc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f2c4da0c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f2c4ddcc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 499, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f2b4f67b2e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 469, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f2b4e066d70>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (37, 38, 34, 39, 40)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f2b4e066d70>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f2b4e066d70>
           │    │     └ <function Flow.flow_from_tape at 0x7f2b59c6c1f0>
           │    └ <silk.flow.Flow object at 0x7f2b4e067820>
           └ <silk.flow.FixedOutputFlow object at 0x7f2b4e066d70>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 31
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f2b4e067640>, <silk.flow._InputExtraction object at 0x7f2b4e066b90>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f2b4e067820>
    │       └ 31
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f2d9fc383b0>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0., ...
           │    │          │         └ <property object at 0x7f2d9fc38360>
           │    │          └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0., ...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f2b464d5420>

  File "/root/silk/silk/models/silk.py", line 642, in _get_corr
    crop_point = crop_point,

NameError: name 'crop_point' is not defined
2025-02-21 08:17:32.782 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:33:12.673 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:33:12.674 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:33:15.571 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:33:16.615 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (55834), thread 'MainThread' (140263732548032):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 542, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7f8f6129ec20>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 300, in _init_loss_flow
    self.flow.define_transition(
    │    └ <property object at 0x7f8f6ba85670>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 163, in define_transition
    transition = _FunctionCall(function, *args, **kwargs)
                 │             │          │       └ {}
                 │             │          └ (8, 6, 7, 22, 23, 13, 9, 10)
                 │             └ <function photometric_reconstruction_loss at 0x7f8f6129e320>
                 └ <class 'silk.flow._FunctionCall'>

  File "/root/silk/silk/flow.py", line 76, in __init__
    self._signature.bind(*args, **kwargs)
    │    │          │     │       └ {}
    │    │          │     └ (8, 6, 7, 22, 23, 13, 9, 10)
    │    │          └ <function Signature.bind at 0x7f91b1a09000>
    │    └ <Signature (pose, whole_images, depthpro, intrinsics, logits, descs, rel_pose)>
    └ <silk.flow._FunctionCall object at 0x7f8f582cd3f0>

  File "/usr/lib/python3.10/inspect.py", line 3186, in bind
    return self._bind(args, kwargs)
           │    │     │     └ {}
           │    │     └ (8, 6, 7, 22, 23, 13, 9, 10)
           │    └ <function Signature._bind at 0x7f91b1a08f70>
           └ <Signature (pose, whole_images, depthpro, intrinsics, logits, descs, rel_pose)>
  File "/usr/lib/python3.10/inspect.py", line 3107, in _bind
    raise TypeError('too many positional arguments') from None

TypeError: too many positional arguments


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f91b126ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f91b1d0af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f91b126ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f91b08fe440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f91b12a5d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f91b12a5e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f91b12a5cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f91b0782830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f91b11ef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f91b0989930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f91b12a4ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f91b08fe3b0>
    │   └ <property object at 0x7f91b12d2de0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f91b08fd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f91b08fd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f91b1b71bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f91b1d36830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f91b08fdd80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f91b08fde10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f91b12a6560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f91b12a6680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7f91b12a6320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ "Error in call to target 'silk.models.silk.SiLKRandomHomographies':\nTypeError('too many positional arguments')\nfull_key: mo...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
TypeError('too many positional arguments')
full_key: mode.model
2025-02-21 08:33:16.625 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:37:15.059 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:37:15.060 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:37:17.923 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:37:18.996 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (55965), thread 'MainThread' (140297877803456):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 543, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7f975454ac20>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 310, in _init_loss_flow
    prob,

NameError: name 'prob' is not defined


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f99a45dae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f99a507ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f99a45dae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f99a3ca6440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f99a4619d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f99a4619e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f99a4619cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f99a3b02830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f99a45632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f99a3d31990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f99a4618ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f99a3ca63b0>
    │   └ <property object at 0x7f99a4b29f30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f99a3ca5750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f99a3ca56c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f99a4ee5bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f99a50aa830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f99a3ca5d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f99a3ca5e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f99a461a560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f99a461a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7f99a461a320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ 'Error in call to target \'silk.models.silk.SiLKRandomHomographies\':\nNameError("name \'prob\' is not defined")\nfull_key: m...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
NameError("name 'prob' is not defined")
full_key: mode.model
2025-02-21 08:37:19.005 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:41:19.232 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:41:19.232 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:41:22.166 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:41:22.813 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (56096), thread 'MainThread' (140372559012288):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 644, in _locate
    obj = getattr(obj, part)
                  │    └ 'silk'
                  └ <module 'silk.models' from '/root/silk/silk/models/__init__.py'>

AttributeError: module 'silk.models' has no attribute 'silk'


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 650, in _locate
    obj = import_module(mod)
          │             └ 'silk.models.silk'
          └ <function import_module at 0x7fab08613e20>
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           │          │           │    │        │        └ 0
           │          │           │    │        └ None
           │          │           │    └ 0
           │          │           └ 'silk.models.silk'
           │          └ <function _gcd_import at 0x7fab08747400>
           └ <module '_frozen_importlib' (frozen)>
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed

  File "/root/silk/silk/models/silk.py", line 30, in <module>
    from silk.losses.sfmlearner.sfm_loss import epiploar_loss, photometric_reconstruction_loss

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 132, in <module>
    self.flow.define_transition(

NameError: name 'self' is not defined


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 134, in _resolve_target
    target = _locate(target)
             │       └ 'silk.models.silk.SiLKRandomHomographies'
             └ <function _locate at 0x7fab07baa170>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 658, in _locate
    raise ImportError(

ImportError: Error loading 'silk.models.silk.SiLKRandomHomographies':
NameError("name 'self' is not defined")


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fab07b6ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fab08612f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fab07b6ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fab071fe440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fab07ba9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fab07ba9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fab07ba9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fab07082830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fab07aef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fab07289900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fab07ba8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fab071fe3b0>
    │   └ <property object at 0x7fab07bd2e30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fab071fd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fab071fd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fab08479bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fab0863a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7fab071fdd80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7fab071fde10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7fab07baa560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7fab07baa680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 333, in instantiate_node
    _target_ = _resolve_target(node.get(_Keys.TARGET), full_key)
               │               │    │   │     │        └ 'mode.model'
               │               │    │   │     └ <_Keys.TARGET: '_target_'>
               │               │    │   └ <enum '_Keys'>
               │               │    └ <function DictConfig.get at 0x7fab07ff0f70>
               │               └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function _resolve_target at 0x7fab07baa4d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 139, in _resolve_target
    raise InstantiationException(msg) from e
          │                      └ "Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.
full_key: mode.model
2025-02-21 08:41:22.823 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:41:57.711 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:41:57.712 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:42:00.623 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:42:01.678 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (56224), thread 'MainThread' (140546801590720):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 542, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7fd1497c6cb0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 340, in _init_loss_flow
    self._loss_fn = self.flow.with_outputs(
    │               │    └ <property object at 0x7fd153e64fe0>
    │               └ SiLKRandomHomographies(
    │                   (_module): MixedModuleDict(
    │                     (_mods): ModuleDict(
    │                       (model): SiLKVGG(
    │                         (backbone): Pa...
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 250, in with_outputs
    return FixedOutputFlow(self, outputs)
           │               │     └ ('acontextual_descriptor_loss', 'keypoint_loss', 'recon_loss', 'precision', 'recall')
           │               └ <silk.flow.Flow object at 0x7fd148126d10>
           └ <class 'silk.flow.FixedOutputFlow'>

  File "/root/silk/silk/flow.py", line 290, in __init__
    self._tape = self._flow.get_tape(outputs)
    │            │    │     │        └ ('acontextual_descriptor_loss', 'keypoint_loss', 'recon_loss', 'precision', 'recall')
    │            │    │     └ <function Flow.get_tape at 0x7fd153e6c1f0>
    │            │    └ <silk.flow.Flow object at 0x7fd148126d10>
    │            └ <silk.flow.FixedOutputFlow object at 0x7fd148126c80>
    └ <silk.flow.FixedOutputFlow object at 0x7fd148126c80>

  File "/root/silk/silk/flow.py", line 185, in get_tape
    output_indexes = set(  # noqa: C401

  File "/root/silk/silk/flow.py", line 186, in <genexpr>
    self._name_to_index[name] for name in outputs
    │    │              │         └ 'acontextual_descriptor_loss'
    │    │              └ 'acontextual_descriptor_loss'
    │    └ {'batch': 0, 'use_image_aug': 1, 'images_1': 3, 'images_2': 4, 'image_shape': 5, 'pose_gt_forward': 6, 'pose_gt_backward': 7,...
    └ <silk.flow.Flow object at 0x7fd148126d10>

KeyError: 'acontextual_descriptor_loss'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fd3995d6e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fd39a0bef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fd3995d6e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fd398cda440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fd399615d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fd399615e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fd399615cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fd398b36830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fd39955f2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fd398d65900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fd399614ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fd398cda3b0>
    │   └ <property object at 0x7fd3995fbb50>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fd398cd9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fd398cd96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fd399f25bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fd39a0e6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7fd398cd9d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7fd398cd9e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7fd399616560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7fd399616680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7fd399616320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ "Error in call to target 'silk.models.silk.SiLKRandomHomographies':\nKeyError('acontextual_descriptor_loss')\nfull_key: mode....
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
KeyError('acontextual_descriptor_loss')
full_key: mode.model
2025-02-21 08:42:01.688 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:58:04.030 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:58:04.031 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:58:07.016 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:58:08.094 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (56355), thread 'MainThread' (140587287953856):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 542, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7fdab690ad40>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 340, in _init_loss_flow
    self._loss_fn = self.flow.with_outputs(
    │               │    └ <property object at 0x7fdac129d120>
    │               └ SiLKRandomHomographies(
    │                   (_module): MixedModuleDict(
    │                     (_mods): ModuleDict(
    │                       (model): SiLKVGG(
    │                         (backbone): Pa...
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 250, in with_outputs
    return FixedOutputFlow(self, outputs)
           │               │     └ ('recon_loss', 'precision', 'recall')
           │               └ <silk.flow.Flow object at 0x7fdab54eadd0>
           └ <class 'silk.flow.FixedOutputFlow'>

  File "/root/silk/silk/flow.py", line 290, in __init__
    self._tape = self._flow.get_tape(outputs)
    │            │    │     │        └ ('recon_loss', 'precision', 'recall')
    │            │    │     └ <function Flow.get_tape at 0x7fdac12a4160>
    │            │    └ <silk.flow.Flow object at 0x7fdab54eadd0>
    │            └ <silk.flow.FixedOutputFlow object at 0x7fdab54ead40>
    └ <silk.flow.FixedOutputFlow object at 0x7fdab54ead40>

  File "/root/silk/silk/flow.py", line 185, in get_tape
    output_indexes = set(  # noqa: C401

  File "/root/silk/silk/flow.py", line 186, in <genexpr>
    self._name_to_index[name] for name in outputs
    │    │              │         └ 'precision'
    │    │              └ 'precision'
    │    └ {'batch': 0, 'use_image_aug': 1, 'images_1': 3, 'images_2': 4, 'image_shape': 5, 'pose_gt_forward': 6, 'pose_gt_backward': 7,...
    └ <silk.flow.Flow object at 0x7fdab54eadd0>

KeyError: 'precision'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fdd068e2e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fdd07386f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fdd068e2e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fdd05fae440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fdd0691dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fdd0691de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fdd0691dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fdd05e0a830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fdd0686b2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fdd06039930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fdd0691cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fdd05fae3b0>
    │   └ <property object at 0x7fdd0690bce0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fdd05fad750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fdd05fad6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fdd071f1bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fdd073b2830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7fdd05fadd80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7fdd05fade10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7fdd0691e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7fdd0691e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7fdd0691e320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ "Error in call to target 'silk.models.silk.SiLKRandomHomographies':\nKeyError('precision')\nfull_key: mode.model"
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
KeyError('precision')
full_key: mode.model
2025-02-21 08:58:08.104 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:58:16.199 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:58:16.200 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:58:19.153 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:58:24.136 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (56486), thread 'MainThread' (140659460706752):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fedd45dae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fedd50d2f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fedd45dae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fedd3cde440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fedd4619d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fedd4619e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fedd4619cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fedd3b56830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fedd45632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fedd3d698d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fedd4618ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fedd3cde3b0>
    │   └ <property object at 0x7fedd4642e80>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fedd3cdd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fedd3cdd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fedd4f39bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fedd50fe830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7feb99c300a0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7feb830a8940>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7feb99bcb9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7feb99bcb880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7feb99be43a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7feb99be45e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>
    │    └ <property object at 0x7feb99bd36a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7feb99be4670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7feb99c16830>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7feb99be4790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7feb99bd3bf0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>
    │    └ <function Trainer._run_sanity_check at 0x7feb99be4940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7feb99be90d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feb99c15570>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7feb99d80d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7feb99beffa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7feb99d636a0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7feb99beffa0>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7feb76c67370>
                 │    │          └ <function Loop.run at 0x7feb99d12b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7feb99bedb10>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7feb99beffa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7feb76c67370>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7feb99d6de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7feb99bedb10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7feb99d6e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7feb99bedb10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7feb99ecb4c0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7feb99bedb10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7febdcfc1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7feb99c16830>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7feb99c16320>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7febdcfad710>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7feb99c16830>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fec82fd85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fec82c18280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fec82fd85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 499, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7feb84667370>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 469, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7feb83233a00>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (30,)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7feb83233a00>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, [11]), (13, [12]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7feb83233a00>
           │    │     └ <function Flow.flow_from_tape at 0x7feb8eec41f0>
           │    └ <silk.flow.Flow object at 0x7feb83233490>
           └ <silk.flow.FixedOutputFlow object at 0x7feb83233a00>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 30
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7feb832335b0>, <silk.flow._InputExtraction object at 0x7feb83232a70>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7feb83233490>
    │       └ 30
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fedd4dcc4f0>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.6157, 0.6667, 0.7216,  ..., 0.1137, 0.1255, 0.0824],
           │    │          │         │                   [0.6431, 0.6824, 0....
           │    │          │         └ <property object at 0x7fedd4dcc4a0>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.6157, 0.6667, 0.7216,  ..., 0.1137, 0.1255, 0.0824],
           │    │                      [0.6431, 0.6824, 0....
           │    └ <function photometric_reconstruction_loss at 0x7feb84666440>
           └ <silk.flow._FunctionCall object at 0x7feb830a9390>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 133, in photometric_reconstruction_loss
    a = torch.matmul(rel_pose[0], torch.linalg.inv(pose))
        │     │                   │     │      └ <built-in function linalg_inv>
        │     │                   │     └ <module 'torch.linalg' from '/usr/local/lib/python3.10/dist-packages/torch/linalg/__init__.py'>
        │     │                   └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
        │     └ <built-in method matmul of type object at 0x7fedd1a59840>
        └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

UnboundLocalError: local variable 'rel_pose' referenced before assignment
2025-02-21 08:58:24.244 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 08:59:02.401 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 08:59:02.402 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 08:59:05.308 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 08:59:10.286 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (58272), thread 'MainThread' (139948210356672):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f483a8e2e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f483b3a2f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f483a8e2e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f4839fae440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f483a921d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f483a921e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f483a921cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f4839e26830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f483a86b2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f483a039900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f483a920ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f4839fae3b0>
    │   └ <property object at 0x7f483a94b100>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f4839fad750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f4839fad6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f483b20dbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f483b3ce830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f4839c859c0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f45e113cbb0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f460005f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f460005f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f46000743a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f46000745e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>
    │    └ <property object at 0x7f46000675b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f4600074670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f45e0f65930>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f4600074790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f4600067b00>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>
    │    └ <function Trainer._run_sanity_check at 0x7f4600074940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f460007cfe0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f45e0f67f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f4600010d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f460007bca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f45ffff3600>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f460007bca0>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f45ffea62f0>
                 │    │          └ <function Loop.run at 0x7f45fffa2b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f460007b4f0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f460007bca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f45ffea62f0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f45ffff9e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f460007b4f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f45ffffa290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f460007b4f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f4600157510>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f460007b4f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f4643221b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f45e0f65930>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f45e0f65f00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f464320d800>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f45e0f65930>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f46e91e05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f46e8e20280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f46e91e05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 499, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f45eaaef2e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 469, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f45e94c2d40>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (30,)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f45e94c2d40>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, [11]), (13, [12]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f45e94c2d40>
           │    │     └ <function Flow.flow_from_tape at 0x7f45f528c280>
           │    └ <silk.flow.Flow object at 0x7f45e94c37f0>
           └ <silk.flow.FixedOutputFlow object at 0x7f45e94c2d40>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 30
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f45e94c3610>, <silk.flow._InputExtraction object at 0x7f45e94c2b60>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f45e94c37f0>
    │       └ 30
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f483b0a03b0>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.6353, 0.6863, 0.6902,  ..., 0.1176, 0.1333, 0.1137],
           │    │          │         │                   [0.6392, 0.6706, 0....
           │    │          │         └ <property object at 0x7f483b0a0360>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.6353, 0.6863, 0.6902,  ..., 0.1176, 0.1333, 0.1137],
           │    │                      [0.6392, 0.6706, 0....
           │    └ <function photometric_reconstruction_loss at 0x7f45eaaee3b0>
           └ <silk.flow._FunctionCall object at 0x7f45e113d450>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 176, in photometric_reconstruction_loss
    reconstruction_loss, desc_loss = compute_diff(intrinsics, pose_gt_backward, logits[1], logits[0], im_1.clone(), im_0.clone(), depth_map_0, positions.clone(), shape)
                                     │            │           │                 │          │          │    │        │    │        │            │         │        └ torch.Size([1, 370, 1226])
                                     │            │           │                 │          │          │    │        │    │        │            │         └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        │    │        │            └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                                     │            │           │                 │          │          │    │        │    │        │                        1.2245e+03, 1.2255e+03],
                                     │            │           │                 │          │          │    │        │    │        │                       [5.0000e-01, 5.00...
                                     │            │           │                 │          │          │    │        │    │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                     │            │           │                 │          │          │    │        │    │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                     │            │           │                 │          │          │    │        │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        └ tensor([[[[0.6353, 0.6863, 0.6902,  ..., 0.1176, 0.1333, 0.1137],
                                     │            │           │                 │          │          │    │                    [0.6392, 0.6706, 0.7686,  ..., 0.0824, 0.0902, 0....
                                     │            │           │                 │          │          │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          └ tensor([[[[0.2549, 0.2510, 0.2471,  ..., 0.0549, 0.0588, 0.0588],
                                     │            │           │                 │          │                      [0.2549, 0.2510, 0.2471,  ..., 0.0549, 0.0588, 0....
                                     │            │           │                 │          └ tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                 │                     [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.00...
                                     │            │           │                 └ tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                            [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.00...
                                     │            │           └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                     │            │                     [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                     │            │              ...
                                     │            └ tensor([[707.0912,   0.0000, 601.8873],
                                     │                      [  0.0000, 707.0912, 183.1104],
                                     │                      [  0.0000,   0.0000,   1.0000]], devi...
                                     └ <function compute_diff at 0x7f45eaaee440>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 196, in compute_diff
    image_0_warped, valid_points_1, bf_norm = inverse_warp(image_0, depth_map_1, pose_inv,
                                              │            │        │            └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                              │            │        │                      [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                              │            │        │               ...
                                              │            │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                              │            │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                              │            └ tensor([[[[0.2549, 0.2510, 0.2471,  ..., 0.0549, 0.0588, 0.0588],
                                              │                        [0.2549, 0.2510, 0.2471,  ..., 0.0549, 0.0588, 0....
                                              └ <function inverse_warp at 0x7f45eaaee560>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 448, in inverse_warp
    cam_coords = HomographicSampler.pixel2cam(depth, intrinsics.inverse(), positions, shape)  # [B,3,H,W]
                 │                  │         │      │          │          │          └ torch.Size([1, 370, 1226])
                 │                  │         │      │          │          └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                 │                  │         │      │          │                      1.2245e+03, 1.2255e+03],
                 │                  │         │      │          │                     [5.0000e-01, 5.00...
                 │                  │         │      │          └ <method 'inverse' of 'torch._C.TensorBase' objects>
                 │                  │         │      └ tensor([[707.0912,   0.0000, 601.8873],
                 │                  │         │                [  0.0000, 707.0912, 183.1104],
                 │                  │         │                [  0.0000,   0.0000,   1.0000]], devi...
                 │                  │         └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                 │                  │                    [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                 │                  └ <staticmethod(<function HomographicSampler.pixel2cam at 0x7f45eaad2950>)>
                 └ <class 'silk.cv.homography.HomographicSampler'>

  File "/root/silk/silk/cv/homography.py", line 494, in pixel2cam
    points_[:,:,0] = points_[:,:,0]/(shape[2].to("cuda:1")/2) - 1
    │                │               └ torch.Size([1, 370, 1226])
    │                └ tensor([[[5.0000e-01, 5.0000e-01],
    │                           [1.5000e+00, 5.0000e-01],
    │                           [2.5000e+00, 5.0000e-01],
    │                           ...,
    │                        ...
    └ tensor([[[5.0000e-01, 5.0000e-01],
               [1.5000e+00, 5.0000e-01],
               [2.5000e+00, 5.0000e-01],
               ...,
            ...

AttributeError: 'int' object has no attribute 'to'
2025-02-21 08:59:10.417 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 09:01:34.207 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 09:01:34.208 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 09:01:37.104 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 09:01:42.063 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (60058), thread 'MainThread' (140424009966016):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fb7026dae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fb703186f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fb7026dae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fb701da6440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fb702719d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fb702719e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fb702719cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fb701c02830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fb7026632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fb701e31900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fb702718ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fb701da63b0>
    │   └ <property object at 0x7fb702dba1b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fb701da5750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fb701da56c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fb702fedbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fb7031ae830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fb4c7cbc040>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fb4b1158940>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fb4c7e5b9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fb4c7e5b880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fb4c7e703a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fb4c7e705e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>
    │    └ <property object at 0x7fb4c7e63560>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fb4c7e70670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fb4c7ca0bb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fb4c7e70790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fb4c7e63ab0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>
    │    └ <function Trainer._run_sanity_check at 0x7fb4c7e70940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fb4c7e78f90>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fb4c7ca0640>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fb4c7e0cd30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fb4c7c7ac80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fb4c7def470>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fb4c7c7ac80>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fb4a8ad9ab0>
                 │    │          └ <function Loop.run at 0x7fb4c7d9eb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fb4c7c7ace0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fb4c7c7ac80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fb4a8ad9ab0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fb4c7df9e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fb4c7c7ace0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fb4c7dfa290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fb4c7c7ace0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fb4c7f57240>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fb4c7c7ace0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fb50b029b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fb4c7ca0bb0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fb4c7ca0a00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fb50b01cfe0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fb4c7ca0bb0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fb5b0fd45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fb5b0c14280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fb5b0fd45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 499, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fb4b26f7130>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 469, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fb4b12e7970>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (30,)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fb4b12e7970>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, [11]), (13, [12]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fb4b12e7970>
           │    │     └ <function Flow.flow_from_tape at 0x7fb4bd09c280>
           │    └ <silk.flow.Flow object at 0x7fb4b12e7400>
           └ <silk.flow.FixedOutputFlow object at 0x7fb4b12e7970>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 30
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fb4b12e7520>, <silk.flow._InputExtraction object at 0x7fb4b12e69e0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fb4b12e7400>
    │       └ 30
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fb702e745e0>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.5216, 0.5529, 0.5843,  ..., 0.0667, 0.0667, 0.0667],
           │    │          │         │                   [0.5059, 0.5608, 0....
           │    │          │         └ <property object at 0x7fb702e74590>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.5216, 0.5529, 0.5843,  ..., 0.0667, 0.0667, 0.0667],
           │    │                      [0.5059, 0.5608, 0....
           │    └ <function photometric_reconstruction_loss at 0x7fb4b26f6200>
           └ <silk.flow._FunctionCall object at 0x7fb4b1158670>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 176, in photometric_reconstruction_loss
    reconstruction_loss, desc_loss = compute_diff(intrinsics, pose_gt_backward, logits[1], logits[0], im_1.clone(), im_0.clone(), depth_map_0, positions.clone(), shape)
                                     │            │           │                 │          │          │    │        │    │        │            │         │        └ torch.Size([1, 370, 1226])
                                     │            │           │                 │          │          │    │        │    │        │            │         └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        │    │        │            └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                                     │            │           │                 │          │          │    │        │    │        │                        1.2245e+03, 1.2255e+03],
                                     │            │           │                 │          │          │    │        │    │        │                       [5.0000e-01, 5.00...
                                     │            │           │                 │          │          │    │        │    │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                     │            │           │                 │          │          │    │        │    │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                     │            │           │                 │          │          │    │        │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        └ tensor([[[[0.5216, 0.5529, 0.5843,  ..., 0.0667, 0.0667, 0.0667],
                                     │            │           │                 │          │          │    │                    [0.5059, 0.5608, 0.6314,  ..., 0.0588, 0.0627, 0....
                                     │            │           │                 │          │          │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          └ tensor([[[[0.1804, 0.1725, 0.1529,  ..., 0.0275, 0.0275, 0.0235],
                                     │            │           │                 │          │                      [0.1843, 0.1765, 0.1529,  ..., 0.0275, 0.0275, 0....
                                     │            │           │                 │          └ tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                 │                     [0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                 │                     [0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                 │              ...
                                     │            │           │                 └ tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                            [0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                            [0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                     ...
                                     │            │           └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                     │            │                     [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                     │            │              ...
                                     │            └ tensor([[707.0912,   0.0000, 601.8873],
                                     │                      [  0.0000, 707.0912, 183.1104],
                                     │                      [  0.0000,   0.0000,   1.0000]], devi...
                                     └ <function compute_diff at 0x7fb4b26f6290>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 196, in compute_diff
    image_0_warped, valid_points_1, bf_norm = inverse_warp(image_0, depth_map_1, pose_inv,
                                              │            │        │            └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                              │            │        │                      [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                              │            │        │               ...
                                              │            │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                              │            │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                              │            └ tensor([[[[0.1804, 0.1725, 0.1529,  ..., 0.0275, 0.0275, 0.0235],
                                              │                        [0.1843, 0.1765, 0.1529,  ..., 0.0275, 0.0275, 0....
                                              └ <function inverse_warp at 0x7fb4b26f63b0>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 464, in inverse_warp
    src_pixel_coords, bf_norm  = HomographicSampler.cam2pixel_forward(cam_coords.double(), pose_mat, intrinsics.double(), normalize=True, shape = shape)
                                 │                  │                 │          │         │         │          │                                 └ torch.Size([1, 370, 1226])
                                 │                  │                 │          │         │         │          └ <method 'double' of 'torch._C.TensorBase' objects>
                                 │                  │                 │          │         │         └ tensor([[707.0912,   0.0000, 601.8873],
                                 │                  │                 │          │         │                   [  0.0000, 707.0912, 183.1104],
                                 │                  │                 │          │         │                   [  0.0000,   0.0000,   1.0000]], devi...
                                 │                  │                 │          │         └ tensor([[[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                 │                  │                 │          │                    [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],...
                                 │                  │                 │          └ <method 'double' of 'torch._C.TensorBase' objects>
                                 │                  │                 └ tensor([[[-23.7686, -14.9932, -13.8447,  ...,   4.6234,   4.6159,   4.4892],
                                 │                  │                            [ -7.2173,  -4.5603,  -4.2179,  ...,   ...
                                 │                  └ <staticmethod(<function HomographicSampler.cam2pixel_forward at 0x7fb4b28ee8c0>)>
                                 └ <class 'silk.cv.homography.HomographicSampler'>

TypeError: HomographicSampler.cam2pixel_forward() got an unexpected keyword argument 'shape'
2025-02-21 09:01:42.192 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 09:03:28.441 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 09:03:28.442 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 09:03:31.392 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 09:03:36.445 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (61844), thread 'MainThread' (139921176740288):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f41ef3dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f41efe5ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f41ef3dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f41eea76440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f41ef419d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f41ef419e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f41ef419cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f41ee8da830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f41ef3672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f41eeb05900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f41ef418ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f41eea763b0>
    │   └ <property object at 0x7f41ef407ce0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f41eea75750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f41eea756c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f41efcc9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f41efe8a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f3fb4994040>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f3f9de14bb0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f3fb4b2f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f3fb4b2f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f3fb49483a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f3fb49485e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>
    │    └ <property object at 0x7f3fb4b33790>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f3fb4948670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f3f96264070>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f3fb4948790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f3fb4b33ce0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>
    │    └ <function Trainer._run_sanity_check at 0x7f3fb4948940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f3fb494d1c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3f96264ee0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f3fb4ae0d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f3fb4952b60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f3fb4aab740>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f3fb4952b60>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f3fb497a3b0>
                 │    │          └ <function Loop.run at 0x7f3fb4a72b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f3fb4951870>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f3fb4952b60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f3fb497a3b0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f3fb4acde10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f3fb4951870>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f3fb4ace290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f3fb4951870>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f3fb4c2f4c0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f3fb4951870>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f3ff7cc9b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f3f96264070>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f3f962661a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f3ff7cc10d0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f3f96264070>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f409dbd85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f409d818280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f409dbd85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 499, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f3f9f34b1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 469, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f3f9dfa2d40>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (30,)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f3f9dfa2d40>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, [11]), (13, [12]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f3f9dfa2d40>
           │    │     └ <function Flow.flow_from_tape at 0x7f3fa9ca4280>
           │    └ <silk.flow.Flow object at 0x7f3f9dfa37f0>
           └ <silk.flow.FixedOutputFlow object at 0x7f3f9dfa2d40>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 30
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f3f9dfa3610>, <silk.flow._InputExtraction object at 0x7f3f9dfa2b60>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f3f9dfa37f0>
    │       └ 30
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f41efb5c220>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.4941, 0.5333, 0.5647,  ..., 0.0000, 0.0000, 0.0000],
           │    │          │         │                   [0.5059, 0.5451, 0....
           │    │          │         └ <property object at 0x7f41efb5c1d0>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.4941, 0.5333, 0.5647,  ..., 0.0000, 0.0000, 0.0000],
           │    │                      [0.5059, 0.5451, 0....
           │    └ <function photometric_reconstruction_loss at 0x7f3f9f34a290>
           └ <silk.flow._FunctionCall object at 0x7f3f9de15450>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 176, in photometric_reconstruction_loss
    reconstruction_loss, desc_loss = compute_diff(intrinsics, pose_gt_backward, logits[1], logits[0], im_1.clone(), im_0.clone(), depth_map_0, positions.clone(), shape)
                                     │            │           │                 │          │          │    │        │    │        │            │         │        └ torch.Size([1, 370, 1226])
                                     │            │           │                 │          │          │    │        │    │        │            │         └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        │    │        │            └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                                     │            │           │                 │          │          │    │        │    │        │                        1.2245e+03, 1.2255e+03],
                                     │            │           │                 │          │          │    │        │    │        │                       [5.0000e-01, 5.00...
                                     │            │           │                 │          │          │    │        │    │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                     │            │           │                 │          │          │    │        │    │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                     │            │           │                 │          │          │    │        │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        └ tensor([[[[0.4941, 0.5333, 0.5647,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                 │          │          │    │                    [0.5059, 0.5451, 0.5686,  ..., 0.0078, 0.0157, 0....
                                     │            │           │                 │          │          │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          └ tensor([[[[0.3059, 0.2863, 0.2706,  ..., 0.1137, 0.1059, 0.1098],
                                     │            │           │                 │          │                      [0.3059, 0.2941, 0.2392,  ..., 0.0902, 0.0902, 0....
                                     │            │           │                 │          └ tensor([[[0.8332, 0.8402, 0.8388,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                 │                     [0.8316, 0.8389, 0.8354,  ..., 0.0000, 0.0000, 0.00...
                                     │            │           │                 └ tensor([[[0.8332, 0.8402, 0.8388,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                            [0.8316, 0.8389, 0.8354,  ..., 0.0000, 0.0000, 0.00...
                                     │            │           └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                     │            │                     [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                     │            │              ...
                                     │            └ tensor([[707.0912,   0.0000, 601.8873],
                                     │                      [  0.0000, 707.0912, 183.1104],
                                     │                      [  0.0000,   0.0000,   1.0000]], devi...
                                     └ <function compute_diff at 0x7f3f9f34a320>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 196, in compute_diff
    image_0_warped, valid_points_1, bf_norm = inverse_warp(image_0, depth_map_1, pose_inv,
                                              │            │        │            └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                              │            │        │                      [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                              │            │        │               ...
                                              │            │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                              │            │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                              │            └ tensor([[[[0.3059, 0.2863, 0.2706,  ..., 0.1137, 0.1059, 0.1098],
                                              │                        [0.3059, 0.2941, 0.2392,  ..., 0.0902, 0.0902, 0....
                                              └ <function inverse_warp at 0x7f3f9f34a440>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 448, in inverse_warp
    cam_coords = HomographicSampler.pixel2cam(depth, intrinsics.inverse(), positions, shape)  # [B,3,H,W]
                 │                  │         │      │          │          │          └ torch.Size([1, 370, 1226])
                 │                  │         │      │          │          └ tensor([[[-0.9992, -0.9976, -0.9959,  ...,  0.9959,  0.9976,  0.9992],
                 │                  │         │      │          │                     [-0.9973, -0.9973, -0.9973,  ...,  0.9973,  0...
                 │                  │         │      │          └ <method 'inverse' of 'torch._C.TensorBase' objects>
                 │                  │         │      └ tensor([[707.0912,   0.0000, 601.8873],
                 │                  │         │                [  0.0000, 707.0912, 183.1104],
                 │                  │         │                [  0.0000,   0.0000,   1.0000]], devi...
                 │                  │         └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                 │                  │                    [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                 │                  └ <staticmethod(<function HomographicSampler.pixel2cam at 0x7f3f9f53a7a0>)>
                 └ <class 'silk.cv.homography.HomographicSampler'>

  File "/root/silk/silk/cv/homography.py", line 510, in pixel2cam
    depth = grid_sample(depth.unsqueeze(0), points_.unsqueeze(0), align_corners=False, mode="nearest")
            │           │     │             │       └ <method 'unsqueeze' of 'torch._C.TensorBase' objects>
            │           │     │             └ tensor([[[-0.9992, -0.9973],
            │           │     │                        [-0.9976, -0.9973],
            │           │     │                        [-0.9959, -0.9973],
            │           │     │                        ...,
            │           │     │                        [ 0.9959,  0.99...
            │           │     └ <method 'unsqueeze' of 'torch._C.TensorBase' objects>
            │           └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
            │                      [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
            └ <function grid_sample at 0x7f409dab5fc0>

  File "/usr/local/lib/python3.10/dist-packages/torch/nn/functional.py", line 4324, in grid_sample
    return torch.grid_sampler(input, grid, mode_enum, padding_mode_enum, align_corners)
           │     │            │      │     │          │                  └ False
           │     │            │      │     │          └ 0
           │     │            │      │     └ 1
           │     │            │      └ tensor([[[[-0.9992, -0.9973],
           │     │            │                  [-0.9976, -0.9973],
           │     │            │                  [-0.9959, -0.9973],
           │     │            │                  ...,
           │     │            │                  [ 0.9959, ...
           │     │            └ tensor([[[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
           │     │                        [19.2052, 17.6806, 17.5964,  ..., 37.8768, ...
           │     └ <built-in method grid_sampler of type object at 0x7f41ec659840>
           └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

RuntimeError: expected scalar type Double but found Float
2025-02-21 09:03:36.585 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 09:04:45.541 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 09:04:45.541 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 09:04:48.478 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 09:04:53.390 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 09:06:41.238 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 09:06:41.239 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 09:06:44.180 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 09:06:49.093 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 09:07:20.699 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 09:07:20.699 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 09:07:23.622 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 09:07:28.705 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (67202), thread 'MainThread' (140389764628928):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7faf093dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7faf09e9af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7faf093dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7faf08aaa440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7faf0941dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7faf0941de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7faf0941dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7faf08922830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7faf093672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7faf08b31960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7faf0941cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7faf08aaa3b0>
    │   └ <property object at 0x7faf094470b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7faf08aa9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7faf08aa96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7faf09d05bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7faf09ec6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7faf077a18d0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7facb0430bb0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7facceb5f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7facceb5f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7facceb783a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7facceb785e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>
    │    └ <property object at 0x7facceb63a10>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7facceb78670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7facb0250ca0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7facceb78790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7facceb63f60>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>
    │    └ <function Trainer._run_sanity_check at 0x7facceb78940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7facceb7d440>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7facb0253820>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7facceb10d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7facceb81d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7facceadb970>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7facceb81d50>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7facce9a5c30>
                 │    │          └ <function Loop.run at 0x7facceaa2b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7facceb82a70>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7facceb81d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7facce9a5c30>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7facceafde10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7facceb82a70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7facceafe290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7facceb82a70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7faccec53830>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7facceb82a70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fad11d09b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7facb0250ca0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7facb0251ba0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fad11d01030>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7facb0250ca0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fadb7ddc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fadb7a1c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fadb7ddc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 499, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7facb95c71c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 469, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7facb7fc2ce0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (30,)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7facb7fc2ce0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, [11]), (13, [12]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7facb7fc2ce0>
           │    │     └ <function Flow.flow_from_tape at 0x7facc3c8c280>
           │    └ <silk.flow.Flow object at 0x7facb7fc2d70>
           └ <silk.flow.FixedOutputFlow object at 0x7facb7fc2ce0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 30
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7facb7fc38b0>, <silk.flow._InputExtraction object at 0x7facb7fc2c50>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7facb7fc2d70>
    │       └ 30
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7faf09b983b0>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.1569, 0.0902, 0.0392,  ..., 0.0039, 0.0275, 0.0000],
           │    │          │         │                   [0.1569, 0.0941, 0....
           │    │          │         └ <property object at 0x7faf09b98360>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.1569, 0.0902, 0.0392,  ..., 0.0039, 0.0275, 0.0000],
           │    │                      [0.1569, 0.0941, 0....
           │    └ <function photometric_reconstruction_loss at 0x7facb95c6290>
           └ <silk.flow._FunctionCall object at 0x7facb04314e0>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 176, in photometric_reconstruction_loss
    reconstruction_loss, desc_loss = compute_diff(intrinsics, pose_gt_backward, logits[1], logits[0], im_1.clone(), im_0.clone(), depth_map_0, positions.clone(), shape)
                                     │            │           │                 │          │          │    │        │    │        │            │         │        └ torch.Size([1, 370, 1226])
                                     │            │           │                 │          │          │    │        │    │        │            │         └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        │    │        │            └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                                     │            │           │                 │          │          │    │        │    │        │                        1.2245e+03, 1.2255e+03],
                                     │            │           │                 │          │          │    │        │    │        │                       [5.0000e-01, 5.00...
                                     │            │           │                 │          │          │    │        │    │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                     │            │           │                 │          │          │    │        │    │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                     │            │           │                 │          │          │    │        │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        └ tensor([[[[0.1569, 0.0902, 0.0392,  ..., 0.0039, 0.0275, 0.0000],
                                     │            │           │                 │          │          │    │                    [0.1569, 0.0941, 0.0510,  ..., 0.0000, 0.0039, 0....
                                     │            │           │                 │          │          │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          └ tensor([[[[0.0353, 0.0353, 0.0392,  ..., 0.0196, 0.0000, 0.0000],
                                     │            │           │                 │          │                      [0.0353, 0.0353, 0.0196,  ..., 0.0000, 0.0000, 0....
                                     │            │           │                 │          └ tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                 │                     [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.00...
                                     │            │           │                 └ tensor([[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                            [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.00...
                                     │            │           └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                     │            │                     [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                     │            │              ...
                                     │            └ tensor([[707.0912,   0.0000, 601.8873],
                                     │                      [  0.0000, 707.0912, 183.1104],
                                     │                      [  0.0000,   0.0000,   1.0000]], devi...
                                     └ <function compute_diff at 0x7facb95c6320>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 288, in compute_diff
    dummy_score = torch.full(descs_1[0].shape, fill_value=1, device=descs_1.device, dtype=torch.float32).unsqueeze(0)
                  │     │                                                                 │     └ torch.float32
                  │     │                                                                 └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
                  │     └ <built-in method full of type object at 0x7faf06859840>
                  └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

UnboundLocalError: local variable 'descs_1' referenced before assignment
2025-02-21 09:07:28.820 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 09:18:45.265 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 09:18:45.266 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 09:18:48.202 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 09:18:53.251 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (68988), thread 'MainThread' (139929353306560):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f43d6972e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f43d7426f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f43d6972e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f43d6032440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f43d69b1d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f43d69b1e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f43d69b1cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f43d5ea2830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f43d68f72e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f43d60bd960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f43d69b0ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f43d60323b0>
    │   └ <property object at 0x7f43d69db0b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f43d6031750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f43d60316c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f43d7291bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f43d7452830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f43d5cfd990>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f417d1ccbb0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f419c0ff9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f419c0ff880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f419c1143a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f419c1145e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>
    │    └ <property object at 0x7f419c1037e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f419c114670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f417ce95db0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f419c114790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f419c103d30>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>
    │    └ <function Trainer._run_sanity_check at 0x7f419c114940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f419c121210>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f417ce94c70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f419c0b0d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f419c11fe20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f419c08f6f0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f419c11fe20>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f419bf41c90>
                 │    │          └ <function Loop.run at 0x7f419c042b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f419c11efe0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f419c11fe20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f419bf41c90>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f419c09de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f419c11efe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f419c09e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f419c11efe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f419c1fb560>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f419c11efe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f41df2c5b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f417ce95db0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f417ce960e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f41df2b9260>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f417ce95db0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f42851d05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f4284e10280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f42851d05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 499, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f41869430a0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 469, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f4185562e00>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (30,)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f4185562e00>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, [11]), (13, [12]), (1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f4185562e00>
           │    │     └ <function Flow.flow_from_tape at 0x7f41912941f0>
           │    └ <silk.flow.Flow object at 0x7f41855638b0>
           └ <silk.flow.FixedOutputFlow object at 0x7f4185562e00>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 30
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f41855636d0>, <silk.flow._InputExtraction object at 0x7f4185562c20>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f41855638b0>
    │       └ 30
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f43d71243b0>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.4980, 0.4941, 0.5294,  ..., 0.0118, 0.0000, 0.0196],
           │    │          │         │                   [0.4667, 0.5020, 0....
           │    │          │         └ <property object at 0x7f43d7124360>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.4980, 0.4941, 0.5294,  ..., 0.0118, 0.0000, 0.0196],
           │    │                      [0.4667, 0.5020, 0....
           │    └ <function photometric_reconstruction_loss at 0x7f4186942170>
           └ <silk.flow._FunctionCall object at 0x7f417d1cd540>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 176, in photometric_reconstruction_loss
    reconstruction_loss, desc_loss = compute_diff(intrinsics, pose_gt_backward, logits[1], logits[0], im_1.clone(), im_0.clone(), depth_map_0, positions.clone(), shape)
                                     │            │           │                 │          │          │    │        │    │        │            │         │        └ torch.Size([1, 370, 1226])
                                     │            │           │                 │          │          │    │        │    │        │            │         └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        │    │        │            └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                                     │            │           │                 │          │          │    │        │    │        │                        1.2245e+03, 1.2255e+03],
                                     │            │           │                 │          │          │    │        │    │        │                       [5.0000e-01, 5.00...
                                     │            │           │                 │          │          │    │        │    │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                     │            │           │                 │          │          │    │        │    │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                     │            │           │                 │          │          │    │        │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        └ tensor([[[[0.4980, 0.4941, 0.5294,  ..., 0.0118, 0.0000, 0.0196],
                                     │            │           │                 │          │          │    │                    [0.4667, 0.5020, 0.5216,  ..., 0.0039, 0.0000, 0....
                                     │            │           │                 │          │          │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          └ tensor([[[[0.1255, 0.1137, 0.0902,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                 │          │                      [0.1373, 0.1216, 0.0824,  ..., 0.0000, 0.0000, 0....
                                     │            │           │                 │          └ tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                 │                     [0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                 │                     [0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                 │              ...
                                     │            │           │                 └ tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                            [0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                            [0., 0., 0.,  ..., 0., 0., 0.],
                                     │            │           │                     ...
                                     │            │           └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                     │            │                     [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                     │            │              ...
                                     │            └ tensor([[707.0912,   0.0000, 601.8873],
                                     │                      [  0.0000, 707.0912, 183.1104],
                                     │                      [  0.0000,   0.0000,   1.0000]], devi...
                                     └ <function compute_diff at 0x7f4186942200>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 288, in compute_diff
    dummy_score = torch.full(descs_1[0].shape, fill_value=1, device=descs_1.device, dtype=torch.float32).unsqueeze(0)
                  │     │                                                                 │     └ torch.float32
                  │     │                                                                 └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
                  │     └ <built-in method full of type object at 0x7f43d3c59840>
                  └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

UnboundLocalError: local variable 'descs_1' referenced before assignment
2025-02-21 09:18:53.364 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 09:23:29.689 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 09:23:29.689 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 09:23:32.687 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 09:23:37.547 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 09:33:39.639 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 09:33:39.640 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 09:33:42.658 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 09:33:47.603 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-21 09:39:17.047 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-21 09:39:17.048 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-21 09:39:20.005 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-21 09:39:20.653 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (74283), thread 'MainThread' (139780784329152):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 644, in _locate
    obj = getattr(obj, part)
                  │    └ 'silk'
                  └ <module 'silk.models' from '/root/silk/silk/models/__init__.py'>

AttributeError: module 'silk.models' has no attribute 'silk'


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 650, in _locate
    obj = import_module(mod)
          │             └ 'silk.models.silk'
          └ <function import_module at 0x7f213fdbbe20>
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           │          │           │    │        │        └ 0
           │          │           │    │        └ None
           │          │           │    └ 0
           │          │           └ 'silk.models.silk'
           │          └ <function _gcd_import at 0x7f213fef7400>
           └ <module '_frozen_importlib' (frozen)>
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed

  File "/root/silk/silk/models/silk.py", line 30, in <module>
    from silk.losses.sfmlearner.sfm_loss import epiploar_loss, photometric_reconstruction_loss

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 9, in <module>
    from silk.models.silk import SiLKBase

ImportError: cannot import name 'SiLKBase' from partially initialized module 'silk.models.silk' (most likely due to a circular import) (/root/silk/silk/models/silk.py)


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 134, in _resolve_target
    target = _locate(target)
             │       └ 'silk.models.silk.SiLKRandomHomographies'
             └ <function _locate at 0x7f213f31e170>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 658, in _locate
    raise ImportError(

ImportError: Error loading 'silk.models.silk.SiLKRandomHomographies':
ImportError("cannot import name 'SiLKBase' from partially initialized module 'silk.models.silk' (most likely due to a circular import) (/root/silk/silk/models/silk.py)")


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f213f2dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f213fdbaf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f213f2dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f213e9e2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f213f31dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f213f31de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f213f31dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f213e83e830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f213f2672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f213ea6d8d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f213f31cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f213e9e23b0>
    │   └ <property object at 0x7f213f2812b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f213e9e1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f213e9e16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f213fc21bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f213fde6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f213e9e1d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f213e9e1e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f213f31e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f213f31e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 333, in instantiate_node
    _target_ = _resolve_target(node.get(_Keys.TARGET), full_key)
               │               │    │   │     │        └ 'mode.model'
               │               │    │   │     └ <_Keys.TARGET: '_target_'>
               │               │    │   └ <enum '_Keys'>
               │               │    └ <function DictConfig.get at 0x7f213f7a4f70>
               │               └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function _resolve_target at 0x7f213f31e4d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 139, in _resolve_target
    raise InstantiationException(msg) from e
          │                      └ "Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.
full_key: mode.model
2025-02-21 09:39:20.661 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:20:59.988 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:20:59.989 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:21:04.166 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:21:05.046 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (74411), thread 'MainThread' (140458667717056):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 644, in _locate
    obj = getattr(obj, part)
                  │    └ 'silk'
                  └ <module 'silk.models' from '/root/silk/silk/models/__init__.py'>

AttributeError: module 'silk.models' has no attribute 'silk'


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 650, in _locate
    obj = import_module(mod)
          │             └ 'silk.models.silk'
          └ <function import_module at 0x7fbf14db3e20>
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           │          │           │    │        │        └ 0
           │          │           │    │        └ None
           │          │           │    └ 0
           │          │           └ 'silk.models.silk'
           │          └ <function _gcd_import at 0x7fbf14eef400>
           └ <module '_frozen_importlib' (frozen)>
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed

  File "/root/silk/silk/models/silk.py", line 30, in <module>
    from silk.losses.sfmlearner.sfm_loss import epiploar_loss, photometric_reconstruction_loss

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 9, in <module>
    from silk.models.silk import SiLKBase

ImportError: cannot import name 'SiLKBase' from partially initialized module 'silk.models.silk' (most likely due to a circular import) (/root/silk/silk/models/silk.py)


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 134, in _resolve_target
    target = _locate(target)
             │       └ 'silk.models.silk.SiLKRandomHomographies'
             └ <function _locate at 0x7fbf1430e170>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 658, in _locate
    raise ImportError(

ImportError: Error loading 'silk.models.silk.SiLKRandomHomographies':
ImportError("cannot import name 'SiLKBase' from partially initialized module 'silk.models.silk' (most likely due to a circular import) (/root/silk/silk/models/silk.py)")


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fbf142cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fbf14db2f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fbf142cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fbf1399a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fbf1430dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fbf1430de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fbf1430dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fbf1382a830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fbf142572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fbf13a21960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fbf1430cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fbf1399a3b0>
    │   └ <property object at 0x7fbf142f3ab0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fbf13999750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fbf139996c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fbf14c1dbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fbf14dde830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7fbf13999d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7fbf13999e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7fbf1430e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7fbf1430e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 333, in instantiate_node
    _target_ = _resolve_target(node.get(_Keys.TARGET), full_key)
               │               │    │   │     │        └ 'mode.model'
               │               │    │   │     └ <_Keys.TARGET: '_target_'>
               │               │    │   └ <enum '_Keys'>
               │               │    └ <function DictConfig.get at 0x7fbf14790f70>
               │               └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function _resolve_target at 0x7fbf1430e4d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 139, in _resolve_target
    raise InstantiationException(msg) from e
          │                      └ "Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.
full_key: mode.model
2025-02-24 05:21:05.055 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:23:44.627 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:23:44.628 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:23:47.632 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:23:53.162 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:26:17.790 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:26:17.791 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:26:20.742 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:26:21.385 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (76262), thread 'MainThread' (140186273415616):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 644, in _locate
    obj = getattr(obj, part)
                  │    └ 'silk'
                  └ <module 'silk.models' from '/root/silk/silk/models/__init__.py'>

AttributeError: module 'silk.models' has no attribute 'silk'


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 650, in _locate
    obj = import_module(mod)
          │             └ 'silk.models.silk'
          └ <function import_module at 0x7f7fa8e43e20>
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           │          │           │    │        │        └ 0
           │          │           │    │        └ None
           │          │           │    └ 0
           │          │           └ 'silk.models.silk'
           │          └ <function _gcd_import at 0x7f7fa8f7f400>
           └ <module '_frozen_importlib' (frozen)>
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed

  File "/root/silk/silk/models/silk.py", line 30, in <module>
    from silk.losses.sfmlearner.sfm_loss import epiploar_loss, photometric_reconstruction_loss

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 9, in <module>
    from silk.silk.models.silk import SiLKBase

ModuleNotFoundError: No module named 'silk.silk'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 134, in _resolve_target
    target = _locate(target)
             │       └ 'silk.models.silk.SiLKRandomHomographies'
             └ <function _locate at 0x7f7fa83b2170>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 653, in _locate
    raise ImportError(

ImportError: Error loading 'silk.models.silk.SiLKRandomHomographies':
ModuleNotFoundError("No module named 'silk.silk'")
Are you sure that 'silk' is importable from module 'silk.models'?


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f7fa8372e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f7fa8e42f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f7fa8372e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f7fa7a32440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f7fa83b1d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f7fa83b1e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f7fa83b1cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f7fa78b6830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f7fa82f72e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f7fa7ab9930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f7fa83b0ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f7fa7a323b0>
    │   └ <property object at 0x7f7fa83db100>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f7fa7a31750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f7fa7a316c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f7fa8cadbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f7fa8e6e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f7fa7a31d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f7fa7a31e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f7fa83b2560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f7fa83b2680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 333, in instantiate_node
    _target_ = _resolve_target(node.get(_Keys.TARGET), full_key)
               │               │    │   │     │        └ 'mode.model'
               │               │    │   │     └ <_Keys.TARGET: '_target_'>
               │               │    │   └ <enum '_Keys'>
               │               │    └ <function DictConfig.get at 0x7f7fa8830f70>
               │               └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function _resolve_target at 0x7f7fa83b24d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 139, in _resolve_target
    raise InstantiationException(msg) from e
          │                      └ "Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.
full_key: mode.model
2025-02-24 05:26:21.394 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:26:44.176 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:26:44.177 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:26:47.146 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:26:47.793 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (76390), thread 'MainThread' (140423158571456):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 644, in _locate
    obj = getattr(obj, part)
                  │    └ 'silk'
                  └ <module 'silk.models' from '/root/silk/silk/models/__init__.py'>

AttributeError: module 'silk.models' has no attribute 'silk'


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 650, in _locate
    obj = import_module(mod)
          │             └ 'silk.models.silk'
          └ <function import_module at 0x7fb6d0593e20>
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           │          │           │    │        │        └ 0
           │          │           │    │        └ None
           │          │           │    └ 0
           │          │           └ 'silk.models.silk'
           │          └ <function _gcd_import at 0x7fb6d06c7400>
           └ <module '_frozen_importlib' (frozen)>
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed

  File "/root/silk/silk/models/silk.py", line 30, in <module>
    from silk.losses.sfmlearner.sfm_loss import epiploar_loss, photometric_reconstruction_loss

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 9, in <module>
    from silk.models.silk import SiLKBase

ImportError: cannot import name 'SiLKBase' from partially initialized module 'silk.models.silk' (most likely due to a circular import) (/root/silk/silk/models/silk.py)


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 134, in _resolve_target
    target = _locate(target)
             │       └ 'silk.models.silk.SiLKRandomHomographies'
             └ <function _locate at 0x7fb6cfb1a170>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 658, in _locate
    raise ImportError(

ImportError: Error loading 'silk.models.silk.SiLKRandomHomographies':
ImportError("cannot import name 'SiLKBase' from partially initialized module 'silk.models.silk' (most likely due to a circular import) (/root/silk/silk/models/silk.py)")


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fb6cfadae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fb6d0592f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fb6cfadae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fb6cf1a6440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fb6cfb19d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fb6cfb19e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fb6cfb19cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fb6cf00a830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fb6cfa632e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fb6cf2318d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fb6cfb18ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fb6cf1a63b0>
    │   └ <property object at 0x7fb6d01c61b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fb6cf1a5750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fb6cf1a56c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fb6d03f9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fb6d05ba830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7fb6cf1a5d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7fb6cf1a5e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7fb6cfb1a560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7fb6cfb1a680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 333, in instantiate_node
    _target_ = _resolve_target(node.get(_Keys.TARGET), full_key)
               │               │    │   │     │        └ 'mode.model'
               │               │    │   │     └ <_Keys.TARGET: '_target_'>
               │               │    │   └ <enum '_Keys'>
               │               │    └ <function DictConfig.get at 0x7fb6cff70f70>
               │               └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function _resolve_target at 0x7fb6cfb1a4d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 139, in _resolve_target
    raise InstantiationException(msg) from e
          │                      └ "Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.
full_key: mode.model
2025-02-24 05:26:47.801 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:30:11.616 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:30:11.617 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:30:14.555 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:30:14.560 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (76518), thread 'MainThread' (139832138138048):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 644, in _locate
    obj = getattr(obj, part)
                  │    └ 'silk'
                  └ <module 'silk.models' from '/root/silk/silk/models/__init__.py'>

AttributeError: module 'silk.models' has no attribute 'silk'


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 650, in _locate
    obj = import_module(mod)
          │             └ 'silk.models.silk'
          └ <function import_module at 0x7f2d34c8be20>
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           │          │           │    │        │        └ 0
           │          │           │    │        └ None
           │          │           │    └ 0
           │          │           └ 'silk.models.silk'
           │          └ <function _gcd_import at 0x7f2d34dc7400>
           └ <module '_frozen_importlib' (frozen)>
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 879, in exec_module
  File "<frozen importlib._bootstrap_external>", line 1017, in get_code
  File "<frozen importlib._bootstrap_external>", line 947, in source_to_code
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed

  File "/root/silk/silk/models/silk.py", line 302
    self.coordinate_mapping_composer.get
    ^^^^^^^^

SyntaxError: invalid syntax. Perhaps you forgot a comma?


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 134, in _resolve_target
    target = _locate(target)
             │       └ 'silk.models.silk.SiLKRandomHomographies'
             └ <function _locate at 0x7f2d3421e170>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 658, in _locate
    raise ImportError(

ImportError: Error loading 'silk.models.silk.SiLKRandomHomographies':
SyntaxError('invalid syntax. Perhaps you forgot a comma?', ('/root/silk/silk/models/silk.py', 302, 13, '            self.coordinate_mapping_composer.get\n', 303, 21))


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f2d341dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f2d34c8af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f2d341dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f2d338aa440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f2d3421dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f2d3421de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f2d3421dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f2d3370e830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f2d341672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f2d339358a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f2d3421cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f2d338aa3b0>
    │   └ <property object at 0x7f2d34246de0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f2d338a9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f2d338a96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f2d34af5bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f2d34cb6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f2d338a9d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f2d338a9e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f2d3421e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f2d3421e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 333, in instantiate_node
    _target_ = _resolve_target(node.get(_Keys.TARGET), full_key)
               │               │    │   │     │        └ 'mode.model'
               │               │    │   │     └ <_Keys.TARGET: '_target_'>
               │               │    │   └ <enum '_Keys'>
               │               │    └ <function DictConfig.get at 0x7f2d343e4f70>
               │               └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function _resolve_target at 0x7f2d3421e4d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 139, in _resolve_target
    raise InstantiationException(msg) from e
          │                      └ "Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.
full_key: mode.model
2025-02-24 05:30:14.568 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:30:27.366 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:30:27.366 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:30:30.299 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:30:31.374 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (76646), thread 'MainThread' (139984430150080):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 549, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7f4e598e29e0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 300, in _init_loss_flow
    self.flow.define_transition(
    │    └ <property object at 0x7f4e64080ea0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 160, in define_transition
    args = tuple(self.index_of(name) for name in args)
                 │    │                          └ ('images', 'raw_descriptors')
                 │    └ <function Flow.index_of at 0x7f4e6406bf40>
                 └ <silk.flow.Flow object at 0x7f4e582bad70>

  File "/root/silk/silk/flow.py", line 160, in <genexpr>
    args = tuple(self.index_of(name) for name in args)
                 │    │        │         └ 'images'
                 │    │        └ 'images'
                 │    └ <function Flow.index_of at 0x7f4e6406bf40>
                 └ <silk.flow.Flow object at 0x7f4e582bad70>

  File "/root/silk/silk/flow.py", line 138, in index_of
    return self._name_to_index[name]
           │    │              └ 'images'
           │    └ {'batch': 0, 'use_image_aug': 1, 'images_1': 3, 'images_2': 4, 'image_shape': 5, 'pose_gt_forward': 6, 'pose_gt_backward': 7,...
           └ <silk.flow.Flow object at 0x7f4e582bad70>

KeyError: 'images'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f50a96cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f50aa182f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f50a96cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f50a8d9a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f50a970dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f50a970de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f50a970dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f50a8bf6830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f50a96572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f50a8e21930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f50a970cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f50a8d9a3b0>
    │   └ <property object at 0x7f50a96f3c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f50a8d99750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f50a8d996c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f50a9fedbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f50aa1ae830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f50a8d99d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f50a8d99e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f50a970e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f50a970e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7f50a970e320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ "Error in call to target 'silk.models.silk.SiLKRandomHomographies':\nKeyError('images')\nfull_key: mode.model"
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
KeyError('images')
full_key: mode.model
2025-02-24 05:30:31.383 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:30:55.507 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:30:55.507 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:30:58.431 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:30:59.488 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (76777), thread 'MainThread' (140290478731712):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 549, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7f959b716a70>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 300, in _init_loss_flow
    self.flow.define_transition(
    │    └ <property object at 0x7f95a5e5ce50>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 160, in define_transition
    args = tuple(self.index_of(name) for name in args)
                 │    │                          └ ('images', 'raw_descriptors')
                 │    └ <function Flow.index_of at 0x7f95a5e64040>
                 └ <silk.flow.Flow object at 0x7f959a13b490>

  File "/root/silk/silk/flow.py", line 160, in <genexpr>
    args = tuple(self.index_of(name) for name in args)
                 │    │        │         └ 'images'
                 │    │        └ 'images'
                 │    └ <function Flow.index_of at 0x7f95a5e64040>
                 └ <silk.flow.Flow object at 0x7f959a13b490>

  File "/root/silk/silk/flow.py", line 138, in index_of
    return self._name_to_index[name]
           │    │              └ 'images'
           │    └ {'batch': 0, 'use_image_aug': 1, 'images_1': 3, 'images_2': 4, 'image_shape': 5, 'pose_gt_forward': 6, 'pose_gt_backward': 7,...
           └ <silk.flow.Flow object at 0x7f959a13b490>

KeyError: 'images'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f97eb55ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f97ec02ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f97eb55ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f97eac1e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f97eb59dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f97eb59de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f97eb59dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f97eacd6830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f97eb4e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f97eaca5930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f97eb59cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f97eac1e3b0>
    │   └ <property object at 0x7f97eb583c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f97eac1d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f97eac1d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f97ebe99bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f97ec05a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f97eac1dd80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f97eac1de10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f97eb59e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f97eb59e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7f97eb59e320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ "Error in call to target 'silk.models.silk.SiLKRandomHomographies':\nKeyError('images')\nfull_key: mode.model"
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
KeyError('images')
full_key: mode.model
2025-02-24 05:30:59.497 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:45:15.079 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:45:15.079 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:45:18.231 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:45:19.348 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (76908), thread 'MainThread' (140299706274240):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 547, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7f97c154eb00>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 300, in _init_loss_flow
    self.flow.define_transition(
    │    └ <property object at 0x7f97cbe8d170>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 163, in define_transition
    transition = _FunctionCall(function, *args, **kwargs)
                 │             │          │       └ {}
                 │             │          └ ()
                 │             └ <silk.backbones.silk.coords.LinearCoordinateMapping object at 0x7f97c01c0dc0>
                 └ <class 'silk.flow._FunctionCall'>

  File "/root/silk/silk/flow.py", line 73, in __init__
    self._signature = inspect.signature(function)
    │                 │       │         └ <silk.backbones.silk.coords.LinearCoordinateMapping object at 0x7f97c01c0dc0>
    │                 │       └ <function signature at 0x7f9a11d37be0>
    │                 └ <module 'inspect' from '/usr/lib/python3.10/inspect.py'>
    └ <silk.flow._FunctionCall object at 0x7f97b1d7d270>

  File "/usr/lib/python3.10/inspect.py", line 3254, in signature
    return Signature.from_callable(obj, follow_wrapped=follow_wrapped,
           │         │             │                   └ True
           │         │             └ <silk.backbones.silk.coords.LinearCoordinateMapping object at 0x7f97c01c0dc0>
           │         └ <classmethod(<function Signature.from_callable at 0x7f9a11d40b80>)>
           └ <class 'inspect.Signature'>
  File "/usr/lib/python3.10/inspect.py", line 3002, in from_callable
    return _signature_from_callable(obj, sigcls=cls,
           │                        │           └ <class 'inspect.Signature'>
           │                        └ <silk.backbones.silk.coords.LinearCoordinateMapping object at 0x7f97c01c0dc0>
           └ <function _signature_from_callable at 0x7f9a11d37b50>
  File "/usr/lib/python3.10/inspect.py", line 2396, in _signature_from_callable
    raise TypeError('{!r} is not a callable object'.format(obj))
                                                           └ <silk.backbones.silk.coords.LinearCoordinateMapping object at 0x7f97c01c0dc0>

TypeError: <silk.backbones.silk.coords.LinearCoordinateMapping object at 0x7f97c01c0dc0> is not a callable object


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f9a1156ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f9a12042f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f9a1156ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f9a10c2e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f9a115a9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f9a115a9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f9a115a9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f9a10ab2830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f9a114f32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f9a10cb9930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f9a115a8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f9a10c2e3b0>
    │   └ <property object at 0x7f9a11593b50>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f9a10c2d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f9a10c2d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f9a11ea9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f9a1206e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f9a10c2dd80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f9a10c2de10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f9a115aa560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f9a115aa680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7f9a115aa320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ "Error in call to target 'silk.models.silk.SiLKRandomHomographies':\nTypeError('<silk.backbones.silk.coords.LinearCoordinateM...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
TypeError('<silk.backbones.silk.coords.LinearCoordinateMapping object at 0x7f97c01c0dc0> is not a callable object')
full_key: mode.model
2025-02-24 05:45:19.370 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:46:29.642 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:46:29.643 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:46:32.628 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:46:37.980 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:46:59.382 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:46:59.383 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:47:02.324 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:47:07.204 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:48:48.933 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:48:48.934 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:48:51.990 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:48:56.921 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:52:14.073 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:52:14.073 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:52:17.099 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:52:22.091 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:52:56.134 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:52:56.135 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:52:59.145 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:53:04.079 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:54:00.995 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:54:00.995 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:54:03.937 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:54:08.894 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:57:35.019 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:57:35.020 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:57:38.031 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:57:42.964 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (87755), thread 'MainThread' (139822514450880):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f2af67cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f2af72aaf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f2af67cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f2af5e9a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f2af6809d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f2af6809e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f2af6809cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f2af5d1e830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f2af67572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f2af5f21960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f2af6808ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f2af5e9a3b0>
    │   └ <property object at 0x7f2af67f3c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f2af5e99750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f2af5e996c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f2af7115bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f2af72d6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f2af4b91900>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f289d02cfa0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f28bbf679a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f28bbf67880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f28bbf803a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f28bbf805e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>
    │    └ <property object at 0x7f28bbf6b920>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f28bbf80670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f289cd5ca30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f28bbf80790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f28bbf6be70>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>
    │    └ <function Trainer._run_sanity_check at 0x7f28bbf80940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f28bbf85350>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f289cd5ed70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f28bbf18d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f28bbf8b730>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f28bbee3880>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f28bbf8b730>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f28bbda9ea0>
                 │    │          └ <function Loop.run at 0x7f28bbeaab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f28bbf8bf40>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f28bbf8b730>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f28bbda9ea0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f28bbf05e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f28bbf8bf40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f28bbf06290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f28bbf8bf40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f28bc05f6f0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f28bbf8bf40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f28ff109b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f289cd5ca30>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f289cd5d5a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f28ff0f5760>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f289cd5ca30>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f29a51cc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f29a4e0c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f29a51cc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 500, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f28a69ef130>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 470, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f28a53c2d70>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 33)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f28a53c2d70>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f28a53c2d70>
           │    │     └ <function Flow.flow_from_tape at 0x7f28b10941f0>
           │    └ <silk.flow.Flow object at 0x7f28a53c3820>
           └ <silk.flow.FixedOutputFlow object at 0x7f28a53c2d70>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 30
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f28a53c3640>, <silk.flow._InputExtraction object at 0x7f28a53c1c90>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f28a53c3820>
    │       └ 30
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f2af6fa4450>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0., ...
           │    │          │         └ <property object at 0x7f2af6fa4400>
           │    │          └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0., ...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f289d02d480>

  File "/root/silk/silk/models/silk.py", line 640, in _get_corr
    warped_positions_backward = sampler.transform_points(
                                │       └ <function HomographicSampler.transform_points at 0x7f28a69d28c0>
                                └ <silk.cv.homography.HomographicSampler object at 0x7f289cd2c070>

TypeError: HomographicSampler.transform_points() got an unexpected keyword argument 'image_shape'
2025-02-24 05:57:43.185 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:58:08.634 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:58:08.635 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:58:11.641 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:58:16.547 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (89478), thread 'MainThread' (140491856626112):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fc6ce66ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fc6cf11ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fc6ce66ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fc6cdd2e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fc6ce6add80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fc6ce6ade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fc6ce6adcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fc6cdb92830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fc6ce5f32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fc6cddb98a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fc6ce6acee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fc6cdd2e3b0>
    │   └ <property object at 0x7fc6ce6d7100>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fc6cdd2d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fc6cdd2d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fc6cef89bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fc6cf14a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fc6cc995b40>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fc474ed8fa0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fc493de39a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fc493de3880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fc493df83a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fc493df85e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>
    │    └ <property object at 0x7fc493de77e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fc493df8670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fc474cd41c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fc493df8790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fc493de7d30>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>
    │    └ <function Trainer._run_sanity_check at 0x7fc493df8940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fc493e01210>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fc474cd76d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fc493d94d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fc493dfdf90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fc493ead490>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fc493dfdf90>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fc493c29ff0>
                 │    │          └ <function Loop.run at 0x7fc493d26b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fc493dfff70>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fc493dfdf90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fc493c29ff0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fc493d81e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fc493dfff70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fc493d82290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fc493dfff70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fc493ed7790>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fc493dfff70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fc4d6fbdb40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fc474cd41c0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fc474cd4be0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fc4d6fb4ea0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fc474cd41c0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fc57cfcc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fc57cc0c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fc57cfcc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 500, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fc47e88b130>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 470, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fc47d26ad70>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 33)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fc47d26ad70>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fc47d26ad70>
           │    │     └ <function Flow.flow_from_tape at 0x7fc488e8c1f0>
           │    └ <silk.flow.Flow object at 0x7fc47d26b820>
           └ <silk.flow.FixedOutputFlow object at 0x7fc47d26ad70>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 30
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fc47d26b640>, <silk.flow._InputExtraction object at 0x7fc47d26ab90>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fc47d26b820>
    │       └ 30
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fc6cee1c3b0>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0., ...
           │    │          │         └ <property object at 0x7fc6cee1c360>
           │    │          └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0., ...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7fc474ed94b0>

  File "/root/silk/silk/models/silk.py", line 640, in _get_corr
    warped_positions_backward = sampler.transform_points(
                                │       └ <function HomographicSampler.transform_points at 0x7fc47e86e8c0>
                                └ <silk.cv.homography.HomographicSampler object at 0x7fc474d3c070>

TypeError: HomographicSampler.transform_points() got an unexpected keyword argument 'shape'
2025-02-24 05:58:16.755 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 05:58:27.352 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 05:58:27.353 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 05:58:30.396 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 05:58:37.818 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (91264), thread 'MainThread' (140653985567168):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fec8e0dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fec8eb52f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fec8e0dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fec8d776440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fec8e11dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fec8e11de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fec8e11dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fec8d5d2830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fec8e0672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fec8d7fd960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fec8e11cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fec8d7763b0>
    │   └ <property object at 0x7fec8e5fdf30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fec8d775750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fec8d7756c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fec8e9b9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fec8eb7e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fec8c399bd0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fea34900fa0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fea537f79a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fea537f7880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fea538103a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fea538105e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>
    │    └ <property object at 0x7fea537fb8d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fea53810670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fea346ff8e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fea53810790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fea537fbe20>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>
    │    └ <function Trainer._run_sanity_check at 0x7fea53810940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fea53819300>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fea346fe710>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fea537a8d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fea53817490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fea537779c0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fea53817490>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fea536464a0>
                 │    │          └ <function Loop.run at 0x7fea5373ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fea53815b70>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fea53817490>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fea536464a0>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fea53795e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fea53815b70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fea53796290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fea53815b70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fea538eb9c0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fea53815b70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fea969b5b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fea346ff8e0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fea346fee90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fea969a96c0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fea346ff8e0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7feb3c9d45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7feb3c614280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7feb3c9d45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 500, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fea3e28f130>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 470, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fea3cc82dd0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 33)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fea3cc82dd0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fea3cc82dd0>
           │    │     └ <function Flow.flow_from_tape at 0x7fea488841f0>
           │    └ <silk.flow.Flow object at 0x7fea3cc83880>
           └ <silk.flow.FixedOutputFlow object at 0x7fea3cc82dd0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │                [-7.3231e-04,  1.0...
    │       │        │    │            └ 33
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fea3cc836a0>, <silk.flow._InputExtraction object at 0x7fea3cc82bf0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fea3cc83880>
    │       └ 33
    └ [None, None, None, None, None, None, tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
              [-7.3231e-04,  1.0...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fec8e84c4f0>
           │    │          │         │       └ <BoundArguments (whole_images=tensor([[[[0.6706, 0.6118, 0.5373,  ..., 0.0549, 0.0549, 0.0549],
           │    │          │         │                   [0.6667, 0.6000, 0....
           │    │          │         └ <property object at 0x7fec8e84c4a0>
           │    │          └ <BoundArguments (whole_images=tensor([[[[0.6706, 0.6118, 0.5373,  ..., 0.0549, 0.0549, 0.0549],
           │    │                      [0.6667, 0.6000, 0....
           │    └ <function photometric_reconstruction_loss at 0x7fea3e28e200>
           └ <silk.flow._FunctionCall object at 0x7fea349000d0>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 184, in photometric_reconstruction_loss
    reconstruction_loss, desc_loss = compute_diff(intrinsics, pose_gt_backward, logits[1], logits[0], im_1.clone(), im_0.clone(), depth_map_0, positions.clone(), shape)
                                     │            │           │                 │          │          │    │        │    │        │            │         │        └ torch.Size([1, 370, 1226])
                                     │            │           │                 │          │          │    │        │    │        │            │         └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        │    │        │            └ tensor([[[5.0000e-01, 1.5000e+00, 2.5000e+00,  ..., 1.2235e+03,
                                     │            │           │                 │          │          │    │        │    │        │                        1.2245e+03, 1.2255e+03],
                                     │            │           │                 │          │          │    │        │    │        │                       [5.0000e-01, 5.00...
                                     │            │           │                 │          │          │    │        │    │        └ tensor([[[27.9463, 17.6579, 16.3324,  ..., 41.9185, 55.3066, 44.8146],
                                     │            │           │                 │          │          │    │        │    │                   [19.2052, 17.6806, 17.5964,  ..., 37.8768, 39...
                                     │            │           │                 │          │          │    │        │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          │    │        └ tensor([[[[0.6706, 0.6118, 0.5373,  ..., 0.0549, 0.0549, 0.0549],
                                     │            │           │                 │          │          │    │                    [0.6667, 0.6000, 0.5451,  ..., 0.0549, 0.0549, 0....
                                     │            │           │                 │          │          │    └ <method 'clone' of 'torch._C.TensorBase' objects>
                                     │            │           │                 │          │          └ tensor([[[[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                 │          │                      [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0....
                                     │            │           │                 │          └ tensor([[[0.9472, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                 │                     [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.00...
                                     │            │           │                 └ tensor([[[0.9472, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
                                     │            │           │                            [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.00...
                                     │            │           └ tensor([[ 1.0000e+00, -7.3231e-04,  7.7854e-05,  1.0893e-03],
                                     │            │                     [ 7.3225e-04,  1.0000e+00,  7.5600e-04,  7.2295e-03],
                                     │            │              ...
                                     │            └ tensor([[707.0912,   0.0000, 601.8873],
                                     │                      [  0.0000, 707.0912, 183.1104],
                                     │                      [  0.0000,   0.0000,   1.0000]], devi...
                                     └ <function compute_diff at 0x7fea3e28e290>

  File "/root/silk/silk/losses/sfmlearner/sfm_loss.py", line 296, in compute_diff
    dummy_score = torch.full(descs_1[0].shape, fill_value=1, device=descs_1.device, dtype=torch.float32).unsqueeze(0)
                  │     │                                                                 │     └ torch.float32
                  │     │                                                                 └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
                  │     └ <built-in method full of type object at 0x7fec8b459840>
                  └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

UnboundLocalError: local variable 'descs_1' referenced before assignment
2025-02-24 05:58:37.991 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 06:02:48.433 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 06:02:48.434 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 06:02:51.373 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 06:03:06.455 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 06:04:39.750 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 06:04:39.751 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 06:04:42.789 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 06:04:47.759 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 06:05:33.738 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 06:05:33.739 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 06:05:36.757 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 06:05:52.165 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 06:07:40.594 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 06:07:40.595 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 06:07:43.617 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 06:07:48.562 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 06:08:51.503 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 06:08:51.503 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 06:08:54.496 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 06:08:59.489 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 06:09:53.667 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 06:09:53.668 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 06:09:56.623 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 06:10:16.775 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 06:49:04.783 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 06:49:04.784 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 06:49:07.752 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 06:49:12.845 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 06:52:34.427 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 06:52:34.427 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 06:52:37.357 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 06:52:38.005 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (105426), thread 'MainThread' (140620503458240):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 644, in _locate
    obj = getattr(obj, part)
                  │    └ 'silk'
                  └ <module 'silk.models' from '/root/silk/silk/models/__init__.py'>

AttributeError: module 'silk.models' has no attribute 'silk'


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 650, in _locate
    obj = import_module(mod)
          │             └ 'silk.models.silk'
          └ <function import_module at 0x7fe4c3053e20>
  File "/usr/lib/python3.10/importlib/__init__.py", line 126, in import_module
    return _bootstrap._gcd_import(name[level:], package, level)
           │          │           │    │        │        └ 0
           │          │           │    │        └ None
           │          │           │    └ 0
           │          │           └ 'silk.models.silk'
           │          └ <function _gcd_import at 0x7fe4c3187400>
           └ <module '_frozen_importlib' (frozen)>
  File "<frozen importlib._bootstrap>", line 1050, in _gcd_import
  File "<frozen importlib._bootstrap>", line 1027, in _find_and_load
  File "<frozen importlib._bootstrap>", line 1006, in _find_and_load_unlocked
  File "<frozen importlib._bootstrap>", line 688, in _load_unlocked
  File "<frozen importlib._bootstrap_external>", line 883, in exec_module
  File "<frozen importlib._bootstrap>", line 241, in _call_with_frames_removed

  File "/root/silk/silk/models/silk.py", line 19, in <module>
    from silk.backbones.silk.silk import SiLKBase as BackboneBase

  File "/root/silk/silk/backbones/silk/silk.py", line 36, in <module>
    from silk.models.superpoint_utils import get_dense_positions

  File "/root/silk/silk/models/superpoint_utils.py", line 14, in <module>
    from silk.cv.homography import HomographicSampler

  File "/root/silk/silk/cv/homography.py", line 544
    w = shape[]
              ^

SyntaxError: invalid syntax


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 134, in _resolve_target
    target = _locate(target)
             │       └ 'silk.models.silk.SiLKRandomHomographies'
             └ <function _locate at 0x7fe4c25aa170>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 658, in _locate
    raise ImportError(

ImportError: Error loading 'silk.models.silk.SiLKRandomHomographies':
SyntaxError('invalid syntax', ('/root/silk/silk/cv/homography.py', 544, 19, '        w = shape[]\n', 544, 20))


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fe4c256ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fe4c3052f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fe4c256ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fe4c1c62440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fe4c25a9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fe4c25a9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fe4c25a9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fe4c1abe830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fe4c24ef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fe4c1ce9960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fe4c25a8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fe4c1c623b0>
    │   └ <property object at 0x7fe4c2c861b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fe4c1c61750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fe4c1c616c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fe4c2eb9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fe4c307a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7fe4c1c61d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7fe4c1c61e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7fe4c25aa560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7fe4c25aa680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 333, in instantiate_node
    _target_ = _resolve_target(node.get(_Keys.TARGET), full_key)
               │               │    │   │     │        └ 'mode.model'
               │               │    │   │     └ <_Keys.TARGET: '_target_'>
               │               │    │   └ <enum '_Keys'>
               │               │    └ <function DictConfig.get at 0x7fe4c2a30f70>
               │               └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function _resolve_target at 0x7fe4c25aa4d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 139, in _resolve_target
    raise InstantiationException(msg) from e
          │                      └ "Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.\nf...
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error locating target 'silk.models.silk.SiLKRandomHomographies', set env var HYDRA_FULL_ERROR=1 to see chained exception.
full_key: mode.model
2025-02-24 06:52:38.014 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 06:53:07.751 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 06:53:07.752 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 06:53:10.615 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 06:53:35.784 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 06:57:10.796 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 06:57:10.797 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 06:57:13.778 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 06:57:23.910 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:00:03.421 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:00:03.422 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:00:06.361 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:00:30.846 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:00:48.893 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:00:48.894 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:00:51.874 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:01:16.675 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:05:27.807 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:05:27.808 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:05:30.754 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:05:55.974 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:09:14.834 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:09:14.835 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:09:17.798 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:09:33.034 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:10:09.683 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:10:09.683 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:10:12.597 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:10:28.579 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:11:01.764 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:11:01.764 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:11:04.733 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:11:14.893 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:16:34.643 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:16:34.643 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:16:37.603 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:16:42.525 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (119781), thread 'MainThread' (139673803895232):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f0856a5ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f085753af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f0856a5ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f085611e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f0856a9dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f0856a9de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f0856a9dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f08561d6830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f08569e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f08561a5930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f0856a9cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f085611e3b0>
    │   └ <property object at 0x7f0856a83c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f085611d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f085611d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f08573a5bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f0857566830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f0854d85b40>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f05fd2b4fa0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f061c1d79a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f061c1d7880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f061c1ec3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f061c1ec5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>
    │    └ <property object at 0x7f061c1db790>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f061c1ec670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f05fcfee140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f061c1ec790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f061c1dbce0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>
    │    └ <function Trainer._run_sanity_check at 0x7f061c1ec940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f061c1f51c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f05fcfed9c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f061c188d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f061c1f3400>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f061c167740>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f061c1f3400>
                 │    │          │   │           │               └ 2
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f061c223190>
                 │    │          └ <function Loop.run at 0x7f061c316b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f061c1f1ae0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f061c1f3400>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f061c223190>, 0, 2, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f061c171e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f061c1f1ae0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f061c172290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f061c1f1ae0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f061c2cf510>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f061c1f1ae0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f065f3a5b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f05fcfee140>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f05fcfed900>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f065f39cbd0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f05fcfee140>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f07055b85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f0704ffc280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f07055b85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 500, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f0606c17010>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 470, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f06055cacb0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (31, 33)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f06055cacb0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f06055cacb0>
           │    │     └ <function Flow.flow_from_tape at 0x7f0611258280>
           │    └ <silk.flow.Flow object at 0x7f06055cad40>
           └ <silk.flow.FixedOutputFlow object at 0x7f06055cacb0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
    │       │        │    │            │         ...
    │       │        │    │            └ 30
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f06055cb880>, <silk.flow._InputExtraction object at 0x7f06055cac20>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f06055cad40>
    │       └ 30
    └ [None, None, None, None, None, torch.Size([1, 3, 370, 1226]), tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
       ...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f0857234450>
           │    │          │         │       └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0.,  ..., 0., 0., 0.],
           │    │          │         │                  [0., 0., 0., ...
           │    │          │         └ <property object at 0x7f0857234400>
           │    │          └ <BoundArguments (nms=tensor([[[0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0.,  ..., 0., 0., 0.],
           │    │                     [0., 0., 0., ...
           │    └ <bound method SiLKRandomHomographies._get_corr of SiLKRandomHomographies(
           │        (_module): MixedModuleDict(
           │          (_mods): ModuleDi...
           └ <silk.flow._FunctionCall object at 0x7f05fd2b54e0>

  File "/root/silk/silk/models/silk.py", line 643, in _get_corr
    warped_positions_backward = sampler.transform_points(
                                │       └ <function HomographicSampler.transform_points at 0x7f0606bee7a0>
                                └ <silk.cv.homography.HomographicSampler object at 0x7f05fcfc00d0>

  File "/root/silk/silk/cv/homography.py", line 812, in transform_points
    transformed_points = self.sj_transform_points(intrinsics, pose_gt, depth_map, points, normalize=False, imshape=imshape)
                         │    │                   │           │        │          │                                └ torch.Size([1, 3, 370, 1226])
                         │    │                   │           │        │          └ tensor([[[9.5000e+00, 1.0500e+01, 1.1500e+01,  ..., 1.2145e+03,
                         │    │                   │           │        │                      1.2155e+03, 1.2165e+03],
                         │    │                   │           │        │                     [9.5000e+00, 9.50...
                         │    │                   │           │        └ tensor([[41.8423, 22.3567, 19.4181,  ..., 40.2007, 51.0629, 43.8065],
                         │    │                   │           │                  [22.7001, 20.7654, 20.2411,  ..., 36.4069, 37.6...
                         │    │                   │           └ tensor([[ 1.0000e+00,  7.3225e-04, -7.8408e-05, -1.1180e-03],
                         │    │                   │                     [-7.3231e-04,  1.0000e+00, -7.5595e-04, -7.4541e-03],
                         │    │                   │              ...
                         │    │                   └ tensor([[707.0912,   0.0000, 601.8873],
                         │    │                             [  0.0000, 707.0912, 183.1104],
                         │    │                             [  0.0000,   0.0000,   1.0000]], devi...
                         │    └ <function HomographicSampler.sj_transform_points at 0x7f0606bee710>
                         └ <silk.cv.homography.HomographicSampler object at 0x7f05fcfc00d0>

  File "/root/silk/silk/cv/homography.py", line 647, in sj_transform_points
    cam_coords = HomographicSampler.pixel2cam(depth_map.unsqueeze(0), intrinsics.inverse(), points, imshape)  # [B,3,H,W] or [B,3n,H,W]
                 │                  │         │         │             │          │          │       └ torch.Size([1, 3, 370, 1226])
                 │                  │         │         │             │          │          └ tensor([[[9.5000e+00, 1.0500e+01, 1.1500e+01,  ..., 1.2145e+03,
                 │                  │         │         │             │          │                      1.2155e+03, 1.2165e+03],
                 │                  │         │         │             │          │                     [9.5000e+00, 9.50...
                 │                  │         │         │             │          └ <method 'inverse' of 'torch._C.TensorBase' objects>
                 │                  │         │         │             └ tensor([[707.0912,   0.0000, 601.8873],
                 │                  │         │         │                       [  0.0000, 707.0912, 183.1104],
                 │                  │         │         │                       [  0.0000,   0.0000,   1.0000]], devi...
                 │                  │         │         └ <method 'unsqueeze' of 'torch._C.TensorBase' objects>
                 │                  │         └ tensor([[41.8423, 22.3567, 19.4181,  ..., 40.2007, 51.0629, 43.8065],
                 │                  │                   [22.7001, 20.7654, 20.2411,  ..., 36.4069, 37.6...
                 │                  └ <staticmethod(<function HomographicSampler.pixel2cam at 0x7f0606bee5f0>)>
                 └ <class 'silk.cv.homography.HomographicSampler'>

  File "/root/silk/silk/cv/homography.py", line 555, in pixel2cam
    depth = depth[:, depth_points_y_start:depth_points_y_end, depth_points_x_start:depth_points_x_end]
            │        │                    │                   │                    └ tensor([   9,   10,   11,  ..., 1214, 1215, 1216], device='cuda:1',
            │        │                    │                   │                             dtype=torch.int32)
            │        │                    │                   └ tensor([   9,   10,   11,  ..., 1214, 1215, 1216], device='cuda:1',
            │        │                    │                            dtype=torch.int32)
            │        │                    └ tensor([  9,   9,   9,  ..., 360, 360, 360], device='cuda:1',
            │        │                             dtype=torch.int32)
            │        └ tensor([  9,   9,   9,  ..., 360, 360, 360], device='cuda:1',
            │                 dtype=torch.int32)
            └ tensor([[[41.8423, 22.3567, 19.4181,  ..., 40.2007, 51.0629, 43.8065],
                       [22.7001, 20.7654, 20.2411,  ..., 36.4069, 37...

TypeError: only integer tensors of a single element can be converted to an index
2025-02-24 07:16:42.748 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:17:09.646 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:17:09.647 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:17:12.588 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:17:17.518 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:17:35.610 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:17:35.611 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:17:38.537 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:18:03.689 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:18:22.472 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:18:22.473 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:18:25.453 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:18:50.479 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:20:24.632 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:20:24.633 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:20:27.570 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:20:32.573 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:21:19.985 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:21:19.986 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:21:22.903 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:21:27.914 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:25:30.236 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:25:30.237 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:25:33.198 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:25:38.253 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:27:00.434 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:27:00.434 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:27:03.378 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:27:23.767 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:28:34.801 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:28:34.801 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:28:37.855 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:28:53.286 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:30:18.125 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:30:18.125 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:30:21.118 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:30:26.104 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:30:33.252 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:30:33.253 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:30:36.249 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:30:43.805 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:30:57.881 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:30:57.882 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:31:00.912 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:31:08.382 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:32:27.544 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:32:27.544 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:32:30.517 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:32:35.861 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:33:42.073 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:33:42.073 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:33:45.094 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:34:02.847 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:34:31.144 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:34:31.145 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:34:34.105 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:34:49.709 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:36:11.602 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:36:11.602 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:36:14.606 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:36:30.337 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:37:22.083 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:37:22.084 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:37:25.078 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:37:32.165 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 07:45:19.808 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:45:19.808 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:45:22.735 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:46:34.202 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-24 07:46:34.203 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-24 07:46:34.203 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-24 07:47:39.955 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 07:47:39.956 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 07:47:42.892 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 07:47:55.504 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-24 07:47:55.505 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-24 07:47:55.505 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-24 08:02:54.122 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 08:02:54.123 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 08:02:56.970 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 08:03:01.851 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 08:04:27.616 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 08:04:27.617 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 08:04:30.598 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 08:04:58.556 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (155379), thread 'MainThread' (139849263538624):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f3130dd6e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f313189ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f3130dd6e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f31304a2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f3130e15d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f3130e15e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f3130e15cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f3130312830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f3130d5f2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f313052d8d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f3130e14ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f31304a23b0>
    │   └ <property object at 0x7f3130e3ee30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f31304a1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f31304a16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f3131705bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f31318c6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 99, in main
    "config": OmegaConf.to_object(config),
              │         │         └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
              │         └ <staticmethod(<function OmegaConf.to_object at 0x7f3130ff4b80>)>
              └ <class 'omegaconf.omegaconf.OmegaConf'>

  File "/usr/local/lib/python3.10/dist-packages/omegaconf/omegaconf.py", line 582, in to_object
    return OmegaConf.to_container(
           │         └ <staticmethod(<function OmegaConf.to_container at 0x7f3130ff4af0>)>
           └ <class 'omegaconf.omegaconf.OmegaConf'>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/omegaconf.py", line 561, in to_container
    return BaseContainer._to_content(
           │             └ <staticmethod(<function BaseContainer._to_content at 0x7f3130fb1d80>)>
           └ <class 'omegaconf.basecontainer.BaseContainer'>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/basecontainer.py", line 292, in _to_content
    value = get_node_value(key)
            │              └ 'default'
            └ <function BaseContainer._to_content.<locals>.get_node_value at 0x7f2ed13f13f0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/basecontainer.py", line 247, in get_node_value
    value = BaseContainer._to_content(
            │             └ <staticmethod(<function BaseContainer._to_content at 0x7f3130fb1d80>)>
            └ <class 'omegaconf.basecontainer.BaseContainer'>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/basecontainer.py", line 292, in _to_content
    value = get_node_value(key)
            │              └ 'ncpus'
            └ <function BaseContainer._to_content.<locals>.get_node_value at 0x7f2ed1285fc0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/basecontainer.py", line 247, in get_node_value
    value = BaseContainer._to_content(
            │             └ <staticmethod(<function BaseContainer._to_content at 0x7f3130fb1d80>)>
            └ <class 'omegaconf.basecontainer.BaseContainer'>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/basecontainer.py", line 292, in _to_content
    value = get_node_value(key)
            │              └ '_value_'
            └ <function BaseContainer._to_content.<locals>.get_node_value at 0x7f2ed12860e0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/basecontainer.py", line 244, in get_node_value
    conf._format_and_raise(key=key, value=None, cause=e)
    │    │                     └ '_value_'
    │    └ <function Node._format_and_raise at 0x7f3130fa2e60>
    └ {'_value_': '${self_instantiate:}', '_target_': 'silk.config.hardware.get_cpus'}
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/base.py", line 231, in _format_and_raise
    format_and_raise(
    └ <function format_and_raise at 0x7f3130fa1bd0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/_utils.py", line 900, in format_and_raise
    _raise(ex, cause)
    │      │   └ InterpolationResolutionError('RuntimeError raised while resolving interpolation: DataLoader worker (pid 156525) exited unexpe...
    │      └ InterpolationResolutionError('RuntimeError raised while resolving interpolation: DataLoader worker (pid 156525) exited unexpe...
    └ <function _raise at 0x7f3130fa1b40>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/_utils.py", line 798, in _raise
    raise ex.with_traceback(sys.exc_info()[2])  # set env var OC_CAUSE=1 for full trace
          │  │              │   └ <built-in function exc_info>
          │  │              └ <module 'sys' (built-in)>
          │  └ <method 'with_traceback' of 'BaseException' objects>
          └ InterpolationResolutionError('RuntimeError raised while resolving interpolation: DataLoader worker (pid 156525) exited unexpe...
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/basecontainer.py", line 242, in get_node_value
    node = node._dereference_node()
           │    └ <function Node._dereference_node at 0x7f3130fa2f80>
           └ '${self_instantiate:}'
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/base.py", line 246, in _dereference_node
    node = self._dereference_node_impl(throw_on_resolution_failure=True)
           │    └ <function Node._dereference_node_impl at 0x7f3130fa30a0>
           └ '${self_instantiate:}'
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/base.py", line 277, in _dereference_node_impl
    return parent._resolve_interpolation_from_parse_tree(
           │      └ <function Container._resolve_interpolation_from_parse_tree at 0x7f3130fb0160>
           └ {'_value_': '${self_instantiate:}', '_target_': 'silk.config.hardware.get_cpus'}
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/base.py", line 584, in _resolve_interpolation_from_parse_tree
    resolved = self.resolve_parse_tree(
               │    └ <function Container.resolve_parse_tree at 0x7f3130fb0670>
               └ {'_value_': '${self_instantiate:}', '_target_': 'silk.config.hardware.get_cpus'}
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/base.py", line 769, in resolve_parse_tree
    raise InterpolationResolutionError(
          └ <class 'omegaconf.errors.InterpolationResolutionError'>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/base.py", line 764, in resolve_parse_tree
    return visitor.visit(parse_tree)
           │       │     └ <omegaconf.grammar.gen.OmegaConfGrammarParser.OmegaConfGrammarParser.ConfigValueContext object at 0x7f2ed126ba70>
           │       └ <function ParseTreeVisitor.visit at 0x7f31313a4d30>
           └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
  File "/usr/local/lib/python3.10/dist-packages/antlr4/tree/Tree.py", line 34, in visit
    return tree.accept(self)
           │    │      └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
           │    └ <function OmegaConfGrammarParser.ConfigValueContext.accept at 0x7f313131c550>
           └ <omegaconf.grammar.gen.OmegaConfGrammarParser.OmegaConfGrammarParser.ConfigValueContext object at 0x7f2ed126ba70>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/grammar/gen/OmegaConfGrammarParser.py", line 206, in accept
    return visitor.visitConfigValue(self)
           │       │                └ <omegaconf.grammar.gen.OmegaConfGrammarParser.OmegaConfGrammarParser.ConfigValueContext object at 0x7f2ed126ba70>
           │       └ <function GrammarVisitor.visitConfigValue at 0x7f3130f25900>
           └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/grammar_visitor.py", line 101, in visitConfigValue
    return self.visit(ctx.getChild(0))
           │    │     │   └ <function ParserRuleContext.getChild at 0x7f31313a7130>
           │    │     └ <omegaconf.grammar.gen.OmegaConfGrammarParser.OmegaConfGrammarParser.ConfigValueContext object at 0x7f2ed126ba70>
           │    └ <function ParseTreeVisitor.visit at 0x7f31313a4d30>
           └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
  File "/usr/local/lib/python3.10/dist-packages/antlr4/tree/Tree.py", line 34, in visit
    return tree.accept(self)
           │    │      └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
           │    └ <function OmegaConfGrammarParser.TextContext.accept at 0x7f31312e7a30>
           └ <omegaconf.grammar.gen.OmegaConfGrammarParser.OmegaConfGrammarParser.TextContext object at 0x7f2ed126bae0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/grammar/gen/OmegaConfGrammarParser.py", line 342, in accept
    return visitor.visitText(self)
           │       │         └ <omegaconf.grammar.gen.OmegaConfGrammarParser.OmegaConfGrammarParser.TextContext object at 0x7f2ed126bae0>
           │       └ <function GrammarVisitor.visitText at 0x7f3130f260e0>
           └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/grammar_visitor.py", line 298, in visitText
    return self.visitInterpolation(c)
           │    │                  └ <omegaconf.grammar.gen.OmegaConfGrammarParser.OmegaConfGrammarParser.InterpolationContext object at 0x7f2ed126bb50>
           │    └ <function GrammarVisitor.visitInterpolation at 0x7f3130f25b40>
           └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/grammar_visitor.py", line 125, in visitInterpolation
    return self.visit(ctx.getChild(0))
           │    │     │   └ <function ParserRuleContext.getChild at 0x7f31313a7130>
           │    │     └ <omegaconf.grammar.gen.OmegaConfGrammarParser.OmegaConfGrammarParser.InterpolationContext object at 0x7f2ed126bb50>
           │    └ <function ParseTreeVisitor.visit at 0x7f31313a4d30>
           └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
  File "/usr/local/lib/python3.10/dist-packages/antlr4/tree/Tree.py", line 34, in visit
    return tree.accept(self)
           │    │      └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
           │    └ <function OmegaConfGrammarParser.InterpolationResolverContext.accept at 0x7f3131346cb0>
           └ <omegaconf.grammar.gen.OmegaConfGrammarParser.OmegaConfGrammarParser.InterpolationResolverContext object at 0x7f2ed126bbc0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/grammar/gen/OmegaConfGrammarParser.py", line 1041, in accept
    return visitor.visitInterpolationResolver(self)
           │       │                          └ <omegaconf.grammar.gen.OmegaConfGrammarParser.OmegaConfGrammarParser.InterpolationResolverContext object at 0x7f2ed126bbc0>
           │       └ <function GrammarVisitor.visitInterpolationResolver at 0x7f3130f25c60>
           └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/grammar_visitor.py", line 179, in visitInterpolationResolver
    return self.resolver_interpolation_callback(
           │    └ <function Container.resolve_parse_tree.<locals>.resolver_interpolation_callback at 0x7f2ed1286200>
           └ <omegaconf.grammar_visitor.GrammarVisitor object at 0x7f2ed13ac7f0>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/base.py", line 750, in resolver_interpolation_callback
    return self._evaluate_custom_resolver(
           │    └ <function Container._evaluate_custom_resolver at 0x7f3130fb04c0>
           └ {'_value_': '${self_instantiate:}', '_target_': 'silk.config.hardware.get_cpus'}
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/base.py", line 694, in _evaluate_custom_resolver
    return resolver(
           └ <function OmegaConf.register_new_resolver.<locals>.resolver_wrapper at 0x7f31304a2200>
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/omegaconf.py", line 439, in resolver_wrapper
    ret = resolver(*args, **kwargs)
          │         │       └ {'_parent_': {'_value_': '${self_instantiate:}', '_target_': 'silk.config.hardware.get_cpus'}, '_node_': '${self_instantiate:}'}
          │         └ ()
          └ <function self_instantiate at 0x7f31304a2170>

  File "/root/silk/silk/config/resolver.py", line 108, in self_instantiate
    obj = instantiate(parent)
          │           └ {'_target_': 'silk.config.hardware.get_cpus'}
          └ <function instantiate at 0x7f31304a1e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'_target_': 'silk.config.hardware.get_cpus'}
           │     │     └ <function instantiate at 0x7f3130e16560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f3130e16680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 297, in instantiate_node
    recursive = node[_Keys.RECURSIVE] if _Keys.RECURSIVE in node else recursive
                │    │     │             │     │            │         └ True
                │    │     │             │     │            └ {'_target_': 'silk.config.hardware.get_cpus'}
                │    │     │             │     └ <_Keys.RECURSIVE: '_recursive_'>
                │    │     │             └ <enum '_Keys'>
                │    │     └ <_Keys.RECURSIVE: '_recursive_'>
                │    └ <enum '_Keys'>
                └ {'_target_': 'silk.config.hardware.get_cpus'}
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/dictconfig.py", line 540, in __contains__
    node = self._get_child(key)
           │    │          └ <_Keys.RECURSIVE: '_recursive_'>
           │    └ <function BaseContainer._get_child at 0x7f3130fb16c0>
           └ {'_target_': 'silk.config.hardware.get_cpus'}
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/basecontainer.py", line 73, in _get_child
    child = self._get_node(
            │    └ <function DictConfig._get_node at 0x7f3130fdd120>
            └ {'_target_': 'silk.config.hardware.get_cpus'}
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/dictconfig.py", line 464, in _get_node
    key = self._validate_and_normalize_key(key)
          │    │                           └ <_Keys.RECURSIVE: '_recursive_'>
          │    └ <function DictConfig._validate_and_normalize_key at 0x7f3130fdc9d0>
          └ {'_target_': 'silk.config.hardware.get_cpus'}
  File "/usr/local/lib/python3.10/dist-packages/omegaconf/dictconfig.py", line 275, in _validate_and_normalize_key
    return self._s_validate_and_normalize_key(self._metadata.key_type, key)
           │    │                             │    │         │         └ <_Keys.RECURSIVE: '_recursive_'>
           │    │                             │    │         └ typing.Any
           │    │                             │    └ ContainerMetadata(ref_type=typing.Any, object_type=<class 'dict'>, optional=True, key='ncpus', flags={'allow_objects': True, ...
           │    │                             └ {'_target_': 'silk.config.hardware.get_cpus'}
           │    └ <function DictConfig._s_validate_and_normalize_key at 0x7f3130fdca60>
           └ {'_target_': 'silk.config.hardware.get_cpus'}
  File "/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/signal_handling.py", line 66, in handler
    _error_if_any_worker_fails()
    └ <built-in function _error_if_any_worker_fails>

omegaconf.errors.InterpolationResolutionError: RuntimeError raised while resolving interpolation: DataLoader worker (pid 156525) exited unexpectedly with exit code 1. Details are lost due to multiprocessing. Rerunning with num_workers=0 may give better error trace.
    full_key: default.ncpus._value_
    object_type=dict
2025-02-24 08:04:58.573 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 08:05:01.324 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 08:05:01.325 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 08:05:04.274 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 08:05:39.211 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 08:06:10.411 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 08:06:10.411 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 08:06:13.361 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 08:06:18.486 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 08:27:30.762 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 08:27:30.763 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 08:27:33.696 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 08:28:08.703 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 08:28:43.912 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 08:28:43.913 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 08:28:46.863 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 08:31:28.407 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (162466), thread 'MainThread' (139860095263168):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f33b67d6e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f33b728ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f33b67d6e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f33b5ea2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f33b6815d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f33b6815e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f33b6815cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f33b5d06830>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f33b675f2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f33b5f2d900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f33b6814ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f33b5ea23b0>
    │   └ <property object at 0x7f33b6ec21b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f33b5ea1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f33b5ea16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f33b70f5bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f33b72b6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f33b5b61f90>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f315d0351b0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f317bf339a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f315ce40f10>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f317bf33880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f315ce40f10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f315ce40f10>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f317bf483a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f315ce40f10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f317bf485e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f315ce40f10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f315ce40f10>
    │    └ <property object at 0x7f317bf3f3d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f315ce40f10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f317bf48670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f315ce40f10>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f315ce41060>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f317bf48790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f315ce40f10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f317bf54ea0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f315ce40f10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f317bee6cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f315ce40430>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f315ce82530>
    │    │          └ <function Loop.run at 0x7f317be76b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f315ce417e0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f315ce40430>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f315ce82530>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f317bed3ac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f315ce417e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f317be76b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f315ce41ab0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f315ce417e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f317bed0820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f315ce41ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f317be76b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f315ce411e0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f315ce41ab0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f317bed00d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f315ce411e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f317bed01f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f315ce411e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f315cd440a0>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f317bed05e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f315ce411e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f317bf5a290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f315cd440a0>
    │         └ <function LightningOptimizer.step at 0x7f31bf012710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f315cd440a0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f33b5d43e20 to Trainer at 0x7f315ce40f10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f315cd440a0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f31bf0fc700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f315ce42860>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f315ce40f40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f315d05cca0>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f3264d4fd90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f3264d4fd00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f315cd440a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f317bebfb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f315cd440a0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f315cd440a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f315cd440a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7f317c02f150>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f315ce411e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f31bf0b1ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f315ce41060>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f315ce40f40>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7f31bf0a5170>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f315ce41060>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f32650d45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f3264d14280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f32650d45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 488, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f31667432e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f31653b2c80>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f31653b2c80>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f31653b2c80>
           │    │     └ <function Flow.flow_from_tape at 0x7f3171088280>
           │    └ <silk.flow.Flow object at 0x7f31653b2d10>
           └ <silk.flow.FixedOutputFlow object at 0x7f31653b2c80>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f31653b3850>, <silk.flow._InputExtraction object at 0x7f31653b2bf0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f31653b2d10>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f33b6f7c5e0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-0.0297, -0.2153, -0.1166,  ...,  0.0567, -0.0535, -0.0436],
           │    │          │         │                  [-0.0903, -0.1114, -0...
           │    │          │         └ <property object at 0x7f33b6f7c590>
           │    │          └ <BoundArguments (desc_0=tensor([[[-0.0297, -0.2153, -0.1166,  ...,  0.0567, -0.0535, -0.0436],
           │    │                     [-0.0903, -0.1114, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f315d034250>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 68, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f3166741630>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7f3166741ab0>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 501, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7f3166741870>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
              │    │                     [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7f315ccc5750>
              └ <function _scan_reduce.<locals>.scan at 0x7f315ccc56c0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[-0.5101, -0.4678,  0.0377,  ..., -0.3985, -0.1576,  0.0652],
    │          │ │                [ 0.5252, -0.2586, -0.1792,  ..., -0.5510, -0.3...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7f315ccc5750>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[-0.3313, -0.0094,  0.2361,  ...,  0.4603,  0.0949, -0.1702],
                 │       │             [ 0.5297, -0.2975, -0.2658,  ...,  0.0962,  0.0...
                 │       └ tensor([[-0.5101, -0.4678,  0.0377,  ..., -0.3985, -0.1576,  0.0652],
                 │                 [ 0.5252, -0.2586, -0.1792,  ..., -0.5510, -0.3...
                 └ <function total_loss.<locals>.reducer at 0x7f315ccc5630>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-0.9793,  0.3275, -2.0142,  ..., -0.5607, -0.7424,  0.5851],
    │     │                   [-0.7765,  1.9214,  2.9543,  ...,  0.9901,  1.9...
    │     └ <built-in method logsumexp of type object at 0x7f33b3a59840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 0 has a total capacity of 47.54 GiB of which 3.17 GiB is free. Process 2018486 has 44.34 GiB memory in use. Of the allocated memory 44.04 GiB is allocated by PyTorch, and 1.73 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 08:31:30.718 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 08:38:15.307 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 08:38:15.308 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 08:38:18.299 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 08:40:19.294 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-24 08:40:19.295 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-24 08:40:19.295 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-24 08:41:00.931 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 08:41:00.931 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 08:41:03.843 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 08:42:25.777 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 08:55:58.472 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 08:55:58.472 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 08:56:01.451 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 08:56:06.695 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 08:57:29.971 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 08:57:29.971 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 08:57:32.929 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 08:58:55.001 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:02:38.525 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:02:38.526 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:02:41.487 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:03:02.421 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:03:06.139 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:03:06.140 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:03:09.140 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:03:49.470 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:03:53.433 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:03:53.434 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:03:56.337 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:05:20.546 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:09:33.775 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:09:33.776 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:09:36.723 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:09:39.873 | SUCCESS  | silk.cli:_main:95 - main dispatch successfully executed
2025-02-24 09:09:39.874 | SUCCESS  | silk.cli:_main:99 - formatter successfully converted output
2025-02-24 09:09:39.874 | SUCCESS  | silk.cli:_main:101 - ran successfully in working directory : .
2025-02-24 09:09:41.598 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:09:41.598 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:09:44.543 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:11:01.997 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (181548), thread 'MainThread' (140586515456448):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fdcd87d6e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fdcd92d6f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fdcd87d6e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fdcd7eda440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fdcd8815d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fdcd8815e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fdcd8815cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fdcd7d4a9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fdcd875f2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fdcd7f61960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fdcd8814ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fdcd7eda3b0>
    │   └ <property object at 0x7fdcd883ee30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fdcd7ed9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fdcd7ed96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fdcd913dbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fdcd92fe830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fda9dde8070>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fda8006c340>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fda9df879a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fda9df87880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fda9df9c3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fda9df9c5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>
    │    └ <property object at 0x7fda9df8b970>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fda9df9c670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fda6ceec700>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fda9df9c790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fda9df8bec0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>
    │    └ <function Trainer._run_sanity_check at 0x7fda9df9c940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fda9dfa53a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fda6ceecbb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fda9df38d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fda9dfaa7a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fdaa04ec130>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fda9dfaa7a0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fda9ddcdab0>
                 │    │          └ <function Loop.run at 0x7fda9decab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fda9dfaa650>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fda9dfaa7a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fda9ddcdab0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fda9df25e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fda9dfaa650>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fda9df26290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fda9dfaa650>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fda9e07b830>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fda9dfaa650>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fdae11c1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fda6ceec700>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fda6ceef400>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fdae11b5210>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fda6ceec700>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fdb871d45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fdb86e14280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fdb871d45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 496, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fda88a13250>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fda873e7a60>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fda873e7a60>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fda873e7a60>
           │    │     └ <function Flow.flow_from_tape at 0x7fda93084280>
           │    └ <silk.flow.Flow object at 0x7fda873e74f0>
           └ <silk.flow.FixedOutputFlow object at 0x7fda873e7a60>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fda873e7610>, <silk.flow._InputExtraction object at 0x7fda873e6ad0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fda873e74f0>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fdcd8fc45e0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-0.0287,  0.0582, -0.0475,  ...,  0.2149, -0.1133, -0.0878],
           │    │          │         │                  [-0.0357,  0.0828, -0...
           │    │          │         └ <property object at 0x7fdcd8fc4590>
           │    │          └ <BoundArguments (desc_0=tensor([[[-0.0287,  0.0582, -0.0475,  ...,  0.2149, -0.1133, -0.0878],
           │    │                     [-0.0357,  0.0828, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fda8006d0c0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 74, in __call__
    desc_0,
    └ tensor([[[-0.0907,  0.1842, -0.1501,  ...,  0.6796, -0.3583, -0.2776],
               [-0.1128,  0.2619, -0.1779,  ...,  0.5637, -0...

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7fda88a11870>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 502, in total_loss
    lse_0,
    └ tensor([12.9604, 12.9604, 12.9604,  ..., 27.0153, 26.9977, 27.0650],
             device='cuda:0')

  File "/root/silk/silk/losses/info_nce/loss.py", line 329, in sym_corr_cross_entropy
    loss_0 = asym_corr_cross_entropy(
             └ <function asym_corr_cross_entropy at 0x7fda88a116c0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 292, in asym_corr_cross_entropy
    log_p_corr = torch.sum(log_num[query_corr==True]) - torch.sum(log_den[query_corr==True])
                 │     │   │       │                    │     │   │       └ tensor([False, False, False,  ..., False, False, False], device='cuda:1')
                 │     │   │       │                    │     │   └ tensor([12.9604, 12.9604, 12.9604,  ..., 27.0153, 26.9977, 27.0650],
                 │     │   │       │                    │     │            device='cuda:0')
                 │     │   │       │                    │     └ <built-in method sum of type object at 0x7fdcd5c59840>
                 │     │   │       │                    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
                 │     │   │       └ tensor([False, False, False,  ..., False, False, False], device='cuda:1')
                 │     │   └ tensor([[0.],
                 │     │             [0.],
                 │     │             [0.],
                 │     │             ...,
                 │     │             [0.],
                 │     │             [0.],
                 │     │             [0.]], device='cuda:1')
                 │     └ <built-in method sum of type object at 0x7fdcd5c59840>
                 └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

RuntimeError: indices should be either on cpu or on the same device as the indexed tensor (cuda:0)
2025-02-24 09:11:02.104 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:11:56.855 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:11:56.856 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:11:59.820 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:12:26.732 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (183336), thread 'MainThread' (139725666259392):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f1469e6ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f146a90af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f1469e6ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f14694fe440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f1469ea5d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f1469ea5e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f1469ea5cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f14693829e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f1469def2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f1469589930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f1469ea4ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f14694fe3b0>
    │   └ <property object at 0x7f1469ed2de0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f14694fd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f14694fd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f146a771bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f146a936830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f1468199b10>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f12106d1330>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f122f5cb9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f122f5cb880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f122f5e43a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f122f5e45e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>
    │    └ <property object at 0x7f122f5cf790>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f122f5e4670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f12103865f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f122f5e4790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f122f5cfce0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>
    │    └ <function Trainer._run_sanity_check at 0x7f122f5e4940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f122f5ed1c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f1210385240>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f122f57cd30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f122f5e9ea0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f122f55b740>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f122f5e9ea0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f122f40ded0>
                 │    │          └ <function Loop.run at 0x7f122f50eb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f122f5eab00>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f122f5e9ea0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f122f40ded0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f122f569e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f122f5eab00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f122f56a290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f122f5eab00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f122f6cb600>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f122f5eab00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f12727bdb40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f12103865f0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f1210384a90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f12727ad5d0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f12103865f0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f13187d05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f131840c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f13187d05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 496, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f1219e9f2e0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f1218a5add0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f1218a5add0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f1218a5add0>
           │    │     └ <function Flow.flow_from_tape at 0x7f1224688280>
           │    └ <silk.flow.Flow object at 0x7f1218a5ae60>
           └ <silk.flow.FixedOutputFlow object at 0x7f1218a5add0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f1218a5b9a0>, <silk.flow._InputExtraction object at 0x7f1218a5ad40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f1218a5ae60>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f146a6044f0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 0.0986, -0.0303, -0.0820,  ...,  0.2167, -0.2106,  0.1113],
           │    │          │         │                  [ 0.1086, -0.0684, -0...
           │    │          │         └ <property object at 0x7f146a6044a0>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 0.0986, -0.0303, -0.0820,  ...,  0.2167, -0.2106,  0.1113],
           │    │                     [ 0.1086, -0.0684, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f12106d03d0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f1219e9d630>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7f1219e9dab0>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 501, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f1219e9d990>

  File "/root/silk/silk/losses/info_nce/loss.py", line 329, in sym_corr_cross_entropy
    loss_0 = asym_corr_cross_entropy(
             └ <function asym_corr_cross_entropy at 0x7f1219e9d900>

  File "/root/silk/silk/losses/info_nce/loss.py", line 292, in asym_corr_cross_entropy
    log_p_corr = torch.sum(log_num[query_corr==True]) - torch.sum(log_den[query_corr==True])
                 │     │   │       │                    │     │   │       └ tensor([False, False, False,  ..., False, False, False], device='cuda:1')
                 │     │   │       │                    │     │   └ tensor([12.9604, 12.9604, 12.9604,  ..., 28.6770, 28.6770, 28.6770],
                 │     │   │       │                    │     │            device='cuda:0')
                 │     │   │       │                    │     └ <built-in method sum of type object at 0x7f1467259840>
                 │     │   │       │                    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
                 │     │   │       └ tensor([False, False, False,  ..., False, False, False], device='cuda:1')
                 │     │   └ tensor([[0.],
                 │     │             [0.],
                 │     │             [0.],
                 │     │             ...,
                 │     │             [0.],
                 │     │             [0.],
                 │     │             [0.]], device='cuda:1')
                 │     └ <built-in method sum of type object at 0x7f1467259840>
                 └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

RuntimeError: indices should be either on cpu or on the same device as the indexed tensor (cuda:0)
2025-02-24 09:12:26.856 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:13:00.751 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:13:00.751 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:13:03.722 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:13:30.494 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (185124), thread 'MainThread' (139872325214656):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f368f76ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f36901f2f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f368f76ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f368edfe440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f368f7a9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f368f7a9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f368f7a9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f368ec629e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f368f6ef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f368ee85990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f368f7a8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f368edfe3b0>
    │   └ <property object at 0x7f368f7d2e30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f368edfd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f368edfd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f3690059bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f369021a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f368eab9ea0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f3433f81690>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f3454e939a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f3454e93880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f3454eac3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f3454eac5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>
    │    └ <property object at 0x7f3454e97b50>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f3454eac670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f3431d18cd0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f3454eac790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f3454eb00e0>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>
    │    └ <function Trainer._run_sanity_check at 0x7f3454eac940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f3454eb1580>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f3431d18fa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f3454e40d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f3454eab2e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f3454e13a60>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f3454eab2e0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f3454cdb280>
                 │    │          └ <function Loop.run at 0x7f3454fd2b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f3454eab100>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f3454eab2e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f3454cdb280>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f3454e2de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f3454eab100>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f3454e2e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f3454eab100>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f3454f87880>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f3454eab100>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f3498009b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f3431d18cd0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f3431d19de0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f3498000c70>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f3431d18cd0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f353dfc85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f353dc08280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f353dfc85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 496, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f343f93b1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f343e32efe0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f343e32efe0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f343e32efe0>
           │    │     └ <function Flow.flow_from_tape at 0x7f344a074280>
           │    └ <silk.flow.Flow object at 0x7f343e32f070>
           └ <silk.flow.FixedOutputFlow object at 0x7f343e32efe0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f343e32fbb0>, <silk.flow._InputExtraction object at 0x7f343e32ef50>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f343e32f070>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f368fee05e0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-1.8267e-02,  1.6320e-01,  1.1150e-04,  ...,  1.7457e-01,
           │    │          │         │                    7.6195e-02,  1.1279e-0...
           │    │          │         └ <property object at 0x7f368fee0590>
           │    │          └ <BoundArguments (desc_0=tensor([[[-1.8267e-02,  1.6320e-01,  1.1150e-04,  ...,  1.7457e-01,
           │    │                       7.6195e-02,  1.1279e-0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f3433f80640>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f343f939510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7f343f939990>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 499, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7f343f939870>

  File "/root/silk/silk/losses/info_nce/loss.py", line 329, in sym_corr_cross_entropy
    loss_0 = asym_corr_cross_entropy(
             └ <function asym_corr_cross_entropy at 0x7f343f9397e0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 292, in asym_corr_cross_entropy
    log_p_corr = torch.sum(log_num[query_corr==True]) - torch.sum(log_den[query_corr==True])
                 │     │   │       │                    │     │   │       └ tensor([False, False, False,  ..., False, False, False], device='cuda:1')
                 │     │   │       │                    │     │   └ tensor([12.9604, 12.9604, 12.9604,  ..., 30.4396, 30.4158, 30.4076],
                 │     │   │       │                    │     │            device='cuda:0')
                 │     │   │       │                    │     └ <built-in method sum of type object at 0x7f368ca59840>
                 │     │   │       │                    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
                 │     │   │       └ tensor([False, False, False,  ..., False, False, False], device='cuda:1')
                 │     │   └ tensor([[0.],
                 │     │             [0.],
                 │     │             [0.],
                 │     │             ...,
                 │     │             [0.],
                 │     │             [0.],
                 │     │             [0.]], device='cuda:1')
                 │     └ <built-in method sum of type object at 0x7f368ca59840>
                 └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

RuntimeError: indices should be either on cpu or on the same device as the indexed tensor (cuda:0)
2025-02-24 09:13:30.619 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:18:24.373 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:18:24.374 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:18:27.369 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:18:54.330 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (186912), thread 'MainThread' (140533514215872):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fd081666e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fd0820eaf80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fd081666e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fd080cfa440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fd0816a1d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fd0816a1e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fd0816a1cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fd080b569e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fd0815eb2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fd080d81930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fd0816a0ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fd080cfa3b0>
    │   └ <property object at 0x7fd08161fce0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fd080cf9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fd080cf96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fd081f51bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fd082112830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fd07f991ab0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fce280711b0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fce46d939a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fce46d93880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fce46da83a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fce46da85e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>
    │    └ <property object at 0x7fce46d977e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fce46da8670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fce21b2f9d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fce46da8790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fce46d97d30>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>
    │    └ <function Trainer._run_sanity_check at 0x7fce46da8940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fce46db1210>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fce21b2d3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fce46d44d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fce46daed10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fce46d0f7e0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fce46daed10>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fce46dddff0>
                 │    │          └ <function Loop.run at 0x7fce46ed2b00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fce46dae890>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fce46daed10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fce46dddff0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fce46d2de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fce46dae890>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fce46d2e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fce46dae890>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fce46e87790>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fce46dae890>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fce89fbdb40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fce21b2f9d0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fce21b2f1f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fce89fad5d0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fce21b2f9d0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fcf2ffcc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fcf2fc0c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fcf2ffcc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 496, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fce3182b1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fce30182ce0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fce30182ce0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fce30182ce0>
           │    │     └ <function Flow.flow_from_tape at 0x7fce3be68280>
           │    └ <silk.flow.Flow object at 0x7fce30182d70>
           └ <silk.flow.FixedOutputFlow object at 0x7fce30182ce0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fce301838b0>, <silk.flow._InputExtraction object at 0x7fce30182c50>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fce30182d70>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fd081dd85e0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-0.0926,  0.0371, -0.2149,  ..., -0.1442, -0.0822, -0.1186],
           │    │          │         │                  [-0.0031,  0.1255, -0...
           │    │          │         └ <property object at 0x7fd081dd8590>
           │    │          └ <BoundArguments (desc_0=tensor([[[-0.0926,  0.0371, -0.2149,  ..., -0.1442, -0.0822, -0.1186],
           │    │                     [-0.0031,  0.1255, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fce28070250>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fce31829510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7fce31829990>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 499, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7fce31829870>

  File "/root/silk/silk/losses/info_nce/loss.py", line 329, in sym_corr_cross_entropy
    loss_0 = asym_corr_cross_entropy(
             └ <function asym_corr_cross_entropy at 0x7fce318297e0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 273, in asym_corr_cross_entropy
    _desc_1 = torch.where(corr_mask>0, desc_1[corr], 0)
              │     │     │            │      └ tensor([-1, -1, -1,  ..., -1, -1, -1], device='cuda:0', dtype=torch.int32)
              │     │     │            └ tensor([[ 0.3084,  0.5538,  0.4590,  ..., -0.4682,  0.6895, -0.2437],
              │     │     │                      [ 0.2870,  0.5583,  0.4895,  ..., -0.4643,  0.6...
              │     │     └ tensor([[-1, -1, -1,  ..., -1, -1, -1],
              │     │               [-1, -1, -1,  ..., -1, -1, -1],
              │     │               [-1, -1, -1,  ..., -1, -1, -1],
              │     │            ...
              │     └ <built-in method where of type object at 0x7fd07ea59840>
              └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

RuntimeError: indices should be either on cpu or on the same device as the indexed tensor (cuda:1)
2025-02-24 09:18:54.423 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:19:29.673 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:19:29.673 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:19:32.631 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:19:59.573 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (188700), thread 'MainThread' (140447439892928):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fbc76f5ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fbc77a02f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fbc76f5ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fbc765f2440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fbc76f9dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fbc76f9de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fbc76f9dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fbc766aa9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fbc76ee32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fbc76679960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fbc76f9cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fbc765f23b0>
    │   └ <property object at 0x7fbc76f83dd0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fbc765f1750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fbc765f16c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fbc7786dbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fbc77a2e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fbc762cdd50>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fba1d78d1b0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fba3c69f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fba3c69f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fba3c6b43a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fba3c6b45e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>
    │    └ <property object at 0x7fba3c6a3830>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fba3c6b4670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fba1d5b5840>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fba3c6b4790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fba3c6a3d80>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>
    │    └ <function Trainer._run_sanity_check at 0x7fba3c6b4940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fba3c6c1260>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fba1d5b5fc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fba3c650d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fba3c6bec80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fba3c61f790>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fba3c6bec80>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fba3c6ea1d0>
                 │    │          └ <function Loop.run at 0x7fba3c7deb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fba3c6bec50>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fba3c6bec80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fba3c6ea1d0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fba3c63de10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fba3c6bec50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fba3c63e290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fba3c6bec50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fba3c797650>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fba3c6bec50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fba7f8b9b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fba1d5b5840>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fba1d5b4760>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fba7f8b0ae0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fba1d5b5840>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fbb257c45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fbb25404280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fbb257c45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 496, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fba271171c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fba25b16d10>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fba25b16d10>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fba25b16d10>
           │    │     └ <function Flow.flow_from_tape at 0x7fba31868280>
           │    └ <silk.flow.Flow object at 0x7fba25b16da0>
           └ <silk.flow.FixedOutputFlow object at 0x7fba25b16d10>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fba25b178e0>, <silk.flow._InputExtraction object at 0x7fba25b16c80>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fba25b16da0>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fbc776fc360>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 0.0924, -0.0459,  0.1301,  ..., -0.2739, -0.1741, -0.2020],
           │    │          │         │                  [ 0.0413, -0.0629,  0...
           │    │          │         └ <property object at 0x7fbc776fc310>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 0.0924, -0.0459,  0.1301,  ..., -0.2739, -0.1741, -0.2020],
           │    │                     [ 0.0413, -0.0629,  0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fba1d78c250>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fba27115510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7fba27115990>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 511, in total_loss
    loss_1, precision, recall = corr_matching_binary_cross_entropy(
                                └ <function corr_matching_binary_cross_entropy at 0x7fba27115900>

  File "/root/silk/silk/losses/info_nce/loss.py", line 378, in corr_matching_binary_cross_entropy
    tp_mask_0 = torch.logical_and(gt_mask_0, pr_mask_0)
                │     │           │          └ tensor([[ True, False, False,  ..., False, False, False]], device='cuda:0')
                │     │           └ tensor([[False, False, False,  ..., False, False, False]], device='cuda:1')
                │     └ <built-in method logical_and of type object at 0x7fbc74259840>
                └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:1 and cuda:0!
2025-02-24 09:19:59.665 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:21:54.347 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:21:54.348 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:21:57.315 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:22:24.102 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (190488), thread 'MainThread' (140532830253504):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fd0589cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fd05949af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fd0589cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fd05809a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fd058a0dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fd058a0de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fd058a0dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fd057f129e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fd0589572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fd058121930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fd058a0cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fd05809a3b0>
    │   └ <property object at 0x7fd0589f3c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fd058099750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fd0580996c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fd059305bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fd0594c6830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fd056d91de0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fce0022d540>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fce1e13b9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fce1e13b880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fce1e1543a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fce1e1545e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>
    │    └ <property object at 0x7fce1e1435b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fce1e154670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fcdecf1d780>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fce1e154790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fce1e143b00>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>
    │    └ <function Trainer._run_sanity_check at 0x7fce1e154940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fce1e158fe0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fcdecf1cdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fce1e0ecd30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fce1e1529e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fce1e0cf510>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fce1e1529e0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fce1e1878e0>
                 │    │          └ <function Loop.run at 0x7fce1e27ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fce1e152140>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fce1e1529e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fce1e1878e0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fce1e0d9e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fce1e152140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fce1e0da290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fce1e152140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fce1e2373d0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fce1e152140>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fce6130db40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fcdecf1d780>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fcdecf1fa60>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fce613053a0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fcdecf1d780>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fcf073cc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fcf0700c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fcf073cc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 496, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fce08b2b1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fce075b6f50>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fce075b6f50>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fce075b6f50>
           │    │     └ <function Flow.flow_from_tape at 0x7fce13268280>
           │    └ <silk.flow.Flow object at 0x7fce075b6fe0>
           └ <silk.flow.FixedOutputFlow object at 0x7fce075b6f50>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fce075b7b20>, <silk.flow._InputExtraction object at 0x7fce075b6ec0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fce075b6fe0>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fd059194450>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-0.1830, -0.2122,  0.0905,  ...,  0.1309, -0.1483, -0.1328],
           │    │          │         │                  [-0.1490, -0.2089,  0...
           │    │          │         └ <property object at 0x7fd059194400>
           │    │          └ <BoundArguments (desc_0=tensor([[[-0.1830, -0.2122,  0.0905,  ...,  0.1309, -0.1483, -0.1328],
           │    │                     [-0.1490, -0.2089,  0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fce0022c5b0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fce08b29510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7fce08b29990>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 511, in total_loss
    loss_1, precision, recall = corr_matching_binary_cross_entropy(
                                └ <function corr_matching_binary_cross_entropy at 0x7fce08b29900>

  File "/root/silk/silk/losses/info_nce/loss.py", line 385, in corr_matching_binary_cross_entropy
    loss_0 = correct_mask_0 * torch.nn.functional.softplus(-logits_0) + (
             │                │     │  │          │         └ tensor([[-1.0835, -1.0473, -1.1731,  ...,  0.5513,  0.6072,  0.5419]],
             │                │     │  │          │                  device='cuda:1')
             │                │     │  │          └ <built-in function softplus>
             │                │     │  └ <module 'torch.nn.functional' from '/usr/local/lib/python3.10/dist-packages/torch/nn/functional.py'>
             │                │     └ <module 'torch.nn' from '/usr/local/lib/python3.10/dist-packages/torch/nn/__init__.py'>
             │                └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>
             └ tensor([[False,  True,  True,  ...,  True,  True,  True]], device='cuda:0')

RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:0 and cuda:1!
2025-02-24 09:22:24.195 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:22:40.232 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:22:40.232 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:22:43.190 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:23:12.774 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (192276), thread 'MainThread' (140559112503744):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fd6772e2e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fd677d52f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fd6772e2e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fd67697a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fd677321d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fd677321e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fd677321cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fd6767d69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fd67726b2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fd676a05900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fd677320ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fd67697a3b0>
    │   └ <property object at 0x7fd67734b100>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fd676979750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fd6769796c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fd677bbdbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fd677d7e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fd6755a1d20>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fd41db09210>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fd43c9fb9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd41d944790>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fd43c9fb880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd41d944790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd41d944790>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fd43ca103a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd41d944790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fd43ca105e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd41d944790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd41d944790>
    │    └ <property object at 0x7fd43c9ff7e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd41d944790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fd43ca10670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd41d944790>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fd41d946470>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fd43ca10790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd41d944790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7fd43ca1d2b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd41d944790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7fd43c9aecb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fd41d945180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fd41d8ae140>
    │    │          └ <function Loop.run at 0x7fd43c93eb00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fd41d944910>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fd41d945180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fd41d8ae140>,)
    │    └ <function TrainingEpochLoop.advance at 0x7fd43c99bac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fd41d944910>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7fd43c93eb00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fd41d9449d0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fd41d944910>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7fd43c998820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fd41d9449d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7fd43c93eb00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fd41d945ea0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fd41d9449d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7fd43c9980d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fd41d945ea0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7fd43c9981f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fd41d945ea0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd41d7fefe0>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7fd43c9985e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fd41d945ea0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7fd43ca22290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd41d7fefe0>
    │         └ <function LightningOptimizer.step at 0x7fd47fb1e710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd41d7fefe0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7fd425edc270 to Trainer at 0x7fd41d944790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd41d7fefe0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7fd524ecc700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7fd41d945f30>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fd41d944550>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7fd41db30c10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7fd525853d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7fd525853d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd41d7fefe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7fd43c987b50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd41d7fefe0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd41d7fefe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd41d7fefe0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7fd43caf3600>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fd41d945ea0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7fd47fbbdab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fd41d946470>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fd41d944550>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7fd47fbad580>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fd41d946470>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fd525bd85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fd525818280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fd525bd85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 489, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fd42748f1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fd425e82d40>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fd425e82d40>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fd425e82d40>
           │    │     └ <function Flow.flow_from_tape at 0x7fd431a84280>
           │    └ <silk.flow.Flow object at 0x7fd425e82dd0>
           └ <silk.flow.FixedOutputFlow object at 0x7fd425e82d40>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fd425e83910>, <silk.flow._InputExtraction object at 0x7fd425e82cb0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fd425e82dd0>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fd677a503b0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 0.0954, -0.0578, -0.0158,  ..., -0.1448,  0.0544, -0.0760],
           │    │          │         │                  [ 0.0685, -0.1185, -0...
           │    │          │         └ <property object at 0x7fd677a50360>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 0.0954, -0.0578, -0.0158,  ..., -0.1448,  0.0544, -0.0760],
           │    │                     [ 0.0685, -0.1185, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fd41db082b0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fd42748d360>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7fd42748d7e0>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7fd42748d5a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
              │    │                     [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7fd41d7f56c0>
              └ <function _scan_reduce.<locals>.scan at 0x7fd41d7f5630>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[-0.2776, -0.2772, -0.0318,  ..., -0.7383,  0.5366, -0.5222],
    │          │ │                [-0.2776, -0.2772, -0.0318,  ..., -0.7383,  0.5...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7fd41d7f56c0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[ 0.7089,  0.4960, -0.6405,  ...,  0.4263, -0.4818,  0.3289],
                 │       │             [ 0.7089,  0.4960, -0.6405,  ...,  0.4263, -0.4...
                 │       └ tensor([[-0.2776, -0.2772, -0.0318,  ..., -0.7383,  0.5366, -0.5222],
                 │                 [-0.2776, -0.2772, -0.0318,  ..., -0.7383,  0.5...
                 └ <function total_loss.<locals>.reducer at 0x7fd41d7f55a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-3.5707, -3.5707, -3.5707,  ..., -3.5707, -3.5707, -3.5707],
    │     │                   [-3.5707, -3.5707, -3.5707,  ..., -3.5707, -3.5...
    │     └ <built-in method logsumexp of type object at 0x7fd674659840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 1 has a total capacity of 47.54 GiB of which 2.44 GiB is free. Process 2080356 has 45.07 GiB memory in use. Of the allocated memory 44.19 GiB is allocated by PyTorch, and 218.71 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:23:12.904 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:23:38.834 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:23:38.834 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:23:41.838 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:24:11.046 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:24:28.107 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:24:28.108 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:24:31.027 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:25:00.575 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (198957), thread 'MainThread' (140060974019008):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f627bccee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f627c76ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f627bccee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f627b366440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f627bd0dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f627bd0de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f627bd0dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f627b41e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f627bc572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f627b3f18d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f627bd0cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f627b3663b0>
    │   └ <property object at 0x7f627bcf3b50>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f627b365750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f627b3656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f627c5d9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f627c79a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f6279f8dcc0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f60225212d0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f604141f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f602035a4d0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f604141f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f602035a4d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f602035a4d0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f60414343a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f602035a4d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f60414345e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f602035a4d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f602035a4d0>
    │    └ <property object at 0x7f60414275b0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f602035a4d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f6041434670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f602035a4d0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f602035b010>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f6041434790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f602035a4d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f6041441080>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f602035a4d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f60413d2cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f60203589d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f602037a3e0>
    │    │          └ <function Loop.run at 0x7f6041362b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f6020359d50>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f60203589d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f602037a3e0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f60413bfac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f6020359d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f6041362b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f602035b430>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f6020359d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f60413bc820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f602035b430>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f6041362b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f60203595d0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f602035b430>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f60413bc0d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f60203595d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f60413bc1f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f60203595d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f5ff3fef250>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f60413bc5e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f60203595d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f6041446290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f5ff3fef250>
    │         └ <function LightningOptimizer.step at 0x7f6084516710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f5ff3fef250>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f602255ae30 to Trainer at 0x7f602035a4d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f5ff3fef250>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f61298c4700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f60203583d0>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f6020358b50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f6022548c10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f612a23fd90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f612a23fd00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f5ff3fef250>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f60413abb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f5ff3fef250>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f5ff3fef250>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f5ff3fef250>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7f604151f3d0>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f60203595d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f60845b5ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f602035b010>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f6020358b50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7f60845a8fe0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f602035b010>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f612a5c45e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f612a204280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f612a5c45e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 489, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f602bceb1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f602a8aeda0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f602a8aeda0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f602a8aeda0>
           │    │     └ <function Flow.flow_from_tape at 0x7f603658c280>
           │    └ <silk.flow.Flow object at 0x7f602a8aee30>
           └ <silk.flow.FixedOutputFlow object at 0x7f602a8aeda0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f602a8af970>, <silk.flow._InputExtraction object at 0x7f602a8aed10>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f602a8aee30>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f627c468450>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 0.1870,  0.0082,  0.0513,  ...,  0.1812, -0.0209,  0.1691],
           │    │          │         │                  [-0.1359,  0.1261,  0...
           │    │          │         └ <property object at 0x7f627c468400>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 0.1870,  0.0082,  0.0513,  ...,  0.1812, -0.0209,  0.1691],
           │    │                     [-0.1359,  0.1261,  0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f6022520370>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f602bce9360>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7f602bce97e0>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7f602bce95a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
              │    │                       0.0000e+00,  0.0000e+00],
              │    │                     [ 0.0000e+0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7f5ff3fcd6c0>
              └ <function _scan_reduce.<locals>.scan at 0x7f5ff3fcd630>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[-0.2196, -0.3247, -0.7134,  ...,  0.1152,  0.4747, -0.6982],
    │          │ │                [ 0.0248,  0.1265, -0.2459,  ...,  0.3831,  0.7...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7f5ff3fcd6c0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[ 0.2227,  0.5294,  0.4818,  ...,  0.4084, -0.0152,  0.4705],
                 │       │             [ 0.3994,  0.1311,  0.9305,  ...,  0.4381, -0.1...
                 │       └ tensor([[-0.2196, -0.3247, -0.7134,  ...,  0.1152,  0.4747, -0.6982],
                 │                 [ 0.0248,  0.1265, -0.2459,  ...,  0.3831,  0.7...
                 └ <function total_loss.<locals>.reducer at 0x7f5ff3fcd5a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-0.4526, -1.0604, -0.7327,  ..., -0.0922, -5.0352, -0.6331],
    │     │                   [-1.8016,  0.2611, -2.3283,  ..., -1.3775, -1.7...
    │     └ <built-in method logsumexp of type object at 0x7f6279059840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 1 has a total capacity of 47.54 GiB of which 2.44 GiB is free. Process 2088111 has 45.07 GiB memory in use. Of the allocated memory 44.19 GiB is allocated by PyTorch, and 218.71 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:25:00.706 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:25:25.287 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:25:25.288 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:25:28.181 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:25:34.433 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (202329), thread 'MainThread' (140135445971392):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f73d2ae2e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f73d356ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f73d2ae2e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f73d217a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f73d2b21d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f73d2b21e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f73d2b21cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f73d1ff29e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f73d2a6b2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f73d2201960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f73d2b20ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f73d217a3b0>
    │   └ <property object at 0x7f73d2b0ba10>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f73d2179750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f73d21796c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f73d33d9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f73d359a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f73d0da1b10>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f717a7d9450>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f719822f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f71791085b0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f719822f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f71791085b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f71791085b0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f71982483a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f71791085b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f71982485e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f71791085b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f71791085b0>
    │    └ <property object at 0x7f7198233740>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f71791085b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f7198248670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f71791085b0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f71791089d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f7198248790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f71791085b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f719824d210>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f71791085b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f71981e2cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f717910afb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f71982464a0>
    │    │          └ <function Loop.run at 0x7f7198172b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f717910ac20>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f717910afb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f71982464a0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f71981cbac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f717910ac20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f7198172b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f717910b340>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f717910ac20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f71981c8820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f717910b340>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f7198172b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f7179109780>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f717910b340>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f71981c80d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f7179109780>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f71981c81f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f7179109780>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f717916c1c0>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f71981c85e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f7179109780>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f7198256290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f717916c1c0>
    │         └ <function LightningOptimizer.step at 0x7f71db38a710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f717916c1c0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f71816f2c50 to Trainer at 0x7f71791085b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f717916c1c0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f71db27c700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f717910a830>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f717910aaa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f717a804c10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f7281053d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f7281053d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f717916c1c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f71981bbb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f717916c1c0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f717916c1c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f717916c1c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7f71983274c0>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f7179109780>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f71db429ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f71791089d0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f717910aaa0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7f71db41d030>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f71791089d0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f72813d85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f7281018280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f72813d85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 489, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f7182aff1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f71816bee60>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f71816bee60>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f71816bee60>
           │    │     └ <function Flow.flow_from_tape at 0x7f718d388280>
           │    └ <silk.flow.Flow object at 0x7f71816beef0>
           └ <silk.flow.FixedOutputFlow object at 0x7f71816bee60>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f71816bfa30>, <silk.flow._InputExtraction object at 0x7f71816bedd0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f71816beef0>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f73d326c220>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 0.0740,  0.0504,  0.0171,  ..., -0.3049,  0.0097, -0.1621],
           │    │          │         │                  [-0.0977, -0.0377,  0...
           │    │          │         └ <property object at 0x7f73d326c1d0>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 0.0740,  0.0504,  0.0171,  ..., -0.3049,  0.0097, -0.1621],
           │    │                     [-0.0977, -0.0377,  0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f717a7d84f0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f7182afcca0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7f7182afd7e0>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7f7182afd5a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
              │    │                     [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7f717918beb0>
              └ <function _scan_reduce.<locals>.scan at 0x7f717918be20>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[-0.7446,  0.2122,  0.0598,  ..., -1.0338,  0.4098,  0.3842],
    │          │ │                [-0.1846, -0.3838, -0.0444,  ...,  0.0801, -0.5...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7f717918beb0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[ 0.1411,  0.4384,  0.9949,  ...,  0.0157, -0.7950, -0.2264],
                 │       │             [ 0.3061,  0.4701,  0.5718,  ..., -0.0973, -0.8...
                 │       └ tensor([[-0.7446,  0.2122,  0.0598,  ..., -1.0338,  0.4098,  0.3842],
                 │                 [-0.1846, -0.3838, -0.0444,  ...,  0.0801, -0.5...
                 └ <function total_loss.<locals>.reducer at 0x7f717918bd90>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-0.5739, -1.7768, -0.2217,  ..., -4.1363, -4.1363, -4.1363],
    │     │                   [ 1.6028, -1.8322, -1.6156,  ...,  0.1892,  0.1...
    │     └ <built-in method logsumexp of type object at 0x7f73cfe59840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 1 has a total capacity of 47.54 GiB of which 2.58 GiB is free. Process 2092049 has 44.94 GiB memory in use. Of the allocated memory 44.19 GiB is allocated by PyTorch, and 82.37 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:25:34.603 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:26:03.827 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:26:03.827 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:26:06.731 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:26:13.358 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (204117), thread 'MainThread' (139797151863232):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f250ec6ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f250f706f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f250ec6ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f250e2fe440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f250eca9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f250eca9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f250eca9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f250e1769e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f250ebef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f250e385930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f250eca8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f250e2fe3b0>
    │   └ <property object at 0x7f250f1b1f30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f250e2fd750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f250e2fd6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f250f56dbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f250f732830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f250cf99d20>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f22b54d1210>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f22d43cb9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f22b52d8790>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f22d43cb880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f22b52d8790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f22b52d8790>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f22d43e03a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f22b52d8790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f22d43e05e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f22b52d8790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f22b52d8790>
    │    └ <property object at 0x7f22d43d36a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f22b52d8790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f22d43e0670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f22b52d8790>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f22b52d9240>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f22d43e0790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f22b52d8790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f22d43e9170>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f22b52d8790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f22d437acb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f22b52daf80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f22d43e6710>
    │    │          └ <function Loop.run at 0x7f22d430eb00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f22b52d9180>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f22b52daf80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f22d43e6710>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f22d4367ac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f22b52d9180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f22d430eb00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f22b52d9ed0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f22b52d9180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f22d4364820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f22b52d9ed0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f22d430eb00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f22b52da380>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f22b52d9ed0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f22d43640d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f22b52da380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f22d43641f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f22b52da380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f22b5304130>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f22d43645e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f22b52da380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f22d43f2290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f22b5304130>
    │         └ <function LightningOptimizer.step at 0x7f231751e710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f22b5304130>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f22b53e8a40 to Trainer at 0x7f22b52d8790>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f22b5304130>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f23bc8cc700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f22b52da470>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f22b52d8550>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f22b54fcc10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f23bd247d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f23bd247d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f22b5304130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f22d4357b50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f22b5304130>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f22b5304130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f22b5304130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7f22d44c74c0>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f22b52da380>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f23175bdab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f22b52d9240>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f22b52d8550>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7f23175a97b0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f22b52d9240>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f23bd5cc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f23bd20c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f23bd5cc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 489, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f22bec9f1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f22bd85ad40>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f22bd85ad40>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f22bd85ad40>
           │    │     └ <function Flow.flow_from_tape at 0x7f22c9488280>
           │    └ <silk.flow.Flow object at 0x7f22bd85add0>
           └ <silk.flow.FixedOutputFlow object at 0x7f22bd85ad40>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f22bd85b910>, <silk.flow._InputExtraction object at 0x7f22bd85acb0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f22bd85add0>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f250f4004f0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-0.1523, -0.0587,  0.1589,  ...,  0.2326, -0.0792,  0.0946],
           │    │          │         │                  [ 0.0973, -0.0194,  0...
           │    │          │         └ <property object at 0x7f250f4004a0>
           │    │          └ <BoundArguments (desc_0=tensor([[[-0.1523, -0.0587,  0.1589,  ...,  0.2326, -0.0792,  0.0946],
           │    │                     [ 0.0973, -0.0194,  0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f22b54d02b0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f22bec9d360>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7f22bec9d7e0>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7f22bec9d5a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
              │    │                     [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7f22b5333eb0>
              └ <function _scan_reduce.<locals>.scan at 0x7f22b5333e20>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[-0.2074, -0.0066,  0.1331,  ..., -0.2817, -0.1778, -0.5621],
    │          │ │                [ 0.0059,  0.2798,  0.1616,  ...,  0.9055, -0.1...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7f22b5333eb0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[ 0.1814, -0.0149,  0.5263,  ...,  0.2619, -0.1964,  0.1863],
                 │       │             [-0.2842, -0.7091,  0.9178,  ...,  0.1155,  0.1...
                 │       └ tensor([[-0.2074, -0.0066,  0.1331,  ..., -0.2817, -0.1778, -0.5621],
                 │                 [ 0.0059,  0.2798,  0.1616,  ...,  0.9055, -0.1...
                 └ <function total_loss.<locals>.reducer at 0x7f22b5333d90>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[ 4.0121,  1.0343,  0.9612,  ...,  1.5836,  1.1204, -0.4334],
    │     │                   [-0.9228, -2.0449, -1.6371,  ...,  0.0306,  0.1...
    │     └ <built-in method logsumexp of type object at 0x7f250c059840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 1 has a total capacity of 47.54 GiB of which 2.48 GiB is free. Process 2094193 has 45.03 GiB memory in use. Of the allocated memory 44.19 GiB is allocated by PyTorch, and 177.76 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:26:13.510 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:27:17.802 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:27:17.802 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:27:20.758 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:27:27.472 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (205842), thread 'MainThread' (140569565483456):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fd8e636ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fd8e6e0ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fd8e636ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fd8e5a2e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fd8e63a9d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fd8e63a9e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fd8e63a9cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fd8e588a9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fd8e62f32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fd8e5ab5960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fd8e63a8ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fd8e5a2e3b0>
    │   └ <property object at 0x7fd8e63d6ed0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fd8e5a2d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fd8e5a2d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fd8e6c75bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fd8e6e3a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fd8e56e5d80>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fd68cbcd270>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fd6abad79a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd68ca55db0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fd6abad7880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd68ca55db0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd68ca55db0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fd6abaf03a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd68ca55db0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fd6abaf05e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd68ca55db0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd68ca55db0>
    │    └ <property object at 0x7fd6abadf6f0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd68ca55db0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fd6abaf0670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd68ca55db0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fd68ca57f70>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fd6abaf0790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd68ca55db0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7fd6abaf91c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fd68ca55db0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7fd6aba8acb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fd68ca54c10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fd6abaf6740>
    │    │          └ <function Loop.run at 0x7fd6aba1ab00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fd68ca55d80>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fd68ca54c10>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fd6abaf6740>,)
    │    └ <function TrainingEpochLoop.advance at 0x7fd6aba77ac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fd68ca55d80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7fd6aba1ab00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fd68ca56c80>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fd68ca55d80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7fd6aba74820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fd68ca56c80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7fd6aba1ab00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fd68ca55a80>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fd68ca56c80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7fd6aba740d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fd68ca55a80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7fd6aba741f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fd68ca55a80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd68ca4c1f0>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7fd6aba745e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fd68ca55a80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7fd6abafe290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd68ca4c1f0>
    │         └ <function LightningOptimizer.step at 0x7fd6eec22710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd68ca4c1f0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7fd68cbc3ab0 to Trainer at 0x7fd68ca55db0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd68ca4c1f0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7fd793ed0700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7fd68ca54bb0>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fd68ca55d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7fd68cbf8c10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7fd79484bd90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7fd79484bd00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd68ca4c1f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7fd6aba63b50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd68ca4c1f0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd68ca4c1f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fd68ca4c1f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7fd6abbd3510>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fd68ca55a80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7fd6eecc1ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fd68ca57f70>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fd68ca55d50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7fd6eecb1620>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fd68ca57f70>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fd794bd05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fd794810280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fd794bd05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 489, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fd69653b1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fd694f5ad40>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fd694f5ad40>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fd694f5ad40>
           │    │     └ <function Flow.flow_from_tape at 0x7fd6a0c88280>
           │    └ <silk.flow.Flow object at 0x7fd694f5add0>
           └ <silk.flow.FixedOutputFlow object at 0x7fd694f5ad40>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fd694f5b910>, <silk.flow._InputExtraction object at 0x7fd694f5acb0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fd694f5add0>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fd8e6b084f0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-0.0808, -0.0220,  0.2736,  ...,  0.1535,  0.1932,  0.0290],
           │    │          │         │                  [-0.0085, -0.0491,  0...
           │    │          │         └ <property object at 0x7fd8e6b084a0>
           │    │          └ <BoundArguments (desc_0=tensor([[[-0.0808, -0.0220,  0.2736,  ...,  0.1535,  0.1932,  0.0290],
           │    │                     [-0.0085, -0.0491,  0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fd68cbcc310>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fd696538ca0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7fd6965397e0>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7fd6965395a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
              │    │                     [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7fd68c9ffeb0>
              └ <function _scan_reduce.<locals>.scan at 0x7fd68c9ffe20>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[ 0.5764,  0.3512, -0.2332,  ..., -0.4937,  0.1204,  0.0678],
    │          │ │                [ 0.5764,  0.3512, -0.2332,  ..., -0.4937,  0.1...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7fd68c9ffeb0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[-0.2858, -0.0922,  1.1099,  ...,  0.7189,  0.9714,  0.3513],
                 │       │             [-0.5841,  0.0025,  0.7733,  ...,  0.7741,  0.8...
                 │       └ tensor([[ 0.5764,  0.3512, -0.2332,  ..., -0.4937,  0.1204,  0.0678],
                 │                 [ 0.5764,  0.3512, -0.2332,  ..., -0.4937,  0.1...
                 └ <function total_loss.<locals>.reducer at 0x7fd68c9ffd90>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-1.9185, -2.9714, -2.8757,  ..., -3.4495, -6.4135, -7.5076],
    │     │                   [-1.9185, -2.9714, -2.8757,  ..., -3.4495, -6.4...
    │     └ <built-in method logsumexp of type object at 0x7fd8e3659840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 1 has a total capacity of 47.54 GiB of which 2.58 GiB is free. Process 2096640 has 44.94 GiB memory in use. Of the allocated memory 44.19 GiB is allocated by PyTorch, and 82.37 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:27:27.928 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:29:15.575 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:29:15.576 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:29:18.571 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:29:25.199 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (207567), thread 'MainThread' (140026941526464):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f5a8f4dee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f5a8ff86f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f5a8f4dee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f5a8ebaa440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f5a8f519d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f5a8f519e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f5a8f519cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f5a8ea0e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f5a8f4672e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f5a8ec31960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f5a8f518ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f5a8ebaa3b0>
    │   └ <property object at 0x7f5a8f546e30>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f5a8eba9750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f5a8eba96c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f5a8fdedbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f5a8ffb2830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f5a8d7a1ba0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f583df60340>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f5854c5f9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58362f4580>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f5854c5f880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58362f4580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58362f4580>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f5854c743a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58362f4580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f5854c745e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58362f4580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58362f4580>
    │    └ <property object at 0x7f5854c63920>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58362f4580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f5854c74670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58362f4580>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f58362f5900>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f5854c74790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58362f4580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f5854c793f0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f58362f4580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f5854c12cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f58362f70d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f5854a7b5e0>
    │    │          └ <function Loop.run at 0x7f5854ba2b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f58362f4130>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f58362f70d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f5854a7b5e0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f5854bffac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f58362f4130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f5854ba2b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f58362f59f0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f58362f4130>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f5854bfc820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f58362f59f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f5854ba2b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f58362f4eb0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f58362f59f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f5854bfc0d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f58362f4eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f5854bfc1f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f58362f4eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f583178c0a0>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f5854bfc5e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f58362f4eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f5854a82290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f583178c0a0>
    │         └ <function LightningOptimizer.step at 0x7f5897d8e710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f583178c0a0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f583e139350 to Trainer at 0x7f58362f4580>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f583178c0a0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f5897c7c700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f58362f6110>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f58362f4280>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f583df8cc10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f593da53d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f593da53d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f583178c0a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f5854bebb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f583178c0a0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f583178c0a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f583178c0a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7f5854d537e0>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f58362f4eb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f5897e2dab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f58362f5900>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f58362f4280>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7f5897e197b0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f58362f5900>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f593ddd85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f593da18280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f593ddd85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 489, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f583f50f1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f583e0e7ac0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f583e0e7ac0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f583e0e7ac0>
           │    │     └ <function Flow.flow_from_tape at 0x7f5849ea0280>
           │    └ <silk.flow.Flow object at 0x7f583e0e7550>
           └ <silk.flow.FixedOutputFlow object at 0x7f583e0e7ac0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f583e0e7670>, <silk.flow._InputExtraction object at 0x7f583e0e6b30>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f583e0e7550>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f5a8fc804f0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-0.2070,  0.1087,  0.0487,  ...,  0.0477,  0.0160, -0.0335],
           │    │          │         │                  [-0.1244,  0.2586, -0...
           │    │          │         └ <property object at 0x7f5a8fc804a0>
           │    │          └ <BoundArguments (desc_0=tensor([[[-0.2070,  0.1087,  0.0487,  ...,  0.0477,  0.0160, -0.0335],
           │    │                     [-0.1244,  0.2586, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f583df610c0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f583f50d510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7f583f50d990>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7f583f50d750>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
              │    │                     [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7f58362cfeb0>
              └ <function _scan_reduce.<locals>.scan at 0x7f58362cfe20>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[-0.0052, -0.0944,  0.3572,  ...,  0.5578, -0.8627,  0.2373],
    │          │ │                [ 0.1767,  0.1740, -0.3738,  ..., -0.5420,  0.4...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7f58362cfeb0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[-0.0838,  0.1246,  0.0531,  ...,  0.0010, -0.0265, -0.8835],
                 │       │             [-0.2832, -0.6140,  0.0602,  ...,  0.0497, -0.4...
                 │       └ tensor([[-0.0052, -0.0944,  0.3572,  ...,  0.5578, -0.8627,  0.2373],
                 │                 [ 0.1767,  0.1740, -0.3738,  ..., -0.5420,  0.4...
                 └ <function total_loss.<locals>.reducer at 0x7f58362cfd90>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[ 0.7407, -1.6377,  3.2629,  ...,  0.9508, -0.7128,  5.6806],
    │     │                   [ 2.8375,  1.4242, -1.4779,  ..., -1.3828,  0.2...
    │     └ <built-in method logsumexp of type object at 0x7f5a8c859840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 1 has a total capacity of 47.54 GiB of which 2.48 GiB is free. Process 2099523 has 45.03 GiB memory in use. Of the allocated memory 44.19 GiB is allocated by PyTorch, and 177.76 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:29:25.590 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:30:02.683 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:30:02.684 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:30:05.564 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:30:11.819 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (209355), thread 'MainThread' (140269235548608):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f92f925ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f92f9d1af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f92f925ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f92f891e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f92f929dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f92f929de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f92f929dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f92f89d69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f92f91e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f92f89a98d0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f92f929cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f92f891e3b0>
    │   └ <property object at 0x7f92f92c6e80>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f92f891d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f92f891d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f92f9b85bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f92f9d46830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f92f75859c0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f90a02d53f0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f90be9d39a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f90a00bd2d0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f90be9d3880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f90a00bd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f90a00bd2d0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f90be9ec3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f90a00bd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f90be9ec5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f90a00bd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f90a00bd2d0>
    │    └ <property object at 0x7f90be9db6a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f90a00bd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f90be9ec670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f90a00bd2d0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f90a00bdc00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f90be9ec790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f90a00bd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f90be9f1170>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f90a00bd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f90be986cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f90a00bd3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f90be9ea410>
    │    │          └ <function Loop.run at 0x7f90beb12b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f90a00befb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f90a00bd3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f90be9ea410>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f90be973ac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f90a00befb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f90beb12b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f90a00bf010>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f90a00befb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f90be970820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f90a00bf010>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f90beb12b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f90a00bdff0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f90a00bf010>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f90be9700d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f90a00bdff0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f90be9701f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f90a00bdff0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f90a0158040>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f90be9705e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f90a00bdff0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f90be9fa290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f90a0158040>
    │         └ <function LightningOptimizer.step at 0x7f9101b12710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f90a0158040>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f90a030a750 to Trainer at 0x7f90a00bd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f90a0158040>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f9101bfc700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f90a00bd390>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f90a00bc700>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f90a0300c10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f91a7837d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f91a7837d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f90a0158040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f90be95fb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f90a0158040>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f90a0158040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f90a0158040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7f90beacb470>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f90a00bdff0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f9101bb1ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f90a00bdc00>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f90a00bc700>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7f9101ba4f90>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f90a00bdc00>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f91a7db85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f91a77fc280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f91a7db85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 489, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f90a947f1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f90a7e5ee30>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f90a7e5ee30>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f90a7e5ee30>
           │    │     └ <function Flow.flow_from_tape at 0x7f90b3a78280>
           │    └ <silk.flow.Flow object at 0x7f90a7e5eec0>
           └ <silk.flow.FixedOutputFlow object at 0x7f90a7e5ee30>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f90a7e5fa00>, <silk.flow._InputExtraction object at 0x7f90a7e5eda0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f90a7e5eec0>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f92f9a14360>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 4.2858e-02, -5.8011e-02,  7.5806e-02,  ..., -1.7821e-01,
           │    │          │         │                   -3.9333e-02,  2.2645e-0...
           │    │          │         └ <property object at 0x7f92f9a14310>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 4.2858e-02, -5.8011e-02,  7.5806e-02,  ..., -1.7821e-01,
           │    │                      -3.9333e-02,  2.2645e-0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f90a02d4490>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f90a947d510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7f90a947d990>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7f90a947d750>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
              │    │                     [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7f90a014beb0>
              └ <function _scan_reduce.<locals>.scan at 0x7f90a014be20>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[ 0.0776,  0.2426,  0.7928,  ...,  0.5974,  0.0517,  0.0828],
    │          │ │                [ 0.0687,  0.2601,  0.8243,  ...,  0.6025, -0.0...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7f90a014beb0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[ 0.0419,  0.1487, -0.1550,  ..., -0.4900, -0.7334,  0.4502],
                 │       │             [ 0.1609,  0.2012,  0.0140,  ..., -0.3598, -0.5...
                 │       └ tensor([[ 0.0776,  0.2426,  0.7928,  ...,  0.5974,  0.0517,  0.0828],
                 │                 [ 0.0687,  0.2601,  0.8243,  ...,  0.6025, -0.0...
                 └ <function total_loss.<locals>.reducer at 0x7f90a014bd90>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-4.9182, -4.8293, -4.2255,  ..., -1.6281,  0.0274, -0.9455],
    │     │                   [-4.5945, -4.5075, -3.9100,  ..., -1.6576,  0.0...
    │     └ <built-in method logsumexp of type object at 0x7f92f6659840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 1 has a total capacity of 47.54 GiB of which 2.58 GiB is free. Process 2101819 has 44.94 GiB memory in use. Of the allocated memory 44.19 GiB is allocated by PyTorch, and 82.37 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:30:12.243 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:32:44.944 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:32:44.945 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:32:47.970 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:32:53.532 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (211143), thread 'MainThread' (140469774270912):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fc1aa2e2e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fc1aadbef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fc1aa2e2e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fc1a99e6440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fc1aa321d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fc1aa321e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fc1aa321cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fc1a98429e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fc1aa26b2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fc1a9a6d930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fc1aa320ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fc1a99e63b0>
    │   └ <property object at 0x7fc1aa34b0b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fc1a99e5750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fc1a99e56c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fc1aac29bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fc1aadea830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fc1a96a1d20>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fbf50b611b0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fbf6fa839a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbf508ddfc0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fbf6fa83880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbf508ddfc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbf508ddfc0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fbf6f8983a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbf508ddfc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fbf6f8985e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbf508ddfc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbf508ddfc0>
    │    └ <property object at 0x7fbf6fa8b600>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbf508ddfc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fbf6f898670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbf508ddfc0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fbf508dd840>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fbf6f898790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbf508ddfc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7fbf6f8a50d0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fbf508ddfc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7fbf6fa36cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fbf508df850>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fbf6f8a2680>
    │    │          └ <function Loop.run at 0x7fbf6f9c6b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fbf508dfbb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fbf508df850>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fbf6f8a2680>,)
    │    └ <function TrainingEpochLoop.advance at 0x7fbf6fa23ac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fbf508dfbb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7fbf6f9c6b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fbf508de890>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fbf508dfbb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7fbf6fa20820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fbf508de890>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7fbf6f9c6b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fbf508dd510>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fbf508de890>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7fbf6fa200d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fbf508dd510>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7fbf6fa201f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fbf508dd510>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbf50914190>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7fbf6fa205e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fbf508dd510>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7fbf6f8aa290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbf50914190>
    │         └ <function LightningOptimizer.step at 0x7fbfb2b86710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbf50914190>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7fbf50b6c630 to Trainer at 0x7fbf508ddfc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbf50914190>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7fbfb2a74700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7fbf508dca30>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fbf508dc760>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7fbf50b8cc10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7fc05885bd90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7fc05885bd00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbf50914190>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7fbf6fa0fb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbf50914190>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbf50914190>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fbf50914190>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7fbf6fb834c0>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fbf508dd510>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7fbfb2c21ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fbf508dd840>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fbf508dc760>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7fbfb2c156c0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fbf508dd840>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fc058be05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fc058820280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fc058be05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 489, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fbf5a30b1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fbf58ee2d10>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fbf58ee2d10>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fbf58ee2d10>
           │    │     └ <function Flow.flow_from_tape at 0x7fbf64ca8280>
           │    └ <silk.flow.Flow object at 0x7fbf58ee2da0>
           └ <silk.flow.FixedOutputFlow object at 0x7fbf58ee2d10>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fbf58ee38e0>, <silk.flow._InputExtraction object at 0x7fbf58ee2c80>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fbf58ee2da0>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fc1aaabc3b0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-0.1559, -0.0984,  0.0700,  ...,  0.0152, -0.0286, -0.1343],
           │    │          │         │                  [-0.0994,  0.0273, -0...
           │    │          │         └ <property object at 0x7fc1aaabc360>
           │    │          └ <BoundArguments (desc_0=tensor([[[-0.1559, -0.0984,  0.0700,  ...,  0.0152, -0.0286, -0.1343],
           │    │                     [-0.0994,  0.0273, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fbf50b60250>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fbf5a309510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7fbf5a309990>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7fbf5a309750>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
              │    │                       0.0000e+00,  0.0000e+00],
              │    │                     [ 0.0000e+0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7fbf508f3eb0>
              └ <function _scan_reduce.<locals>.scan at 0x7fbf508f3e20>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[ 0.0861, -0.0876, -0.6748,  ...,  0.2382, -0.2780, -0.0009],
    │          │ │                [ 0.0861, -0.0876, -0.6748,  ...,  0.2382, -0.2...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7fbf508f3eb0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[-5.0237e-01,  3.2154e-02,  3.8707e-01,  ..., -1.4709e-02,
                 │       │              -3.5001e-01, -8.9221e-02],
                 │       │             [ 3.1763e-01, ...
                 │       └ tensor([[ 0.0861, -0.0876, -0.6748,  ...,  0.2382, -0.2780, -0.0009],
                 │                 [ 0.0861, -0.0876, -0.6748,  ...,  0.2382, -0.2...
                 └ <function total_loss.<locals>.reducer at 0x7fbf508f3d90>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-1.0514, -4.3590, -3.1127,  ..., -1.1287, -2.7657,  0.5119],
    │     │                   [-1.0514, -4.3590, -3.1127,  ..., -1.1287, -2.7...
    │     └ <built-in method logsumexp of type object at 0x7fc1a7659840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 0 has a total capacity of 47.54 GiB of which 2.30 GiB is free. Process 2105228 has 45.21 GiB memory in use. Of the allocated memory 44.90 GiB is allocated by PyTorch, and 10.25 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:32:53.995 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:33:04.599 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:33:04.600 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:33:07.525 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:33:13.851 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (212868), thread 'MainThread' (140681489547712):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7ff2f566ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7ff2f612af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7ff2f566ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7ff2f4d2e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7ff2f56add80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7ff2f56ade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7ff2f56adcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7ff2f4b9e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7ff2f55f32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7ff2f4db5930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7ff2f56acee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7ff2f4d2e3b0>
    │   └ <property object at 0x7ff2f56d6de0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7ff2f4d2d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7ff2f4d2d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7ff2f5f95bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7ff2f6156830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7ff2f3995ab0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7ff09c0e53f0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7ff0badf39a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff095ccd2d0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7ff0badf3880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff095ccd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff095ccd2d0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7ff0bae0c3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff095ccd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7ff0bae0c5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff095ccd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff095ccd2d0>
    │    └ <property object at 0x7ff0badf7790>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff095ccd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7ff0bae0c670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff095ccd2d0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7ff095ccdc00>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7ff0bae0c790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff095ccd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7ff0bae15260>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7ff095ccd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7ff0bada6cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7ff095ccd3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7ff0bae123e0>
    │    │          └ <function Loop.run at 0x7ff0bad36b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7ff095ccefb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7ff095ccd3c0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7ff0bae123e0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7ff0bad93ac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7ff095ccefb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7ff0bad36b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7ff095ccf010>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7ff095ccefb0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7ff0bad90820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7ff095ccf010>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7ff0bad36b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7ff095ccdff0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7ff095ccf010>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7ff0bad900d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7ff095ccdff0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7ff0bad901f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7ff095ccdff0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7ff095cbc040>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7ff0bad905e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7ff095ccdff0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7ff0bae1a290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7ff095cbc040>
    │         └ <function LightningOptimizer.step at 0x7ff0fdf1a710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7ff095cbc040>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7ff095dd1300 to Trainer at 0x7ff095ccd2d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7ff095cbc040>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7ff1a32c8700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7ff095ccd390>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7ff095ccc700>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7ff09c110c10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7ff1a3c47d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7ff1a3c47d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7ff095cbc040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7ff0bad7fb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7ff095cbc040>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7ff095cbc040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7ff095cbc040>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7ff0baef3600>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7ff095ccdff0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7ff0fdfb9ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7ff095ccdc00>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7ff095ccc700>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7ff0fdfad030>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7ff095ccdc00>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7ff1a3fcc5e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7ff1a3c0c280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7ff1a3fcc5e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 489, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7ff0a569b1c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7ff0a4272e30>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7ff0a4272e30>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7ff0a4272e30>
           │    │     └ <function Flow.flow_from_tape at 0x7ff0afe94280>
           │    └ <silk.flow.Flow object at 0x7ff0a4272ec0>
           └ <silk.flow.FixedOutputFlow object at 0x7ff0a4272e30>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7ff0a4273a00>, <silk.flow._InputExtraction object at 0x7ff0a4272da0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7ff0a4272ec0>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7ff2f5e283b0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 0.1923, -0.0154, -0.1180,  ..., -0.4234, -0.3085, -0.0376],
           │    │          │         │                  [ 0.0675, -0.1697, -0...
           │    │          │         └ <property object at 0x7ff2f5e28360>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 0.1923, -0.0154, -0.1180,  ..., -0.4234, -0.3085, -0.0376],
           │    │                     [ 0.0675, -0.1697, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7ff09c0e4490>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7ff0a5699510>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7ff0a5699990>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7ff0a5699750>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
              │    │                       0.0000e+00,  0.0000e+00],
              │    │                     [ 0.0000e+0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7ff095c03eb0>
              └ <function _scan_reduce.<locals>.scan at 0x7ff095c03e20>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[ 0.7067, -0.2988, -0.1262,  ...,  0.5319,  0.0142, -0.1922],
    │          │ │                [ 0.3321, -0.4513, -0.6331,  ...,  0.0255, -0.4...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7ff095c03eb0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[ 0.0481,  0.3512, -0.4974,  ..., -0.3254,  0.1209,  0.2513],
                 │       │             [ 0.0481,  0.3512, -0.4974,  ..., -0.3254,  0.1...
                 │       └ tensor([[ 0.7067, -0.2988, -0.1262,  ...,  0.5319,  0.0142, -0.1922],
                 │                 [ 0.3321, -0.4513, -0.6331,  ...,  0.0255, -0.4...
                 └ <function total_loss.<locals>.reducer at 0x7ff095c03d90>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-7.1659, -7.1659, -7.1659,  ..., -7.1659, -7.1659, -7.1659],
    │     │                   [-3.5064, -3.5064, -3.5064,  ..., -3.5064, -3.5...
    │     └ <built-in method logsumexp of type object at 0x7ff2f2a59840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 0 has a total capacity of 47.54 GiB of which 2.30 GiB is free. Process 2107138 has 45.21 GiB memory in use. Of the allocated memory 44.90 GiB is allocated by PyTorch, and 10.25 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:33:14.333 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:33:27.052 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:33:27.053 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:33:30.035 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:33:35.895 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (214656), thread 'MainThread' (140257583731136):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f9042a6ae40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f9043512f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f9042a6ae40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f904212a440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f9042aa5d80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f9042aa5e10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f9042aa5cf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f9041f869e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f90429ef2e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f90421b1990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f9042aa4ee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f904212a3b0>
    │   └ <property object at 0x7f9042ad2de0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f9042129750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f90421296c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f9043379bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f904353e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f9040d91d80>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f8de92bd2d0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f8e081c79a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8de91385e0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f8e081c7880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8de91385e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8de91385e0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f8e081e03a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8de91385e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f8e081e05e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8de91385e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8de91385e0>
    │    └ <property object at 0x7f8e081cf650>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8de91385e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f8e081e0670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8de91385e0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8de913a0e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f8e081e0790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8de91385e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7f8e081e9120>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f8de91385e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7f8e0817acb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f8de913b850>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f8e081e6770>
    │    │          └ <function Loop.run at 0x7f8e0810ab00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f8de913b9a0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7f8de913b850>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f8e081e6770>,)
    │    └ <function TrainingEpochLoop.advance at 0x7f8e08167ac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f8de913b9a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7f8e0810ab00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f8de9139cf0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7f8de913b9a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7f8e08164820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f8de9139cf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7f8e0810ab00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f8de913a6b0>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7f8de9139cf0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7f8e081640d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f8de913a6b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7f8e081641f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f8de913a6b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8de90a42e0>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7f8e081645e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f8de913a6b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7f8e081ee290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8de90a42e0>
    │         └ <function LightningOptimizer.step at 0x7f8e4b31a710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8de90a42e0>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7f8df21451c0 to Trainer at 0x7f8de91385e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8de90a42e0>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7f8ef06c4700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7f8de9138370>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f8de913a680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7f8de92e4c10>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7f8ef1043d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7f8ef1043d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8de90a42e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7f8e08153b50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8de90a42e0>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8de90a42e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7f8de90a42e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7f8e082c7600>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7f8de913a6b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7f8e4b3b5ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8de913a0e0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f8de913a680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7f8e4b3ace50>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f8de913a0e0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f8ef13c85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f8ef1008280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f8ef13c85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 489, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f8df2c871c0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 466, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f8df164ed70>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ (35, 36)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f8df164ed70>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f8df164ed70>
           │    │     └ <function Flow.flow_from_tape at 0x7f8dfd280280>
           │    └ <silk.flow.Flow object at 0x7f8df164ee00>
           └ <silk.flow.FixedOutputFlow object at 0x7f8df164ed70>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f8df164f940>, <silk.flow._InputExtraction object at 0x7f8df164ece0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f8df164ee00>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f904320c4f0>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-0.2265,  0.0376, -0.0349,  ...,  0.0690, -0.0837, -0.0826],
           │    │          │         │                  [-0.1252,  0.1188, -0...
           │    │          │         └ <property object at 0x7f904320c4a0>
           │    │          └ <BoundArguments (desc_0=tensor([[[-0.2265,  0.0376, -0.0349,  ...,  0.0690, -0.0837, -0.0826],
           │    │                     [-0.1252,  0.1188, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f8de92bc370>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f8df2c84ca0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7f8df2c857e0>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7f8df2c855a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
              │    │                       0.0000e+00,  0.0000e+00],
              │    │                     [ 0.0000e+0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7f8de90cd5a0>
              └ <function _scan_reduce.<locals>.scan at 0x7f8de90cd510>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[ 0.2400, -0.2343,  0.3892,  ...,  0.6154, -0.3894,  0.9552],
    │          │ │                [-0.2238, -0.2866,  0.4906,  ..., -0.3624,  0.0...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7f8de90cd5a0>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[-0.3790,  0.4666,  0.1455,  ..., -0.3408,  0.4070, -0.0305],
                 │       │             [-0.3790,  0.4666,  0.1455,  ..., -0.3408,  0.4...
                 │       └ tensor([[ 0.2400, -0.2343,  0.3892,  ...,  0.6154, -0.3894,  0.9552],
                 │                 [-0.2238, -0.2866,  0.4906,  ..., -0.3624,  0.0...
                 └ <function total_loss.<locals>.reducer at 0x7f8de90cd480>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-4.7849, -4.7849, -4.7849,  ..., -4.7849, -4.7849, -4.7849],
    │     │                   [-4.6768, -4.6768, -4.6768,  ..., -4.6768, -4.6...
    │     └ <built-in method logsumexp of type object at 0x7f903fe59840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 0 has a total capacity of 47.54 GiB of which 2.30 GiB is free. Process 2109193 has 45.21 GiB memory in use. Of the allocated memory 44.90 GiB is allocated by PyTorch, and 10.25 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:33:36.365 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:33:47.617 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:33:47.618 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:33:50.549 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:34:06.811 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:38:30.675 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:38:30.676 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:38:33.600 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:39:02.522 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:44:46.179 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:44:46.180 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:44:49.159 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:44:50.448 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (221604), thread 'MainThread' (140311285821888):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 92, in _call_target
    return _target_(*args, **kwargs)
           │         │       └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │         └ ()
           └ <class 'silk.models.silk.SiLKRandomHomographies'>

  File "/root/silk/silk/models/silk.py", line 540, in __init__
    self._init_loss_flow(
    │    └ <function SiLKBase._init_loss_flow at 0x7f9a738bab00>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 341, in _init_loss_flow
    self._loss_fn = self.flow.with_outputs(
    │               │    └ <property object at 0x7f9a7e189080>
    │               └ SiLKRandomHomographies(
    │                   (_module): MixedModuleDict(
    │                     (_mods): ModuleDict(
    │                       (model): SiLKVGG(
    │                         (backbone): Pa...
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 250, in with_outputs
    return FixedOutputFlow(self, outputs)
           │               │     └ ('acontextual_descriptor_loss', 'keypoint_loss')
           │               └ <silk.flow.Flow object at 0x7f9a7248ed10>
           └ <class 'silk.flow.FixedOutputFlow'>

  File "/root/silk/silk/flow.py", line 290, in __init__
    self._tape = self._flow.get_tape(outputs)
    │            │    │     │        └ ('acontextual_descriptor_loss', 'keypoint_loss')
    │            │    │     └ <function Flow.get_tape at 0x7f9a7e190160>
    │            │    └ <silk.flow.Flow object at 0x7f9a7248ed10>
    │            └ <silk.flow.FixedOutputFlow object at 0x7f9a7248ec80>
    └ <silk.flow.FixedOutputFlow object at 0x7f9a7248ec80>

  File "/root/silk/silk/flow.py", line 185, in get_tape
    output_indexes = set(  # noqa: C401

  File "/root/silk/silk/flow.py", line 186, in <genexpr>
    self._name_to_index[name] for name in outputs
    │    │              │         └ 'keypoint_loss'
    │    │              └ 'keypoint_loss'
    │    └ {'batch': 0, 'use_image_aug': 1, 'images_1': 3, 'images_2': 4, 'image_shape': 5, 'pose_gt_forward': 6, 'pose_gt_backward': 7,...
    └ <silk.flow.Flow object at 0x7f9a7248ed10>

KeyError: 'keypoint_loss'


The above exception was the direct cause of the following exception:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f9cc38cee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f9cc435ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f9cc38cee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f9cc2f66440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f9cc390dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f9cc390de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f9cc390dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f9cc301e9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f9cc38572e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f9cc2fed960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f9cc390cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f9cc2f663b0>
    │   └ <property object at 0x7f9cc38f3b50>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f9cc2f65750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f9cc2f656c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f9cc41c9bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f9cc438a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 49, in main
    model = instantiate_and_ensure_is_instance(config.mode.model, pl.LightningModule)
            │                                  │                  │  └ <class 'pytorch_lightning.core.lightning.LightningModule'>
            │                                  │                  └ <module 'pytorch_lightning' from '/usr/local/lib/python3.10/dist-packages/pytorch_lightning/__init__.py'>
            │                                  └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
            └ <function instantiate_and_ensure_is_instance at 0x7f9cc2f65d80>

  File "/root/silk/silk/config/core.py", line 164, in instantiate_and_ensure_is_instance
    instance = instantiate(cfg)
               │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
               └ <function instantiate at 0x7f9cc2f65e10>

  File "/root/silk/silk/config/core.py", line 173, in instantiate
    return hydra.utils.instantiate(cfg)
           │     │     │           └ {'loss': {'_target_': 'silk.losses.info_nce.Loss', 'block_size': 5400, 'device': 'cuda:0', 'temperature': 0.1}, 'contextualiz...
           │     │     └ <function instantiate at 0x7f9cc390e560>
           │     └ <module 'hydra.utils' from '/usr/local/lib/python3.10/dist-packages/hydra/utils.py'>
           └ <module 'hydra' from '/usr/local/lib/python3.10/dist-packages/hydra/__init__.py'>

  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 226, in instantiate
    return instantiate_node(
           └ <function instantiate_node at 0x7f9cc390e680>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 347, in instantiate_node
    return _call_target(_target_, partial, args, kwargs, full_key)
           │            │         │        │     │       └ 'mode.model'
           │            │         │        │     └ {'loss': Loss(), 'contextualizer': None, 'ghost_similarity': None, 'learn_ghost_similarity': False, 'feature_downsampling_mod...
           │            │         │        └ ()
           │            │         └ False
           │            └ <class 'silk.models.silk.SiLKRandomHomographies'>
           └ <function _call_target at 0x7f9cc390e320>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/instantiate/_instantiate2.py", line 97, in _call_target
    raise InstantiationException(msg) from e
          │                      └ "Error in call to target 'silk.models.silk.SiLKRandomHomographies':\nKeyError('keypoint_loss')\nfull_key: mode.model"
          └ <class 'hydra.errors.InstantiationException'>

hydra.errors.InstantiationException: Error in call to target 'silk.models.silk.SiLKRandomHomographies':
KeyError('keypoint_loss')
full_key: mode.model
2025-02-24 09:44:50.458 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:45:38.357 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:45:38.358 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:45:41.351 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:46:08.008 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (221735), thread 'MainThread' (140385540211136):
Traceback (most recent call last):

  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7facbbfd85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 497, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fabbd747130>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 467, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fabbc32edd0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (34,)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fabbc32edd0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fabbc32edd0>
           │    │     └ <function Flow.flow_from_tape at 0x7fabc80941f0>
           │    └ <silk.flow.Flow object at 0x7fabbc32f880>
           └ <silk.flow.FixedOutputFlow object at 0x7fabbc32edd0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fabbc32f6a0>, <silk.flow._InputExtraction object at 0x7fabbc32ebf0>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fabbc32f880>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fae0dee0220>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 0.0826,  0.0442, -0.0211,  ...,  0.0347, -0.1533,  0.0844],
           │    │          │         │                  [ 0.0609,  0.0687,  0...
           │    │          │         └ <property object at 0x7fae0dee01d0>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 0.0826,  0.0442, -0.0211,  ...,  0.0347, -0.1533,  0.0844],
           │    │                     [ 0.0609,  0.0687,  0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fabb1f84250>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fabbd744c10>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7fabbd745750>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 499, in total_loss
    loss_0 = sym_corr_cross_entropy(
             └ <function sym_corr_cross_entropy at 0x7fabbd745630>

  File "/root/silk/silk/losses/info_nce/loss.py", line 329, in sym_corr_cross_entropy
    loss_0 = asym_corr_cross_entropy(
             └ <function asym_corr_cross_entropy at 0x7fabbd7455a0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 200, in asym_corr_cross_entropy
    n_corr = query_corr.sum()
             │          └ <method 'sum' of 'torch._C.TensorBase' objects>
             └ tensor([False, False, False,  ..., False, False, False], device='cuda:0')

KeyboardInterrupt


During handling of the above exception, another exception occurred:


Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fae0d772e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fae0e1e2f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fae0d772e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fae0ce06440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fae0d7add80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fae0d7ade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fae0d7adcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fae0cc629e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fae0d6f72e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fae0ce958a0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fae0d7acee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fae0ce063b0>
    │   └ <property object at 0x7fae0d79bce0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fae0ce05750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fae0ce056c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fae0e04dbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fae0e20e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fae0cabda20>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fabb1f85060>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fabd2eab9a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fabd2eab880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fabd2ec03a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fabd2ec05e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>
    │    └ <property object at 0x7fabd2eaf830>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fabd2ec0670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fabb1dba8f0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fabd2ec0790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7fabd2eafd80>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>
    │    └ <function Trainer._run_sanity_check at 0x7fabd2ec0940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7fabd2ec9260>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fabb1dbace0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7fabd2e5cd30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fabd2ec7e80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7fabd2f7d4e0>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fabd2ec7e80>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fabd2ceea40>
                 │    │          └ <function Loop.run at 0x7fabd2deeb00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fabd2ec73a0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7fabd2ec7e80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fabd2ceea40>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7fabd2e49e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fabd2ec73a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7fabd2e4a290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fabd2ec73a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7fabd2fa36f0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7fabd2ec73a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7fac160c5b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fabb1dba8f0>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fabb1dba7d0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7fac160b93a0>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fabb1dba8f0>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7facbbfd85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7facbbc14280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/utils/data/_utils/signal_handling.py", line 66, in handler
    _error_if_any_worker_fails()
    └ <built-in function _error_if_any_worker_fails>

RuntimeError: DataLoader worker (pid 221873) exited unexpectedly with exit code 1. Details are lost due to multiprocessing. Rerunning with num_workers=0 may give better error trace.
2025-02-24 09:46:08.121 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:46:11.449 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:46:11.449 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:46:14.420 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:46:41.290 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (223460), thread 'MainThread' (140156205511104):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f78a805ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f78a8b42f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f78a805ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f78a771e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f78a809dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f78a809de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f78a809dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f78a77d69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f78a7fe32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f78a77a5990>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f78a809cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f78a771e3b0>
    │   └ <property object at 0x7f78a8083c40>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f78a771d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f78a771d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f78a89adbd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f78a8b6e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f766d64c100>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f76500e4490>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f766d7e79a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f766d7e7880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f766d8003a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f766d8005e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>
    │    └ <property object at 0x7f766d7ef6f0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f766d800670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f766d631660>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f766d800790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f766d7efc40>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>
    │    └ <function Trainer._run_sanity_check at 0x7f766d800940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f766d805120>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f766d632950>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f766d798d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f766d80ab90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f766d763790>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f766d80ab90>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f763c67f370>
                 │    │          └ <function Loop.run at 0x7f766d92ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f766d8097b0>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f766d80ab90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f763c67f370>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f766d785e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f766d8097b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f766d786290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f766d8097b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f766d8df7e0>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f766d8097b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f76b09a9b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f766d631660>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f766d632c20>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f76b099ce50>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f766d631660>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f7756bb85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f77565fc280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f7756bb85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 497, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f765828b130>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 467, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7f7656c73a00>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │     │              │    │      │    │                            [255, 255, 255,  ...,  32,  30, ...
           │    │     │              │    │      │    └ (34,)
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7f7656c73a00>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7f7656c73a00>
           │    │     └ <function Flow.flow_from_tape at 0x7f76628781f0>
           │    └ <silk.flow.Flow object at 0x7f7656c73490>
           └ <silk.flow.FixedOutputFlow object at 0x7f7656c73a00>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
    │       │        │    │            │      │                    [255, 255, 255,  ...,  32,  30, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7f7656c735b0>, <silk.flow._InputExtraction object at 0x7f7656c72a70>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7f7656c73490>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7f78a883c450>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 0.0840,  0.0869,  0.1891,  ..., -0.0327, -0.0880,  0.1169],
           │    │          │         │                  [ 0.0822,  0.0740,  0...
           │    │          │         └ <property object at 0x7f78a883c400>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 0.0840,  0.0869,  0.1891,  ..., -0.0327, -0.0880,  0.1169],
           │    │                     [ 0.0822,  0.0740,  0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7f76500e50c0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7f7658288c10>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 26, in total_loss_reduction
    loss_0, loss_1, precision, recall = jax_loss.total_loss(
                                        │        └ <function total_loss at 0x7f7658289750>
                                        └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/usr/local/lib/python3.10/dist-packages/torch/_tensor.py", line 1022, in __iter__
    raise TypeError("iteration over a 0-d tensor")

TypeError: iteration over a 0-d tensor
2025-02-24 09:46:41.416 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:47:38.958 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:47:38.959 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:47:41.828 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:48:08.606 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (225248), thread 'MainThread' (140037469802944):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7f5d02d6ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7f5d03812f80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7f5d02d6ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7f5d0242e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7f5d02dadd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7f5d02dade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7f5d02dadcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7f5d0228a9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7f5d02cf32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7f5d024bd900>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7f5d02dacee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7f5d0242e3b0>
    │   └ <property object at 0x7f5d02d112b0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7f5d0242d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7f5d0242d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7f5d03679bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7f5d0383e830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7f5d020e9ba0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7f5aa95cd120>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7f5ac84d79a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7f5ac84d7880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7f5ac84f03a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7f5ac84f05e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>
    │    └ <property object at 0x7f5ac84db830>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7f5ac84f0670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f5aa9455750>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7f5ac84f0790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1306, in _run_train
    self._run_sanity_check(self.lightning_module)
    │    │                 │    └ <property object at 0x7f5ac84dbd80>
    │    │                 └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>
    │    └ <function Trainer._run_sanity_check at 0x7f5ac84f0940>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1370, in _run_sanity_check
    self._evaluation_loop.run()
    │    └ <property object at 0x7f5ac84f9260>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7f5aa9456e90>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function EvaluationLoop.advance at 0x7f5ac8488d30>
    └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f5ac84f5cc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/dataloader/evaluation_loop.py", line 109, in advance
    dl_outputs = self.epoch_loop.run(dataloader, dataloader_idx, dl_max_batches, self.num_dataloaders)
                 │    │          │   │           │               │               │    └ <property object at 0x7f5ac8457790>
                 │    │          │   │           │               │               └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f5ac84f5cc0>
                 │    │          │   │           │               └ 1
                 │    │          │   │           └ 0
                 │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f5ac831dde0>
                 │    │          └ <function Loop.run at 0x7f5ac841ab00>
                 │    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f5ac84f6b30>
                 └ <pytorch_lightning.loops.dataloader.evaluation_loop.EvaluationLoop object at 0x7f5ac84f5cc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7f5ac831dde0>, 0, 1, 1)
    │    └ <function EvaluationEpochLoop.advance at 0x7f5ac8475e10>
    └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f5ac84f6b30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 123, in advance
    output = self._evaluation_step(batch, batch_idx, dataloader_idx)
             │    │                │      │          └ 0
             │    │                │      └ 0
             │    │                └ NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                            [255, 255, 255,  ...,  32,  30,  29],
             │    │                      ...
             │    └ <function EvaluationEpochLoop._evaluation_step at 0x7f5ac8476290>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f5ac84f6b30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/evaluation_epoch_loop.py", line 215, in _evaluation_step
    output = self.trainer.accelerator.validation_step(step_kwargs)
             │    │                                   └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │    │                                               [255, 255, 255,  .....
             │    └ <property object at 0x7f5ac85cb790>
             └ <pytorch_lightning.loops.epoch.evaluation_epoch_loop.EvaluationEpochLoop object at 0x7f5ac84f6b30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 236, in validation_step
    return self.training_type_plugin.validation_step(*step_kwargs.values())
           │    │                    │                │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │                └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                    │                            [255, 255, 255,  .....
           │    │                    └ <function DDPPlugin.validation_step at 0x7f5b0b6c1b40>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f5aa9455750>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7f5aa9456ce0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 444, in validation_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                  [255, 255, 255,  ...,  32,  30,  29],
           │    │           ...
           │    └ <property object at 0x7f5b0b6b1620>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7f5aa9455750>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f5bb15d05e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
         │    │                             [255, 255, 255,  ...,  32,  30,  29],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7f5bb1210280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                        [255, 255, 255,  ...,  32,  30,  29],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │    │                       [255, 255, 255,  ...,  32,  30,  29],
           │    │                ...
           │    └ <function Module._call_impl at 0x7f5bb15d05e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
           │                         [255, 255, 255,  ...,  32,  30,  29],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 92, in forward
    output = self.module.validation_step(*inputs, **kwargs)
             │                            │         └ {}
             │                            └ (NamedContext({'image_1': tensor([[[[255, 255, 255,  ...,  35,  34,  34],
             │                                        [255, 255, 255,  ...,  32,  30,  29],
             │                                 ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 497, in validation_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7f5ab2d43130>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 479, in _total_loss
    self.log(f"{mode}.total.loss", loss)
    │    │                         └ (tensor(28.8824, device='cuda:1'),)
    │    └ <function LightningModule.log at 0x7f5ac84fd2d0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 409, in log
    apply_to_collection(
    └ <function apply_to_collection at 0x7f5baff34700>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/utilities/apply_func.py", line 92, in apply_to_collection
    return function(data, *args, **kwargs)
           │        │      │       └ {}
           │        │      └ ('val.total.loss', (tensor(28.8824, device='cuda:1'),))
           │        └ (tensor(28.8824, device='cuda:1'),)
           └ <function LightningModule.__check_allowed at 0x7f5ac84fd480>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 575, in __check_allowed
    raise ValueError(f"`self.log({name}, {value})` was called, but `{type(v).__name__}` values cannot be logged")

ValueError: `self.log(val.total.loss, (tensor(28.8824, device='cuda:1'),))` was called, but `tuple` values cannot be logged
2025-02-24 09:48:08.672 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:48:39.150 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:48:39.151 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:48:42.102 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:49:11.193 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (227036), thread 'MainThread' (140668856250816):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7ff00465ee40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7ff00511af80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7ff00465ee40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7ff003d1e440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7ff00469dd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7ff00469de10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7ff00469dcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7ff003dd69e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7ff0045e32e0>
            └ <hydra._internal.hydra.Hydra object at 0x7ff003da5960>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7ff00469cee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7ff003d1e3b0>
    │   └ <property object at 0x7ff0046c6e80>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7ff003d1d750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7ff003d1d6c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7ff004f85bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7ff005146830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7ff002985bd0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fedac0d51b0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fedc9dd39a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feda6c1f8e0>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fedc9dd3880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feda6c1f8e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7feda6c1f8e0>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fedc9de83a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feda6c1f8e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fedc9de85e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feda6c1f8e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feda6c1f8e0>
    │    └ <property object at 0x7fedc9dd79c0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feda6c1f8e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fedc9de8670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feda6c1f8e0>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7feda6c1cb50>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fedc9de8790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feda6c1f8e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7fedc9df1490>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7feda6c1f8e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7fedc9d82cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7feda6c1d2a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7feda6ccdff0>
    │    │          └ <function Loop.run at 0x7fedc9f12b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7feda6c1d4b0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7feda6c1d2a0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7feda6ccdff0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7fedc9d6fac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7feda6c1d4b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7fedc9f12b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7feda6c1d180>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7feda6c1d4b0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7fedc9d6c820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7feda6c1d180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7fedc9f12b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7feda6c1d330>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7feda6c1d180>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7fedc9d6c0d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7feda6c1d330>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7fedc9d6c1f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7feda6c1d330>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7feda6956e30>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7fedc9d6c5e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7feda6c1d330>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7fedc9dfa290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7feda6956e30>
    │         └ <function LightningOptimizer.step at 0x7fee0cf12710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7feda6956e30>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7feda6d613a0 to Trainer at 0x7feda6c1f8e0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7feda6956e30>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7fee0cffc700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7feda6c1ead0>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7feda6c1d060>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7fedac104b80>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7feeb2c37d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7feeb2c37d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7feda6956e30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7fedc9d5fb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7feda6956e30>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7feda6956e30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7feda6956e30>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7fedc9ec77e0>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7feda6c1d330>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7fee0cfb1ab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7feda6c1cb50>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7feda6c1d060>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7fee0cfa5120>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7feda6c1cb50>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7feeb31b85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7feeb2bfc280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7feeb31b85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 490, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fedb48830a0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 467, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fedb325edd0>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ 34
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fedb325edd0>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fedb325edd0>
           │    │     └ <function Flow.flow_from_tape at 0x7fedbee7c1f0>
           │    └ <silk.flow.Flow object at 0x7fedb325ee60>
           └ <silk.flow.FixedOutputFlow object at 0x7fedb325edd0>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fedb325f9a0>, <silk.flow._InputExtraction object at 0x7fedb325ed40>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fedb325ee60>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7ff004e14360>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[ 0.0879,  0.1547, -0.0148,  ..., -0.2863, -0.1160, -0.1195],
           │    │          │         │                  [ 0.0879,  0.1547, -0...
           │    │          │         └ <property object at 0x7ff004e14310>
           │    │          └ <BoundArguments (desc_0=tensor([[[ 0.0879,  0.1547, -0.0148,  ..., -0.2863, -0.1160, -0.1195],
           │    │                     [ 0.0879,  0.1547, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fedac0d43d0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fedb4880c10>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0 = jax_loss.total_loss(
             │        └ <function total_loss at 0x7fedb4881750>
             └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7fedb4881510>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0.0000,  0.0000],
              │    │                     [ 0.0000,  0.0000,  0.0000,  ...,  0.0000,  0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7feda6945510>
              └ <function _scan_reduce.<locals>.scan at 0x7feda6945480>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[ 0.1908, -0.4829,  0.3158,  ..., -0.1189,  0.3647, -0.1444],
    │          │ │                [ 0.1908, -0.4829,  0.3158,  ..., -0.1189,  0.3...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7feda6945510>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[-0.0547,  0.5450, -0.9294,  ...,  0.1401,  0.2413,  0.2222],
                 │       │             [-0.1705,  0.2880,  0.4577,  ..., -0.1355, -0.1...
                 │       └ tensor([[ 0.1908, -0.4829,  0.3158,  ..., -0.1189,  0.3647, -0.1444],
                 │                 [ 0.1908, -0.4829,  0.3158,  ..., -0.1189,  0.3...
                 └ <function total_loss.<locals>.reducer at 0x7feda69453f0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[-1.4639, -2.1710, -2.5186,  ...,  0.6128,  0.3558, -1.6974],
    │     │                   [-1.4639, -2.1710, -2.5186,  ...,  0.6128,  0.3...
    │     └ <built-in method logsumexp of type object at 0x7ff001a59840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 0 has a total capacity of 47.54 GiB of which 2.30 GiB is free. Process 2130593 has 45.21 GiB memory in use. Of the allocated memory 44.90 GiB is allocated by PyTorch, and 9.88 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:49:11.656 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
2025-02-24 09:50:18.480 | INFO     | silk.cli:_main:87 - run CLI in mode.command=training
2025-02-24 09:50:18.481 | SUCCESS  | silk.cli:_main:91 - formatter `python` successfully instantiated
2025-02-24 09:50:21.380 | SUCCESS  | silk.cli:_main_dispatch:68 - module `silk.cli.training` successfully imported
2025-02-24 09:50:50.264 | ERROR    | silk.cli:main:111 - An error has been caught in function 'main', process 'MainProcess' (230408), thread 'MainThread' (140625477648832):
Traceback (most recent call last):

  File "/usr/lib/python3.10/runpy.py", line 196, in _run_module_as_main
    return _run_code(code, main_globals, None,
           │         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
           │         └ <code object <module> at 0x7fe5ead72e40, file "/root/silk/silk/cli/__main__.py", line 1>
           └ <function _run_code at 0x7fe5eb80ef80>
  File "/usr/lib/python3.10/runpy.py", line 86, in _run_code
    exec(code, run_globals)
         │     └ {'__name__': '__main__', '__doc__': None, '__package__': 'silk.cli', '__loader__': <_frozen_importlib_external.SourceFileLoad...
         └ <code object <module> at 0x7fe5ead72e40, file "/root/silk/silk/cli/__main__.py", line 1>

  File "/root/silk/silk/cli/__main__.py", line 24, in <module>
    main()
    └ <function main at 0x7fe5ea406440>

  File "/usr/local/lib/python3.10/dist-packages/hydra/main.py", line 94, in decorated_main
    _run_hydra(
    └ <function _run_hydra at 0x7fe5eadadd80>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 394, in _run_hydra
    _run_app(
    └ <function _run_app at 0x7fe5eadade10>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 457, in _run_app
    run_and_report(
    └ <function run_and_report at 0x7fe5eadadcf0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 220, in run_and_report
    return func()
           └ <function _run_app.<locals>.<lambda> at 0x7fe5ea28a9e0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/utils.py", line 458, in <lambda>
    lambda: hydra.run(
            │     └ <function Hydra.run at 0x7fe5eacf72e0>
            └ <hydra._internal.hydra.Hydra object at 0x7fe5ea48d930>
  File "/usr/local/lib/python3.10/dist-packages/hydra/_internal/hydra.py", line 119, in run
    ret = run_job(
          └ <function run_job at 0x7fe5eadacee0>
  File "/usr/local/lib/python3.10/dist-packages/hydra/core/utils.py", line 186, in run_job
    ret.return_value = task_function(task_cfg)
    │   │              │             └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │   │              └ <function main at 0x7fe5ea4063b0>
    │   └ <property object at 0x7fe5ead9bce0>
    └ JobReturn(overrides=['mode=train-silk'], cfg={'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'pytho...

  File "/root/silk/silk/cli/__main__.py", line 21, in main
    silk.cli.main(cfg)
    │    │   │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
    │    │   └ <function main at 0x7fe5ea405750>
    │    └ <module 'silk.cli' from '/root/silk/silk/cli/__init__.py'>
    └ <module 'silk' from '/root/silk/silk/__init__.py'>

> File "/root/silk/silk/cli/__init__.py", line 111, in main
    return _main(cfg, working_dir)
           │     │    └ '.'
           │     └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           └ <function _main at 0x7fe5ea4056c0>

  File "/root/silk/silk/cli/__init__.py", line 94, in _main
    output = _main_dispatch(cfg.mode.command, cfg)
             │              │                 └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             │              └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
             └ <function _main_dispatch at 0x7fe5eb679bd0>

  File "/root/silk/silk/cli/__init__.py", line 69, in _main_dispatch
    return module.main(cfg) #HERE GO SILK.CLI.TRAINING
           │      │    └ {'formatter': {'_target_': 'silk.config.formatter.get_formatter', 'name': 'python'}, 'logger': {'handlers': {'stderr-dev': {'...
           │      └ <function main at 0x7fe5eb83a830>
           └ <module 'silk.cli.training' from '/root/silk/silk/cli/training.py'>

  File "/root/silk/silk/cli/training.py", line 90, in main
    trainer.fit(model, train_loader, val_loader) #usually this becomes train
    │       │   │      │             └ <torch.utils.data.dataloader.DataLoader object at 0x7fe5ea0ee0e0>
    │       │   │      └ <torch.utils.data.dataloader.DataLoader object at 0x7fe3915d12d0>
    │       │   └ SiLKRandomHomographies(
    │       │       (_module): MixedModuleDict(
    │       │         (_mods): ModuleDict(
    │       │           (model): SiLKVGG(
    │       │             (backbone): Pa...
    │       └ <function Trainer.fit at 0x7fe3b04e39a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe39126ef80>

  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 737, in fit
    self._call_and_handle_interrupt(
    │    └ <function Trainer._call_and_handle_interrupt at 0x7fe3b04e3880>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe39126ef80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 682, in _call_and_handle_interrupt
    return trainer_fn(*args, **kwargs)
           │           │       └ {}
           │           └ (SiLKRandomHomographies(
           │               (_module): MixedModuleDict(
           │                 (_mods): ModuleDict(
           │                   (model): SiLKVGG(
           │                     (backbone): P...
           └ <bound method Trainer._fit_impl of <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe39126ef80>>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 772, in _fit_impl
    self._run(model, ckpt_path=ckpt_path)
    │    │    │                └ None
    │    │    └ SiLKRandomHomographies(
    │    │        (_module): MixedModuleDict(
    │    │          (_mods): ModuleDict(
    │    │            (model): SiLKVGG(
    │    │              (backbone): Pa...
    │    └ <function Trainer._run at 0x7fe3b04fc3a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe39126ef80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1195, in _run
    self._dispatch()
    │    └ <function Trainer._dispatch at 0x7fe3b04fc5e0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe39126ef80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1274, in _dispatch
    self.training_type_plugin.start_training(self)
    │    │                                   └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe39126ef80>
    │    └ <property object at 0x7fe3b04eb6a0>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe39126ef80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/training_type_plugin.py", line 202, in start_training
    self._results = trainer.run_stage()
    │    │          │       └ <function Trainer.run_stage at 0x7fe3b04fc670>
    │    │          └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe39126ef80>
    │    └ None
    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fe39126d450>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1284, in run_stage
    return self._run_train()
           │    └ <function Trainer._run_train at 0x7fe3b04fc790>
           └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe39126ef80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/trainer/trainer.py", line 1314, in _run_train
    self.fit_loop.run()
    │    └ <property object at 0x7fe3b0501170>
    └ <pytorch_lightning.trainer.trainer.Trainer object at 0x7fe39126ef80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ ()
    │    └ <function FitLoop.advance at 0x7fe3b0492cb0>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fe39126c670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/fit_loop.py", line 234, in advance
    self.epoch_loop.run(data_fetcher)
    │    │          │   └ <pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fe39131d3f0>
    │    │          └ <function Loop.run at 0x7fe3b0426b00>
    │    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fe39126e680>
    └ <pytorch_lightning.loops.fit_loop.FitLoop object at 0x7fe39126c670>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (<pytorch_lightning.utilities.fetching.DataFetcher object at 0x7fe39131d3f0>,)
    │    └ <function TrainingEpochLoop.advance at 0x7fe3b047fac0>
    └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fe39126e680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/epoch/training_epoch_loop.py", line 195, in advance
    batch_output = self.batch_loop.run(batch, batch_idx)
                   │    │          │   │      └ 0
                   │    │          │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                   │    │          │               [ 44,  44,  44,  ...,   5,   6,   5],
                   │    │          │         ...
                   │    │          └ <function Loop.run at 0x7fe3b0426b00>
                   │    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fe39126cdc0>
                   └ <pytorch_lightning.loops.epoch.training_epoch_loop.TrainingEpochLoop object at 0x7fe39126e680>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function TrainingBatchLoop.advance at 0x7fe3b047c820>
    └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fe39126cdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/batch/training_batch_loop.py", line 88, in advance
    outputs = self.optimizer_loop.run(split_batch, optimizers, batch_idx)
              │    │              │   │            │           └ 0
              │    │              │   │            └ [(0, Adam (
              │    │              │   │              Parameter Group 0
              │    │              │   │                  amsgrad: False
              │    │              │   │                  betas: [0.9, 0.999]
              │    │              │   │                  capturable: False
              │    │              │   │                  differentiable: False
              │    │              │   │                  ...
              │    │              │   └ NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
              │    │              │               [ 44,  44,  44,  ...,   5,   6,   5],
              │    │              │         ...
              │    │              └ <function Loop.run at 0x7fe3b0426b00>
              │    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fe39126e260>
              └ <pytorch_lightning.loops.batch.training_batch_loop.TrainingBatchLoop object at 0x7fe39126cdc0>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/base.py", line 145, in run
    self.advance(*args, **kwargs)
    │    │        │       └ {}
    │    │        └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │    │                    [ 44,  44,  44,  ...,   5,   6,   5],
    │    │             ...
    │    └ <function OptimizerLoop.advance at 0x7fe3b047c0d0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fe39126e260>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 215, in advance
    result = self._run_optimization(
             │    └ <function OptimizerLoop._run_optimization at 0x7fe3b047c1f0>
             └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fe39126e260>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 266, in _run_optimization
    self._optimizer_step(optimizer, opt_idx, batch_idx, closure)
    │    │               │          │        │          └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fe39100e530>
    │    │               │          │        └ 0
    │    │               │          └ 0
    │    │               └ Adam (
    │    │                 Parameter Group 0
    │    │                     amsgrad: False
    │    │                     betas: [0.9, 0.999]
    │    │                     capturable: False
    │    │                     differentiable: False
    │    │                     eps: ...
    │    └ <function OptimizerLoop._optimizer_step at 0x7fe3b047c5e0>
    └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fe39126e260>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 378, in _optimizer_step
    lightning_module.optimizer_step(
    │                └ <function LightningModule.optimizer_step at 0x7fe3b050a290>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/lightning.py", line 1664, in optimizer_step
    optimizer.step(closure=optimizer_closure)
    │         │            └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fe39100e530>
    │         └ <function LightningOptimizer.step at 0x7fe3f362e710>
    └ LightningAdam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
      ...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/core/optimizer.py", line 164, in step
    trainer.accelerator.optimizer_step(self._optimizer, self._optimizer_idx, closure, **kwargs)
    │                                  │    │           │    │               │          └ {}
    │                                  │    │           │    │               └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fe39100e530>
    │                                  │    │           │    └ 0
    │                                  │    │           └ LightningAdam (
    │                                  │    │             Parameter Group 0
    │                                  │    │                 amsgrad: False
    │                                  │    │                 betas: [0.9, 0.999]
    │                                  │    │                 capturable: False
    │                                  │    │                 differentiable: False
    │                                  │    │             ...
    │                                  │    └ Adam (
    │                                  │      Parameter Group 0
    │                                  │          amsgrad: False
    │                                  │          betas: [0.9, 0.999]
    │                                  │          capturable: False
    │                                  │          differentiable: False
    │                                  │          eps: ...
    │                                  └ LightningAdam (
    │                                    Parameter Group 0
    │                                        amsgrad: False
    │                                        betas: [0.9, 0.999]
    │                                        capturable: False
    │                                        differentiable: False
    │                                    ...
    └ <weakproxy at 0x7fe3914cd1c0 to Trainer at 0x7fe39126ef80>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 336, in optimizer_step
    self.precision_plugin.optimizer_step(model, optimizer, opt_idx, closure, **kwargs)
    │    │                │              │      │          │        │          └ {}
    │    │                │              │      │          │        └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fe39100e530>
    │    │                │              │      │          └ 0
    │    │                │              │      └ Adam (
    │    │                │              │        Parameter Group 0
    │    │                │              │            amsgrad: False
    │    │                │              │            betas: [0.9, 0.999]
    │    │                │              │            capturable: False
    │    │                │              │            differentiable: False
    │    │                │              │            eps: ...
    │    │                │              └ SiLKRandomHomographies(
    │    │                │                  (_module): MixedModuleDict(
    │    │                │                    (_mods): ModuleDict(
    │    │                │                      (model): SiLKVGG(
    │    │                │                        (backbone): Pa...
    │    │                └ <function PrecisionPlugin.optimizer_step at 0x7fe4988e0700>
    │    └ <pytorch_lightning.plugins.precision.precision_plugin.PrecisionPlugin object at 0x7fe39126dba0>
    └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fe39126d930>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 163, in optimizer_step
    optimizer.step(closure=closure, **kwargs)
    │         │            │          └ {}
    │         │            └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
    │         └ <function Adam.step at 0x7fe3915fcb80>
    └ Adam (
      Parameter Group 0
          amsgrad: False
          betas: [0.9, 0.999]
          capturable: False
          differentiable: False
          eps: ...
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 385, in wrapper
    out = func(*args, **kwargs)
          │     │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │     └ (Adam (
          │       Parameter Group 0
          │           amsgrad: False
          │           betas: [0.9, 0.999]
          │           capturable: False
          │           differentiable: False
          │           eps:...
          └ <function Adam.step at 0x7fe499253d90>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/optimizer.py", line 76, in _use_grad
    ret = func(self, *args, **kwargs)
          │    │      │       └ {'closure': functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_p...
          │    │      └ ()
          │    └ Adam (
          │      Parameter Group 0
          │          amsgrad: False
          │          betas: [0.9, 0.999]
          │          capturable: False
          │          differentiable: False
          │          eps: ...
          └ <function Adam.step at 0x7fe499253d00>
  File "/usr/local/lib/python3.10/dist-packages/torch/optim/adam.py", line 146, in step
    loss = closure()
           └ functools.partial(<bound method PrecisionPlugin._wrap_closure of <pytorch_lightning.plugins.precision.precision_plugin.Precis...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/precision/precision_plugin.py", line 148, in _wrap_closure
    closure_result = closure()
                     └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fe39100e530>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 160, in __call__
    self._result = self.closure(*args, **kwargs)
    │    │         │    │        │       └ {}
    │    │         │    │        └ ()
    │    │         │    └ <function Closure.closure at 0x7fe3b046fb50>
    │    │         └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fe39100e530>
    │    └ None
    └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fe39100e530>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 142, in closure
    step_output = self._step_fn()
                  │    └ functools.partial(<bound method OptimizerLoop._training_step of <pytorch_lightning.loops.optimization.optimizer_loop.Optimize...
                  └ <pytorch_lightning.loops.optimization.optimizer_loop.Closure object at 0x7fe39100e530>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/loops/optimization/optimizer_loop.py", line 435, in _training_step
    training_step_output = self.trainer.accelerator.training_step(step_kwargs)
                           │    │                                 └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
                           │    │                                             [ 44,  44,  44,  .....
                           │    └ <property object at 0x7fe3b05db4c0>
                           └ <pytorch_lightning.loops.optimization.optimizer_loop.OptimizerLoop object at 0x7fe39126e260>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/accelerators/accelerator.py", line 216, in training_step
    return self.training_type_plugin.training_step(*step_kwargs.values())
           │    │                    │              │           └ <method 'values' of 'collections.OrderedDict' objects>
           │    │                    │              └ OrderedDict([('batch', NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                    │                          [ 44,  44,  44,  .....
           │    │                    └ <function DDPPlugin.training_step at 0x7fe3f36cdab0>
           │    └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fe39126d450>
           └ <pytorch_lightning.accelerators.gpu.GPUAccelerator object at 0x7fe39126d930>
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/plugins/training_type/ddp.py", line 439, in training_step
    return self.model(*args, **kwargs)
           │    │      │       └ {}
           │    │      └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                  [ 44,  44,  44,  ...,   5,   6,   5],
           │    │           ...
           │    └ <property object at 0x7fe3f36c1170>
           └ <pytorch_lightning.plugins.training_type.ddp.DDPPlugin object at 0x7fe39126d450>
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fe4995d85e0>
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method DistributedDataParallel.forward of DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1523, in forward
    else self._run_ddp_forward(*inputs, **kwargs)
         │    │                 │         └ {}
         │    │                 └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
         │    │                             [ 44,  44,  44,  ...,   5,   6,   5],
         │    │                      ...
         │    └ <function DistributedDataParallel._run_ddp_forward at 0x7fe499218280>
         └ DistributedDataParallel(
             (module): LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/parallel/distributed.py", line 1359, in _run_ddp_forward
    return self.module(*inputs, **kwargs)  # type: ignore[index]
           │            │         └ {}
           │            └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                        [ 44,  44,  44,  ...,   5,   6,   5],
           │                 ...
           └ DistributedDataParallel(
               (module): LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): Mixed...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1511, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           │    │           │       └ {}
           │    │           └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │                       [ 44,  44,  44,  ...,   5,   6,   5],
           │    │                ...
           │    └ <function Module._call_impl at 0x7fe4995d85e0>
           └ LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_module): MixedModuleDict(
                   (_mods): ModuleDict(
               ...
  File "/usr/local/lib/python3.10/dist-packages/torch/nn/modules/module.py", line 1520, in _call_impl
    return forward_call(*args, **kwargs)
           │             │       └ {}
           │             └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │                         [ 44,  44,  44,  ...,   5,   6,   5],
           │                  ...
           └ <bound method _LightningModuleWrapperBase.forward of LightningDistributedModule(
               (module): SiLKRandomHomographies(
                 (_mo...
  File "/usr/local/lib/python3.10/dist-packages/pytorch_lightning/overrides/base.py", line 81, in forward
    output = self.module.training_step(*inputs, **kwargs)
             │                          │         └ {}
             │                          └ (NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
             │                                      [ 44,  44,  44,  ...,   5,   6,   5],
             │                               ...
             └ LightningDistributedModule(
                 (module): SiLKRandomHomographies(
                   (_module): MixedModuleDict(
                     (_mods): ModuleDict(
                 ...

  File "/root/silk/silk/models/silk.py", line 491, in training_step
    return self._total_loss(
           │    └ <function SiLKBase._total_loss at 0x7fe39ad4f0a0>
           └ SiLKRandomHomographies(
               (_module): MixedModuleDict(
                 (_mods): ModuleDict(
                   (model): SiLKVGG(
                     (backbone): Pa...

  File "/root/silk/silk/models/silk.py", line 467, in _total_loss
    self._loss_fn(
    │    └ <silk.flow.FixedOutputFlow object at 0x7fe399962e90>
    └ SiLKRandomHomographies(
        (_module): MixedModuleDict(
          (_mods): ModuleDict(
            (model): SiLKVGG(
              (backbone): Pa...

  File "/root/silk/silk/flow.py", line 307, in __call__
    return self._flow.flow_from_tape(self._tape, self._output_indexes, inputs)
           │    │     │              │    │      │    │                └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
           │    │     │              │    │      │    │                            [ 44,  44,  44,  ...,   5,   6, ...
           │    │     │              │    │      │    └ 34
           │    │     │              │    │      └ <silk.flow.FixedOutputFlow object at 0x7fe399962e90>
           │    │     │              │    └ ((0, ()), (2, [0]), (3, ()), (4, ()), (5, ()), (6, ()), (7, ()), (8, ()), (9, ()), (10, [2]), (11, [4, 3]), (12, ()), (13, [1...
           │    │     │              └ <silk.flow.FixedOutputFlow object at 0x7fe399962e90>
           │    │     └ <function Flow.flow_from_tape at 0x7fe3a56981f0>
           │    └ <silk.flow.Flow object at 0x7fe399962f20>
           └ <silk.flow.FixedOutputFlow object at 0x7fe399962e90>

  File "/root/silk/silk/flow.py", line 221, in flow_from_tape
    session[index] = self._transitions[index](session, inputs)
    │       │        │    │            │      │        └ {'batch': NamedContext({'image_1': tensor([[[[ 45,  45,  45,  ...,   8,   8,   7],
    │       │        │    │            │      │                    [ 44,  44,  44,  ...,   5,   6, ...
    │       │        │    │            │      └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...
    │       │        │    │            └ 34
    │       │        │    └ [<silk.flow._InputExtraction object at 0x7fe399963a60>, <silk.flow._InputExtraction object at 0x7fe399962e00>, <silk.flow._Fu...
    │       │        └ <silk.flow.Flow object at 0x7fe399962f20>
    │       └ 34
    └ [None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None, None...

  File "/root/silk/silk/flow.py", line 97, in __call__
    return self._function(*arguments.args, **arguments.kwargs)
           │    │          │         │       │         └ <property object at 0x7fe5eb50c220>
           │    │          │         │       └ <BoundArguments (desc_0=tensor([[[-0.0491, -0.0537, -0.0829,  ...,  0.0460,  0.0774, -0.2230],
           │    │          │         │                  [ 0.0073, -0.0876, -0...
           │    │          │         └ <property object at 0x7fe5eb50c1d0>
           │    │          └ <BoundArguments (desc_0=tensor([[[-0.0491, -0.0537, -0.0829,  ...,  0.0460,  0.0774, -0.2230],
           │    │                     [ 0.0073, -0.0876, -0...
           │    └ Loss()
           └ <silk.flow._FunctionCall object at 0x7fe3915d04f0>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 73, in __call__
    return total_loss_reduction(
           └ <function total_loss_reduction at 0x7fe39ad4cc10>

  File "/root/silk/silk/losses/info_nce/__init__.py", line 27, in total_loss_reduction
    loss_0 = jax_loss.total_loss(
             │        └ <function total_loss at 0x7fe39ad4d750>
             └ <module 'silk.losses.info_nce.loss' from '/root/silk/silk/losses/info_nce/loss.py'>

  File "/root/silk/silk/losses/info_nce/loss.py", line 479, in total_loss
    lse_0, argmax_0, max_0 = _scan_reduce(
                             └ <function _scan_reduce at 0x7fe39ad4d510>

  File "/root/silk/silk/losses/info_nce/loss.py", line 167, in _scan_reduce
    _, accu = scan(fun, None, xs, length=n)
              │    │          │          └ 82
              │    │          └ tensor([[[ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
              │    │                       0.0000e+00,  0.0000e+00],
              │    │                     [ 0.0000e+0...
              │    └ <function _scan_reduce.<locals>.fun at 0x7fe390ffd510>
              └ <function _scan_reduce.<locals>.scan at 0x7fe390ffd480>

  File "/root/silk/silk/losses/info_nce/loss.py", line 139, in scan
    carry, y = f(carry, x)  # carry is the carryover
    │          │ │      └ tensor([[ 0.2591, -0.4179, -0.0058,  ..., -0.2428, -0.1426, -0.2472],
    │          │ │                [ 0.3286,  0.0554, -0.2391,  ..., -0.4765,  0.9...
    │          │ └ None
    │          └ <function _scan_reduce.<locals>.fun at 0x7fe390ffd510>
    └ None

  File "/root/silk/silk/losses/info_nce/loss.py", line 163, in fun
    return None, reducer(x0, x1)
                 │       │   └ tensor([[ 1.0089, -0.1933, -0.0888,  ..., -0.4328,  0.5997,  0.2099],
                 │       │             [ 0.7953, -0.4412, -0.0861,  ..., -0.4197,  0.5...
                 │       └ tensor([[ 0.2591, -0.4179, -0.0058,  ..., -0.2428, -0.1426, -0.2472],
                 │                 [ 0.3286,  0.0554, -0.2391,  ..., -0.4765,  0.9...
                 └ <function total_loss.<locals>.reducer at 0x7fe390ffd3f0>

  File "/root/silk/silk/losses/info_nce/loss.py", line 457, in reducer
    torch.logsumexp(x0x1, axis=1),
    │     │         └ tensor([[ 1.2902,  2.9539,  1.5599,  ..., -0.7538, -3.7951, -1.6017],
    │     │                   [ 4.4696,  5.5985,  5.5724,  ..., -1.4774, -1.5...
    │     └ <built-in method logsumexp of type object at 0x7fe5e8059840>
    └ <module 'torch' from '/usr/local/lib/python3.10/dist-packages/torch/__init__.py'>

torch.cuda.OutOfMemoryError: CUDA out of memory. Tried to allocate 8.81 GiB. GPU 0 has a total capacity of 47.54 GiB of which 2.30 GiB is free. Process 2134918 has 45.21 GiB memory in use. Of the allocated memory 44.90 GiB is allocated by PyTorch, and 9.88 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
2025-02-24 09:50:50.745 | ERROR    | silk.cli:main:113 - run failed, `*.log` file might be found in : .
